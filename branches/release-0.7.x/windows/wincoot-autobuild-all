#!/bin/bash
# This is the master script to make a windows Coot installer
#
# 1.) build a python version
# 2.) build a python + guile version
# 3.) pack into an installer
#
BINARY_DIR=/c/msys/home/bernhard/public_html/software/binaries/nightlies/pre-release
PRE_BINARY_DIR=/c/msys/home/bernhard/public_html/software/binaries/nightlies/pre-release
# test if there is enough disk space first
(
fsutil.exe volume diskfree c: > ${HOME}/diskspace.tmp
free_line=`grep 'avail' ${HOME}/diskspace.tmp`
free_space=${free_line:30}
set -- ${free_space}
if [ $1 -gt 500000000 ] ; then
   echo enough disk space $free_space, continue
else
   echo delete windows files with cleanmgr
   # note: not compressing old files!!
   cleanmgr /sagerun:69
   echo not enough disk space left, run clean up script first
   sh ${HOME}/remove_binaries.sh $PRE_BINARY_DIR
fi
rm ${HOME}/diskspace.tmp
) 2>&1 > $HOME/disk-space-status
OS=`uname`
HOST=`hostname`
cp disk-space-status /z/build-logs/${OS}-${HOST}/disk-space-status

# location of the build-it script
build_it=${HOME}/Projects/coot/build-it-win

# location of makensis.exe
makensis="/c/Program Files/NSIS/makensis.exe"

# location of installerscript
wincoot_installer_script=${HOME}/Projects/coot/windows/WinCoot_install_masta.nsi

# coot_version file for python and guile+python build
LOCAL_HTML_LOGS=$HOME/public_html/build-logs/${OS}-${HOST}
PUBLIC_HTML_LOGS=/z/build-logs/${OS}-${HOST}
PUBLIC_STABLE_DEST_DIR=${PUBLIC_STABLE_DEST_DIR:=/z/software/binaries/stable}
PUBLIC_NIGHTLY_DEST_DIR=${PUBLIC_NIGHTLY_DEST_DIR:=/z/software/binaries/nightlies/pre-release}

# before we start building, lets update the test data files
cp -ur /h/data/greg-data/* ~/data/greg-data

# before we really start building, lets do and svn update to get the
# latest build script
cd ~/Projects/coot
cmd /c windows\\update_svn.bat
cd -

# we build both, python and guile+python, coot versions until we have 
# the same coot version for both
# give up after 3 tries
coot_version_status=1
build_cycle=0
minor_build_cycle=0
build_installer=0
(
echo starting in brackets
while [ $coot_version_status != 0 ]
do
  # build a python version
  echo writing progress status to public html $PUBLIC_HTML_LOGS
  echo write to file build-in-progress @`date +"%a_%d_%b_%H:%M"`
  echo build-in-progress @`date +"%a_%d_%b_%H:%M"`> $PUBLIC_HTML_LOGS/gtk2-build-status
  echo waiting for build       > $PUBLIC_HTML_LOGS/gtk2-test-status
  echo BUILDING:: python WinCoot
  # make a clean build of failed 3 times previously (last resort)
  # shall we reset the counter? not yet
  if [ "$minor_build_cycle" = "2" ] ; then
      run_tests=true $build_it clean
  else
      run_tests=true $build_it
  fi
  python_build_status=$?
  echo python build status $python_build_status
  # read in variables from install run
  . ${HOME}/wincoot-installer-variables

  # copy log files from local to public html
  cp $LOCAL_HTML_LOGS/gtk2-build.log $PUBLIC_HTML_LOGS
  cp $LOCAL_HTML_LOGS/gtk2-build.log $PUBLIC_HTML_LOGS/gtk2-python-build.log
  cp -r $LOCAL_HTML_LOGS/$HOSTLOG_STUB  $PUBLIC_HTML_LOGS
  cp $LOCAL_HTML_LOGS/gtk2-test.log  $PUBLIC_HTML_LOGS
  cp $LOCAL_HTML_LOGS/gtk2-test.log  $PUBLIC_HTML_LOGS/gtk2-python-test.log

  if [ "$build_coot_prerelease" = "0" ] ; then
    install_top_dir=${HOME}/autobuild/${OS}-${HOST}-gtk2
  else
    install_top_dir=${HOME}/autobuild/${OS}-${HOST}-pre-release-gtk2
  fi
  COOT_PYTHON_VERSION=$install_top_dir/coot-version
  COOT_GUILE_VERSION=$install_top_dir-guile/coot-version
  diff ${COOT_PYTHON_VERSION} ${COOT_GUILE_VERSION} 
  coot_version_status=$?
  # build a guile version but only if python build ok
  # dont build for now at all
  if [ "$coot_build_status" = "0" ] ; then
    echo 'waiting for guile build      ' > $PUBLIC_HTML_LOGS/gtk2-test-status
    echo BUILDING:: python+guile WinCoot
    if [ "$minor_build_cycle" = "2" ] ; then
        run_tests=true $build_it guile clean
    else
        run_tests=true $build_it guile
    fi

    # copy log files from local to public html
    cp $LOCAL_HTML_LOGS/gtk2-guile-build.log $PUBLIC_HTML_LOGS
    cp -r $LOCAL_HTML_LOGS/${HOSTLOG_STUB}-guile  $PUBLIC_HTML_LOGS
    cp $LOCAL_HTML_LOGS/gtk2-guile-test.log  $PUBLIC_HTML_LOGS

    diff ${COOT_PYTHON_VERSION} ${COOT_GUILE_VERSION} 
    coot_version_status=$?
    if [ "$coot_version_status" = "1" ] ; then
       echo 'python and python+guile build differ => build again'
       build_cycle=$(($build_cycle+1))
       echo tried $build_cycle times so far
       if [ "$build_cycle" = "3" ] ; then
  		echo We tried 3 times to build consistent python and python+guile version
  		echo BUT FAILED!!
		echo exiting build!
		build_installer=1
        	coot_version_status=0
       fi
    fi
  else
    # coot python did not build ok! We try 3 more times
    echo python build failed '=>' try again
    minor_build_cycle=$(($minor_build_cycle+1))
    echo tried $minor_build_cycle times so far
    if [ "$minor_build_cycle" = "3" ] ; then
      echo We tried 3 times to build python coot
      echo BUT FAILED!!
      echo exiting build!
      build_installer=1
      coot_version_status=0
    fi
  fi
done

# flag for makensis, i.e. overwrite binary dir when stable release
makensis_flag=
src_dir=//Dsrc_dir="C:\msys\home\bernhard\autobuild\MINGW32_NT-5.1-sarabellum-pre-release-gtk2"
PUBLIC_BINARY_DIR=$PUBLIC_NIGHTLY_DEST_DIR
if [ "$build_coot_prerelease" = "0" ] ; then
   # stable release
   makensis_flag=//Dbinary_dir="C:\msys\home\bernhard\public_html\software\binaries\stable"
   src_dir=//Dsrc_dir="C:\msys\home\bernhard\autobuild\MINGW32_NT-5.1-sarabellum-gtk2"
   BINARY_DIR=/c/msys/home/bernhard/public_html/software/binaries/stable
   PUBLIC_BINARY_DIR=$PUBLIC_STABLE_DEST_DIR
fi

# wincoot installer exe filename
wincoot_exe=WinCoot-${wincoot_version}.exe
echo wincoot_exe is $wincoot_exe 
wincoot_exe_pub=${PUBLIC_BINARY_DIR}/${wincoot_exe}

# test if we already have this version, otherwise we dont need to make 
# an installer again
if test -e ${wincoot_exe_pub} ; then
   build_installer=999
fi

# now see if the tests passed
if [ "$coot_test_status" = "1" ] ; then 
   # we have failed python test, dont build installer
   cp $LOCAL_HTML_LOGS/gtk2-test-status $PUBLIC_HTML_LOGS/gtk2-test-status
   build_installer=1
   echo python test failed, so not building installer
else
   # passed python test, but passed guile&python test?
   cp $LOCAL_HTML_LOGS/gtk2-test-status $PUBLIC_HTML_LOGS/gtk2-test-status
   diff ${PUBLIC_HTML_LOGS}/gtk2-test-status ${PUBLIC_HTML_LOGS}/gtk2-guile-test-status 
   test_diff=$?
   if [ "$test_diff" = "1" ] ; then
      # test results differ, i.e. guile&python build test failed
      # dont build installer
      echo fail-test       > $PUBLIC_HTML_LOGS/gtk2-test-status
      echo 'python test on python&guile build failed, so not building installer'
      build_installer=1
   fi
fi

# run the installer
if [ "$build_installer" = "0" ] ; then
   # download the latest documentation first
   wget -N -P ${HOME}/autobuild/extras http://www.ysbl.york.ac.uk/~emsley/coot/coot-manual.pdf 
   wget -N -P ${HOME}/autobuild/extras http://www.ysbl.york.ac.uk/~emsley/coot/coot-keys-and-buttons.pdf
   wget -N -P ${HOME}/autobuild/extras http://www.ysbl.york.ac.uk/~emsley/coot/tutorial-2.pdf
   # and download the bat run files
   wget -N -P ${HOME}/autobuild/extras http://www.ysbl.york.ac.uk/~lohkamp/software/extras/runwincoot.bat
   wget -N -P ${HOME}/autobuild/extras http://www.ysbl.york.ac.uk/~lohkamp/software/extras/runwincoot_ccp4.bat
   wget -N -P ${HOME}/autobuild/extras http://www.ysbl.york.ac.uk/~lohkamp/software/extras/runwincoot_ccp4_vista.bat
   # now make the installer
   echo installer-progress > $PUBLIC_HTML_LOGS/gtk2-build-status
   echo
   echo making WinCoot installer
   echo in dir `pwd` with command:
   echo $makensis ${makensis_flag} ${src_dir} $wincoot_installer_script
   echo
   "$makensis" ${makensis_flag} ${src_dir} $wincoot_installer_script
   nsis_status=$?
   if [ "$nsis_status" = "0" ] ; then
	# move files in correct places
	# or do it before?!?
	echo Installer script run successful!!
 	echo make md5sum from ${BINARY_DIR}/${wincoot_exe} to ${BINARY_DIR}/${wincoot_exe}.md5sum
	md5sum ${BINARY_DIR}/${wincoot_exe} > ${BINARY_DIR}/${wincoot_exe}.md5sum
	/bin/ls -l ${BINARY_DIR}/${wincoot_exe}>> ${BINARY_DIR}/${wincoot_exe}.md5sum
        # now update the binary_type_latest stuff 
        echo write wincoot_version WinCoot-${wincoot_version} to file ${BINARY_DIR}/${binary_type_latest}
        echo WinCoot-$wincoot_version > ${BINARY_DIR}/$binary_type_latest
        # finally copy files and update the build-status
	echo copy files from ${BINARY_DIR} to ${PUBLIC_BINARY_DIR}
        cp ${BINARY_DIR}/${wincoot_exe} ${PUBLIC_BINARY_DIR}
        cp ${BINARY_DIR}/${wincoot_exe}.md5sum ${PUBLIC_BINARY_DIR}
        cp ${BINARY_DIR}/${binary_type_latest} ${PUBLIC_BINARY_DIR}
        cp $LOCAL_HTML_LOGS/gtk2-build-status $PUBLIC_HTML_LOGS/gtk2-build-status

   else
	echo Installer script failed! No windows installer made!
        echo fail-installer > $PUBLIC_HTML_LOGS/gtk2-build-status
   fi
else
   if [ "$build_installer" = "999" ] ; then
	echo WinCoot installer is up to date. Dont make a new one.
   else
   	echo Not making installer since inconsistent versions/or build errors
        echo or failed tests
        #if [ "$coot_build_status" = "0" ] ; then
        #    echo pass-build > $PUBLIC_HTML_LOGS/gtk2-build-status
        #else
        #    echo fail-build > $PUBLIC_HTML_LOGS/gtk2-build-status
        #fi
	# maybe just copy status?
	cp $LOCAL_HTML_LOGS/gtk2-build-status $PUBLIC_HTML_LOGS/gtk2-build-status
   fi
fi

# finally chmod of public dirs (not all necessary I think)
# not really working on msys right now
#chmod 755 /z/build-logs/MINGW32_NT-5.1-sarabellum
#chmod 744 /z/build-logs/MINGW32_NT-5.1-sarabellum/*
#chmod 744 /z/software/binaries/nightlies/pre-release/*
#chmod 744 /z/software/binaries/stable/*
#chmod 755 /z/build-logs/MINGW32_NT-5.1-sarabellum/*
#chmod 744 /z/build-logs/MINGW32_NT-5.1-sarabellum/*/*
) 2>&1 > $HOME/20-wincoot-autobuild-all.txt
cp ${HOME}/20-wincoot-autobuild-all.txt ${PUBLIC_HTML_LOGS}

