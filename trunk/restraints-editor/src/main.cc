/*
 * Initial main.c file generated by Glade. Edit as required.
 * Glade will not overwrite this file.
 */

#include <vector>
#include <string>
#include <iostream>

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <gtk/gtk.h>

#include "interface.h"
#include "support.h"

#define PACKAGE restraints-editor

void fill_info_tree_data(GtkWidget *restraints_editor_dialog);
void fill_atom_tree_data(GtkWidget *restraints_editor_dialog);
void fill_bond_tree_data(GtkWidget *restraints_editor_dialog);
void fill_angle_tree_data(GtkWidget *restraints_editor_dialog);
void fill_torsion_tree_data(GtkWidget *restraints_editor_dialog);
void fill_chiral_tree_data(GtkWidget *restraints_editor_dialog);
void fill_plane_tree_data(GtkWidget *restraints_editor_dialog);

int
main (int argc, char *argv[])
{
  GtkWidget *restraints_editor_dialog;


  gtk_set_locale ();
  gtk_init (&argc, &argv);

  restraints_editor_dialog = create_restraints_editor_dialog ();
  fill_info_tree_data(restraints_editor_dialog);
  fill_atom_tree_data(restraints_editor_dialog);
  fill_bond_tree_data(restraints_editor_dialog);
  fill_angle_tree_data(restraints_editor_dialog);
  fill_torsion_tree_data(restraints_editor_dialog);
  fill_chiral_tree_data(restraints_editor_dialog);
  fill_plane_tree_data(restraints_editor_dialog);
  
  gtk_widget_show (restraints_editor_dialog);

  gtk_main ();
  return 0;
}



void fill_editor_with_trees(GtkWidget *restraints_editor_dialog) {
   // The trees are already in place from glade.
}

void fill_atom_tree_data(GtkWidget *restraints_editor_dialog) { 

  GtkWidget *atoms_treeview = lookup_widget(restraints_editor_dialog, 
					    "atoms_treeview");


  GtkTreeView *tv_atoms = GTK_TREE_VIEW(atoms_treeview);
  GtkTreeStore *tree_store_atoms =
     gtk_tree_store_new (4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING,
			 G_TYPE_FLOAT);
  GtkTreeIter   toplevel;

  gtk_tree_view_set_model(tv_atoms, GTK_TREE_MODEL(tree_store_atoms));

  // loop
  gtk_tree_store_append(tree_store_atoms, &toplevel, NULL);
  gtk_tree_store_set(tree_store_atoms, &toplevel,
		     0, "ATM1",
		     1, "ELE1",
		     2, "ENG1",
		     3,  0.1,
		     -1);
  gtk_tree_store_append(tree_store_atoms, &toplevel, NULL);
  gtk_tree_store_set(tree_store_atoms, &toplevel,
		     0, "ATM2",
		     1, "ELE2",
		     2, "ENG2",
		     3,  0.2,
		     -1);
  gtk_tree_store_append(tree_store_atoms, &toplevel, NULL);
  gtk_tree_store_set(tree_store_atoms, &toplevel,
		     0, "ATM3",
		     1, "ELE3",
		     2, "ENG3",
		     3,  0.3,
		     -1);

  bool need_renderer = 1;
  if (need_renderer) {

     GtkCellRenderer *cell_renderer = gtk_cell_renderer_text_new();
     GtkTreeViewColumn *column = gtk_tree_view_column_new();
     gtk_tree_view_column_set_title(column, "Atom Name");
     gtk_tree_view_append_column(tv_atoms, column);
     gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
     gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 0);
						 
     cell_renderer = gtk_cell_renderer_text_new();
     column = gtk_tree_view_column_new();
     gtk_tree_view_column_set_title(column, "Element");
     gtk_tree_view_append_column(tv_atoms, column);
     gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
     gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 1);

     cell_renderer = gtk_cell_renderer_text_new();
     column = gtk_tree_view_column_new();
     gtk_tree_view_column_set_title(column, "Energy Type");
     gtk_tree_view_append_column(tv_atoms, column);
     gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
     gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 2);

     cell_renderer = gtk_cell_renderer_text_new();
     column = gtk_tree_view_column_new();
     gtk_tree_view_column_set_title(column, "Partial Charge");
     gtk_tree_view_append_column(tv_atoms, column);
     gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
     gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 3);

     GtkTreeSelection *tree_sel = gtk_tree_view_get_selection(tv_atoms);
     
  } 
}

void fill_angle_tree_data(GtkWidget *restraints_editor_dialog) {
   
  GtkWidget *angles_treeview = lookup_widget(restraints_editor_dialog, 
					     "angles_treeview");

    GtkTreeView *tv_angles = GTK_TREE_VIEW(angles_treeview);
    GtkTreeStore *tree_store_angles =
       gtk_tree_store_new (5, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_FLOAT, G_TYPE_FLOAT);
    GtkTreeIter   toplevel;

    gtk_tree_view_set_model(tv_angles, GTK_TREE_MODEL(tree_store_angles));

    // loop
    gtk_tree_store_append(tree_store_angles, &toplevel, NULL);
    gtk_tree_store_set(tree_store_angles, &toplevel,
		       0, "ATM1",
		       1, "ATM2",
		       2, "ATM3",
		       3, 120.0,
		       4, 12.0,
		       -1);
    gtk_tree_store_append(tree_store_angles, &toplevel, NULL);
    gtk_tree_store_set(tree_store_angles, &toplevel,
		       0, "ATM4",
		       1, "ATM5",
		       2, "ATM6",
		       3, 114.0,
		       4, 20.0,
		       -1);
    gtk_tree_store_append(tree_store_angles, &toplevel, NULL);
    gtk_tree_store_set(tree_store_angles, &toplevel,
		       0, "ATM7",
		       1, "ATM8",
		       2, "ATM9",
		       3, 110.0,
		       4, 12.0,
		       -1);
    gtk_tree_store_append(tree_store_angles, &toplevel, NULL);
    gtk_tree_store_set(tree_store_angles, &toplevel,
		       0, "ATM5",
		       1, "ATM9",
		       2, "ATM3",
		       3, 130.0,
		       4, 12.0,
		       -1);

    
    GtkCellRenderer *cell_renderer = gtk_cell_renderer_text_new();
    GtkTreeViewColumn *column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 1");
    gtk_tree_view_append_column(tv_angles, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 0);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 2");
    gtk_tree_view_append_column(tv_angles, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 1);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 3");
    gtk_tree_view_append_column(tv_angles, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 2);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Angle");
    gtk_tree_view_append_column(tv_angles, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 3);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "ESD");
    gtk_tree_view_append_column(tv_angles, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 4);
    
}

void fill_info_tree_data(GtkWidget *restraints_editor_dialog) {

   GtkWidget *info_treeview = lookup_widget(restraints_editor_dialog, 
					     "info_treeview");

    GtkTreeView *tv_info = GTK_TREE_VIEW(info_treeview);
    GtkTreeStore *tree_store_info =
       gtk_tree_store_new (7, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING,
			   G_TYPE_INT, G_TYPE_INT, G_TYPE_STRING);
    GtkTreeIter   toplevel;

    gtk_tree_view_set_model(tv_info, GTK_TREE_MODEL(tree_store_info));

    // loop
    gtk_tree_store_append(tree_store_info, &toplevel, NULL);
    gtk_tree_store_set(tree_store_info, &toplevel,
		       0, "comp_id",
		       1, "TLC",
		       2, "chemical name",
		       3, "group",
		       4, 15,
		       5, 8,
		       6, ".",
		       -1);
    
    GtkCellRenderer *cell_renderer = gtk_cell_renderer_text_new();
    GtkTreeViewColumn *column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Comp ID");
    gtk_tree_view_append_column(tv_info, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 0);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "3LetCode");
    gtk_tree_view_append_column(tv_info, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 1);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Name                    ");
    gtk_tree_view_append_column(tv_info, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 2);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Group");
    gtk_tree_view_append_column(tv_info, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 3);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Number Non-H Atoms");
    gtk_tree_view_append_column(tv_info, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 4);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Number H Atoms");
    gtk_tree_view_append_column(tv_info, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 5);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Desc Lev");
    gtk_tree_view_append_column(tv_info, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 6);
}

void fill_bond_tree_data(GtkWidget *restraints_editor_dialog) {

   GtkWidget *bonds_treeview = lookup_widget(restraints_editor_dialog, 
					     "bonds_treeview");
    GtkTreeView *tv_bonds = GTK_TREE_VIEW(bonds_treeview);
    GtkTreeStore *tree_store_bonds =
       gtk_tree_store_new (4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_FLOAT, G_TYPE_FLOAT);
    GtkTreeIter   toplevel;

    gtk_tree_view_set_model(tv_bonds, GTK_TREE_MODEL(tree_store_bonds));

    // loop
    gtk_tree_store_append(tree_store_bonds, &toplevel, NULL);
    gtk_tree_store_set(tree_store_bonds, &toplevel,
		       0, "ATM1",
		       1, "ATM2",
		       2, 1.4,
		       3, 12.0,
		       -1);
    gtk_tree_store_append(tree_store_bonds, &toplevel, NULL);
    gtk_tree_store_set(tree_store_bonds, &toplevel,
		       0, "ATM3",
		       1, "ATM4",
		       2, 1.4,
		       3, 12.0,
		       -1);

    
    GtkCellRenderer *cell_renderer = gtk_cell_renderer_text_new();
    GtkTreeViewColumn *column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 1");
    gtk_tree_view_append_column(tv_bonds, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 0);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 2");
    gtk_tree_view_append_column(tv_bonds, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 1);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Bond");
    gtk_tree_view_append_column(tv_bonds, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 2);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "ESD");
    gtk_tree_view_append_column(tv_bonds, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 3);
}

void fill_torsion_tree_data(GtkWidget *restraints_editor_dialog) {

  GtkWidget *torsions_treeview = lookup_widget(restraints_editor_dialog, 
					     "torsions_treeview");

    GtkTreeView *tv_torsions = GTK_TREE_VIEW(torsions_treeview);
    GtkTreeStore *tree_store_torsions =
       gtk_tree_store_new (8, G_TYPE_STRING,
			   G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING,
			   G_TYPE_FLOAT, G_TYPE_FLOAT, G_TYPE_INT);
    GtkTreeIter   toplevel;

    gtk_tree_view_set_model(tv_torsions, GTK_TREE_MODEL(tree_store_torsions));

    // loop
    gtk_tree_store_append(tree_store_torsions, &toplevel, NULL);
    gtk_tree_store_set(tree_store_torsions, &toplevel,
		       0, "chi1",
		       1, "ATM1",
		       2, "ATM2",
		       3, "ATM3",
		       4, "ATM4",
		       5, 120.0,
		       6, 12.0,
		       7, 2,
		       -1);

    
    GtkCellRenderer *cell_renderer = gtk_cell_renderer_text_new();
    GtkTreeViewColumn *column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Torsion ID");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 0);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 1");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 1);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 2");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 2);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 3");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 3);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom Name 4");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 4);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Torsion");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 5);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "ESD");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 6);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Period");
    gtk_tree_view_append_column(tv_torsions, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 7);
}

void fill_chiral_tree_data(GtkWidget *restraints_editor_dialog) {

   GtkWidget *chirals_treeview = lookup_widget(restraints_editor_dialog, 
					     "chirals_treeview");

   GtkTreeView *tv_chirals = GTK_TREE_VIEW(chirals_treeview);
   GtkTreeStore *tree_store_chirals =
      gtk_tree_store_new (6, G_TYPE_STRING,
			  G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING,
			  G_TYPE_STRING);
   GtkTreeIter   toplevel;

   gtk_tree_view_set_model(tv_chirals, GTK_TREE_MODEL(tree_store_chirals));

   // loop
   gtk_tree_store_append(tree_store_chirals, &toplevel, NULL);
   gtk_tree_store_set(tree_store_chirals, &toplevel,
		      0, "chir_01",
		      1, "ATM1",
		      2, "ATM2",
		      3, "ATM3",
		      4, "ATM4",
		      5, "negative",
		      -1);
    
   GtkCellRenderer *cell_renderer = gtk_cell_renderer_text_new();
   GtkTreeViewColumn *column = gtk_tree_view_column_new();
   gtk_tree_view_column_set_title(column, "Chiral ID");
   gtk_tree_view_append_column(tv_chirals, column);
   gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
   gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 0);

   cell_renderer = gtk_cell_renderer_text_new();
   column = gtk_tree_view_column_new();
   gtk_tree_view_column_set_title(column, "Centre");
   gtk_tree_view_append_column(tv_chirals, column);
   gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
   gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 1);

   cell_renderer = gtk_cell_renderer_text_new();
   column = gtk_tree_view_column_new();
   gtk_tree_view_column_set_title(column, "Atom 1");
   gtk_tree_view_append_column(tv_chirals, column);
   gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
   gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 2);
    
   cell_renderer = gtk_cell_renderer_text_new();
   column = gtk_tree_view_column_new();
   gtk_tree_view_column_set_title(column, "Atom 2");
   gtk_tree_view_append_column(tv_chirals, column);
   gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
   gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 3);
    
   cell_renderer = gtk_cell_renderer_text_new();
   column = gtk_tree_view_column_new();
   gtk_tree_view_column_set_title(column, "Atom 3");
   gtk_tree_view_append_column(tv_chirals, column);
   gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
   gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 4);
    
   cell_renderer = gtk_cell_renderer_text_new();
   column = gtk_tree_view_column_new();
   gtk_tree_view_column_set_title(column, "Sign");
   gtk_tree_view_append_column(tv_chirals, column);
   gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
   gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 5);
    
}

void fill_plane_tree_data(GtkWidget *restraints_editor_dialog) {
   GtkWidget *planes_treeview = lookup_widget(restraints_editor_dialog, 
					     "planes_treeview");

    GtkTreeView *tv_planes = GTK_TREE_VIEW(planes_treeview);
    // parse planes to get this
    int max_number_of_atoms_in_plane = 4;

    // depends on max_number_of_atoms_in_plane
    GtkTreeStore *tree_store_planes =
       gtk_tree_store_new (6, G_TYPE_STRING,
			   G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING,
			   G_TYPE_FLOAT);

    GtkTreeIter   toplevel;
    gtk_tree_view_set_model(tv_planes, GTK_TREE_MODEL(tree_store_planes));

    
    for (int iplane=0; iplane<2; iplane++) { 
       gtk_tree_store_append(tree_store_planes, &toplevel, NULL);
       gtk_tree_store_set(tree_store_planes, &toplevel,
			  0, "plane_1",
			  1, "ATM1",
			  2, "ATM2",
			  3, "ATM3",
			  4, "ATM5",
			  5, 0.02,
			  -1);
    }
       
    GtkCellRenderer *cell_renderer = gtk_cell_renderer_text_new();
    GtkTreeViewColumn *column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Plane ID");
    gtk_tree_view_append_column(tv_planes, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 0);

    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom 1");
    gtk_tree_view_append_column(tv_planes, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 1);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom 2");
    gtk_tree_view_append_column(tv_planes, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 2);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom 3");
    gtk_tree_view_append_column(tv_planes, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 3);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "Atom 4");
    gtk_tree_view_append_column(tv_planes, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 4);
    
    cell_renderer = gtk_cell_renderer_text_new();
    column = gtk_tree_view_column_new();
    gtk_tree_view_column_set_title(column, "ESD");
    gtk_tree_view_append_column(tv_planes, column);
    gtk_tree_view_column_pack_start(column, cell_renderer, TRUE);
    gtk_tree_view_column_add_attribute(column, cell_renderer, "text", 5);
}
