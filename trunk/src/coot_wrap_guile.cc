/* -*- buffer-read-only: t -*- vi: set ro: */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/* Implementation : GUILE */

#define SWIG_GUILE_INIT_STATIC extern
extern "C" {

SWIG_GUILE_INIT_STATIC void
SWIG_init (void);

}

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * guile_scm_run.swg
 * ----------------------------------------------------------------------------- */

#include <libguile.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef SCM (*swig_guile_proc)();
typedef SCM (*guile_destructor)(SCM);

typedef struct swig_guile_clientdata {
  guile_destructor destroy;
  SCM goops_class;
} swig_guile_clientdata;

#define SWIG_scm2str(s) \
  SWIG_Guile_scm2newstr(s, NULL)
#define SWIG_malloc(size) \
  SCM_MUST_MALLOC(size)
#define SWIG_free(mem) \
  scm_must_free(mem)
#define SWIG_ConvertPtr(s, result, type, flags) \
  SWIG_Guile_ConvertPtr(s, result, type, flags)
#define SWIG_MustGetPtr(s, type, argnum, flags) \
  SWIG_Guile_MustGetPtr(s, type, argnum, flags, FUNC_NAME)
#define SWIG_NewPointerObj(ptr, type, owner) \
  SWIG_Guile_NewPointerObj((void*)ptr, type, owner)
#define SWIG_PointerAddress(object) \
  SWIG_Guile_PointerAddress(object)
#define SWIG_PointerType(object) \
  SWIG_Guile_PointerType(object)
#define SWIG_IsPointerOfType(object, type) \
  SWIG_Guile_IsPointerOfType(object, type)
#define SWIG_IsPointer(object) \
  SWIG_Guile_IsPointer(object)
#define SWIG_contract_assert(expr, msg)				\
  if (!(expr))							\
    scm_error(scm_str2symbol("swig-contract-assertion-failed"),	\
	      (char *) FUNC_NAME, (char *) msg,			\
	      SCM_EOL, SCM_BOOL_F); else

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty) \
  SWIG_Guile_ConvertMember(obj, ptr, sz, ty, FUNC_NAME)
#define SWIG_NewMemberObj(ptr, sz, type) \
  SWIG_Guile_NewMemberObj(ptr, sz, type, FUNC_NAME)
  
/* Runtime API */
static swig_module_info *SWIG_Guile_GetModule(void);
#define SWIG_GetModule(clientdata) SWIG_Guile_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Guile_SetModule(pointer)
  
SWIGINTERN char *
SWIG_Guile_scm2newstr(SCM str, size_t *len) {
#define FUNC_NAME "SWIG_Guile_scm2newstr"
  char *ret;
  size_t l;

  SCM_ASSERT (SCM_STRINGP(str), str, 1, FUNC_NAME);
  
  l = SCM_STRING_LENGTH(str);
  ret = (char *) SWIG_malloc( (l + 1) * sizeof(char));
  if (!ret) return NULL;

  memcpy(ret, scm_to_locale_string(str), l);
  ret[l] = '\0';
  if (len) *len = l;
  return ret;
#undef FUNC_NAME
}

static int swig_initialized = 0;
static scm_t_bits swig_tag = 0;
static scm_t_bits swig_collectable_tag = 0;
static scm_t_bits swig_destroyed_tag = 0;
static scm_t_bits swig_member_function_tag = 0;
static SCM swig_make_func = SCM_EOL;
static SCM swig_keyword = SCM_EOL;
static SCM swig_symbol = SCM_EOL;

#define SWIG_Guile_GetSmob(x) \
  ( SCM_NNULLP(x) && SCM_INSTANCEP(x) && SCM_NFALSEP(scm_slot_exists_p(x, swig_symbol)) \
      ? scm_slot_ref(x, swig_symbol) : (x) )

SWIGINTERN SCM
SWIG_Guile_NewPointerObj(void *ptr, swig_type_info *type, int owner)
{
  if (ptr == NULL)
    return SCM_EOL;
  else {
    SCM smob;
    swig_guile_clientdata *cdata = (swig_guile_clientdata *) type->clientdata;
    if (owner)
      SCM_NEWSMOB2(smob, swig_collectable_tag, ptr, (void *) type);
    else
      SCM_NEWSMOB2(smob, swig_tag, ptr, (void *) type);

    if (!cdata || SCM_NULLP(cdata->goops_class) || swig_make_func == SCM_EOL ) {
      return smob;
    } else {
      /* the scm_make() C function only handles the creation of gf,
	 methods and classes (no instances) the (make ...) function is
	 later redefined in goops.scm.  So we need to call that
	 Scheme function. */
      return scm_apply(swig_make_func,
		       scm_list_3(cdata->goops_class,
				  swig_keyword,
				  smob),
		       SCM_EOL);
    }
  }
}

SWIGINTERN unsigned long
SWIG_Guile_PointerAddress(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (SCM_NULLP(smob)) return 0;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (unsigned long) (void *) SCM_CELL_WORD_1(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerAddress", 1, object);
}

SWIGINTERN swig_type_info *
SWIG_Guile_PointerType(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (SCM_NULLP(smob)) return NULL;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (swig_type_info *) SCM_CELL_WORD_2(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerType", 1, object);
}
  
SWIGINTERN int
SWIG_Guile_ConvertPtr(SCM s, void **result, swig_type_info *type, int flags)
{
  swig_cast_info *cast;
  swig_type_info *from;
  SCM smob = SWIG_Guile_GetSmob(s);

  if (SCM_NULLP(smob)) {
    *result = NULL;
    return SWIG_OK;
  } else if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
    /* we do not accept smobs representing destroyed pointers */
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;
    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (cast) {
        *result = SWIG_TypeCast(cast, (void *) SCM_CELL_WORD_1(smob));
        return SWIG_OK;
      } else {
        return SWIG_ERROR;
      }
    } else {
      *result = (void *) SCM_CELL_WORD_1(smob);
      return SWIG_OK;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERNINLINE void *
SWIG_Guile_MustGetPtr (SCM s, swig_type_info *type,
		       int argnum, int flags, const char *func_name)
{
  void *result;
  int res = SWIG_Guile_ConvertPtr(s, &result, type, flags);
  if (!SWIG_IsOK(res)) {
    /* type mismatch */
    scm_wrong_type_arg((char *) func_name, argnum, s);
  }
  return result;
}

SWIGINTERNINLINE int
SWIG_Guile_IsPointerOfType (SCM s, swig_type_info *type)
{
  void *result;
  if (SWIG_Guile_ConvertPtr(s, &result, type, 0)) {
    /* type mismatch */
    return 0;
  }
  else return 1;
}

SWIGINTERNINLINE int
SWIG_Guile_IsPointer (SCM s)
{
  /* module might not be initialized yet, so initialize it */
  SWIG_Guile_GetModule();
  return SWIG_Guile_IsPointerOfType (s, NULL);
}

/* Mark a pointer object non-collectable */
SWIGINTERN void
SWIG_Guile_MarkPointerNoncollectable(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Mark a pointer object destroyed */
SWIGINTERN void
SWIG_Guile_MarkPointerDestroyed(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_destroyed_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Member functions */

SWIGINTERN SCM
SWIG_Guile_NewMemberObj(void *ptr, size_t sz, swig_type_info *type,
			const char *func_name)
{
  SCM smob;
  void *copy = malloc(sz);
  memcpy(copy, ptr, sz);
  SCM_NEWSMOB2(smob, swig_member_function_tag, copy, (void *) type);
  return smob;
}

SWIGINTERN int
SWIG_Guile_ConvertMember(SCM smob, void *ptr, size_t sz, swig_type_info *type,
			 const char *func_name)
{
  swig_cast_info *cast;
  swig_type_info *from;

  if (SCM_SMOB_PREDICATE(swig_member_function_tag, smob)) {
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;
    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (!cast) return SWIG_ERROR;
    }
    memcpy(ptr, (void *) SCM_CELL_WORD_1(smob), sz);
    return SWIG_OK;
  }
  return SWIG_ERROR;
}
     

/* Init */

SWIGINTERN int
print_swig_aux (SCM swig_smob, SCM port, scm_print_state *pstate, 
                const char *attribute)
{
  swig_type_info *type;
  
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts((char *) "#<", port);
    scm_puts((char *) attribute, port);
    scm_puts((char *) "swig-pointer ", port);
    scm_puts((char *) SWIG_TypePrettyName(type), port);
    scm_puts((char *) " ", port);
    scm_intprint((long) SCM_CELL_WORD_1(swig_smob), 16, port);
    scm_puts((char *) ">", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

  
SWIGINTERN int
print_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "");
}

SWIGINTERN int
print_collectable_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "collectable-");
}

SWIGINTERN int
print_destroyed_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "destroyed-");
}

SWIGINTERN int
print_member_function_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  swig_type_info *type;
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts((char *) "#<", port);
    scm_puts((char *) "swig-member-function-pointer ", port);
    scm_puts((char *) SWIG_TypePrettyName(type), port);
    scm_puts((char *) " >", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

SWIGINTERN SCM
equalp_swig (SCM A, SCM B)
{
  if (SCM_CELL_WORD_0(A) == SCM_CELL_WORD_0(B) && SCM_CELL_WORD_1(A) == SCM_CELL_WORD_1(B) 
      && SCM_CELL_WORD_2(A) == SCM_CELL_WORD_2(B))
    return SCM_BOOL_T;
  else return SCM_BOOL_F;
}

SWIGINTERN size_t
free_swig(SCM A)
{
  swig_type_info *type = (swig_type_info *) SCM_CELL_WORD_2(A);
  if (type) {
    if (type->clientdata && ((swig_guile_clientdata *)type->clientdata)->destroy)
      ((swig_guile_clientdata *)type->clientdata)->destroy(A);
  } 
  return 0;
}

SWIGINTERN size_t
free_swig_member_function(SCM A)
{
  free((swig_type_info *) SCM_CELL_WORD_1(A));
  return 0;
}

SWIGINTERN int
ensure_smob_tag(SCM swig_module,
		scm_t_bits *tag_variable,
		const char *smob_name,
		const char *scheme_variable_name)
{
  SCM variable = scm_sym2var(scm_str2symbol(scheme_variable_name),
			     scm_module_lookup_closure(swig_module),
			     SCM_BOOL_T);
  if (SCM_UNBNDP(SCM_VARIABLE_REF(variable))) {
    *tag_variable = scm_make_smob_type((char*)scheme_variable_name, 0);
    SCM_VARIABLE_SET(variable,
		     scm_ulong2num(*tag_variable));
    return 1;
  }
  else {
    *tag_variable = scm_num2ulong(SCM_VARIABLE_REF(variable), 0,
				  "SWIG_Guile_Init");
    return 0;
  }
}

SWIGINTERN SCM
SWIG_Guile_Init ()
{
  static SCM swig_module;
  
  if (swig_initialized) return swig_module;
  swig_initialized = 1;

  swig_module = scm_c_resolve_module("Swig swigrun");
  if (ensure_smob_tag(swig_module, &swig_tag,
		      "swig-pointer", "swig-pointer-tag")) {
    scm_set_smob_print(swig_tag, print_swig);
    scm_set_smob_equalp(swig_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_collectable_tag,
		      "collectable-swig-pointer", "collectable-swig-pointer-tag")) {
    scm_set_smob_print(swig_collectable_tag, print_collectable_swig);
    scm_set_smob_equalp(swig_collectable_tag, equalp_swig);
    scm_set_smob_free(swig_collectable_tag, free_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_destroyed_tag,
		      "destroyed-swig-pointer", "destroyed-swig-pointer-tag")) {
    scm_set_smob_print(swig_destroyed_tag, print_destroyed_swig);
    scm_set_smob_equalp(swig_destroyed_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_member_function_tag,
		      "swig-member-function-pointer", "swig-member-function-pointer-tag")) {
    scm_set_smob_print(swig_member_function_tag, print_member_function_swig);
    scm_set_smob_free(swig_member_function_tag, free_swig_member_function);
  }
  swig_make_func = scm_permanent_object(
  scm_variable_ref(scm_c_module_lookup(scm_c_resolve_module("oop goops"), "make")));
  swig_keyword = scm_permanent_object(scm_c_make_keyword((char*) "init-smob"));
  swig_symbol = scm_permanent_object(scm_str2symbol("swig-smob"));
#ifdef SWIG_INIT_RUNTIME_MODULE
  SWIG_INIT_RUNTIME_MODULE
#endif

  return swig_module;
}

SWIGINTERN swig_module_info *
SWIG_Guile_GetModule(void)
{
  SCM module;
  SCM variable;

  module = SWIG_Guile_Init();

  variable = scm_sym2var(scm_str2symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME),
			       scm_module_lookup_closure(module),
			       SCM_BOOL_T);
  if (SCM_UNBNDP(SCM_VARIABLE_REF(variable))) {
    return NULL;
  } else {
    return (swig_module_info *) scm_num2ulong(SCM_VARIABLE_REF(variable), 0, "SWIG_Guile_Init");
  }
}

SWIGINTERN void
SWIG_Guile_SetModule(swig_module_info *swig_module)
{
  SCM module;
  SCM variable;

  module = SWIG_Guile_Init();
    
  variable = scm_sym2var(scm_str2symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME),
			       scm_module_lookup_closure(module),
			       SCM_BOOL_T);

  SCM_VARIABLE_SET(variable, scm_ulong2num((unsigned long) swig_module));
}

SWIGINTERN int
SWIG_Guile_GetArgs (SCM *dest, SCM rest,
		    int reqargs, int optargs,
		    const char *procname)
{
  int i;
  int num_args_passed = 0;
  for (i = 0; i<reqargs; i++) {
    if (!SCM_CONSP(rest))
      scm_wrong_num_args(scm_makfrom0str((char *) procname));
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (i = 0; i<optargs && SCM_CONSP(rest); i++) {
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (; i<optargs; i++)
    *dest++ = SCM_UNDEFINED;
  if (!SCM_NULLP(rest))
    scm_wrong_num_args(scm_makfrom0str((char *) procname));
  return num_args_passed;
}

#ifdef __cplusplus
}
#endif



#define GUILE_MAYBE_VALUES \
      if (gswig_list_p) gswig_result = scm_values(gswig_result);

#define GUILE_MAYBE_VECTOR \
      if (gswig_list_p) gswig_result = scm_vector(gswig_result);

#define SWIG_APPEND_VALUE(object)						\
    if (gswig_result == SCM_UNSPECIFIED)						\
        gswig_result = object;							\
    else {									\
      if (!gswig_list_p) {							\
	      gswig_list_p = 1;							\
	      gswig_result = scm_listify(gswig_result, object, SCM_UNDEFINED);	\
      }									\
      else									\
            gswig_result = scm_append(scm_listify(gswig_result, scm_listify(object, SCM_UNDEFINED), SCM_UNDEFINED));		\
    }
    /* used by Lib/exception.i */
    #define gh_symbol2scm scm_str2symbol
    /* useb by Lib/cdata.i */
    #define gh_str2scm scm_mem2string


static swig_guile_clientdata _swig_guile_clientdataalias_path_t = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatastr_mtime = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatafile_attribs_info_t = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatacommand_arg_t = { NULL, SCM_EOL };

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GdkEventKey swig_types[0]
#define SWIGTYPE_p_GtkAdjustment swig_types[1]
#define SWIGTYPE_p_GtkButton swig_types[2]
#define SWIGTYPE_p_GtkEntry swig_types[3]
#define SWIGTYPE_p_GtkList swig_types[4]
#define SWIGTYPE_p_GtkMenuItem swig_types[5]
#define SWIGTYPE_p_GtkPositionType swig_types[6]
#define SWIGTYPE_p_GtkSignalFunc swig_types[7]
#define SWIGTYPE_p_GtkToggleButton swig_types[8]
#define SWIGTYPE_p_GtkWidget swig_types[9]
#define SWIGTYPE_p_clipper__RTop_orth swig_types[10]
#define SWIGTYPE_p_clipper__String swig_types[11]
#define SWIGTYPE_p_coot__alias_path_t swig_types[12]
#define SWIGTYPE_p_coot__atom_spec_t swig_types[13]
#define SWIGTYPE_p_coot__command_arg_t swig_types[14]
#define SWIGTYPE_p_coot__file_attribs_info_t swig_types[15]
#define SWIGTYPE_p_coot__graph_match_info_t swig_types[16]
#define SWIGTYPE_p_coot__residue_spec_t swig_types[17]
#define SWIGTYPE_p_coot__str_mtime swig_types[18]
#define SWIGTYPE_p_double swig_types[19]
#define SWIGTYPE_p_gboolean swig_types[20]
#define SWIGTYPE_p_gchar swig_types[21]
#define SWIGTYPE_p_gdouble swig_types[22]
#define SWIGTYPE_p_gpointer swig_types[23]
#define SWIGTYPE_p_p_GSList swig_types[24]
#define SWIGTYPE_p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t swig_types[25]
#define SWIGTYPE_p_std__pairTint_std__vectorTstd__string_t_t swig_types[26]
#define SWIGTYPE_p_std__pairTshort_float_t swig_types[27]
#define SWIGTYPE_p_std__pairTshort_int_t swig_types[28]
#define SWIGTYPE_p_std__pairTshort_std__string_t swig_types[29]
#define SWIGTYPE_p_std__pairTstd__string_std__string_t swig_types[30]
#define SWIGTYPE_p_std__string swig_types[31]
#define SWIGTYPE_p_std__vectorTcoot__command_arg_t_t swig_types[32]
#define SWIGTYPE_p_std__vectorTcoot__str_mtime_t swig_types[33]
#define SWIGTYPE_p_std__vectorTint_t swig_types[34]
#define SWIGTYPE_p_std__vectorTstd__pairTstd__string_std__string_t_t swig_types[35]
#define SWIGTYPE_p_std__vectorTstd__string_t swig_types[36]
#define SWIGTYPE_p_time_t swig_types[37]
#define SWIGTYPE_p_unsigned_long swig_types[38]
static swig_type_info *swig_types[40];
static swig_module_info swig_module = {swig_types, 39, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



/* #ifdef USE_PYTHON */
/* #define SWIG_init SWIG_python_init */
/* #endif */

/* #ifdef USE_GUILE */
/* #define SWIG_init SWIG_guile_init */
/* #endif */

#include "globjects.h"  //includes gtk/gtk.h
#include "coot-coord-utils.hh"
#include "c-interface.h"
#include "cc-interface.hh"
#include "c-interface-database.hh"

static char *gswig_const_COOT_SCHEME_DIR = "COOT_SCHEME_DIR";
static int gswig_const_VT_FLAT = 1;
static int gswig_const_VT_SPHERICAL = 2;
static int gswig_const_command_arg_t_INT = coot::command_arg_t::INT;
static int gswig_const_command_arg_t_FLOAT = coot::command_arg_t::FLOAT;
static int gswig_const_command_arg_t_STRING = coot::command_arg_t::STRING;
static SCM
_wrap_COOT_SCHEME_DIR(SCM s_0)
{
#define FUNC_NAME "COOT-SCHEME-DIR"
  SCM gswig_result;
  
  {
    gswig_result = scm_makfrom0str(gswig_const_COOT_SCHEME_DIR);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_try_load_scheme_extras_dir ()
{
#define FUNC_NAME "try-load-scheme-extras-dir"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  try_load_scheme_extras_dir();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_directory_maybe (SCM s_0)
{
#define FUNC_NAME "make-directory-maybe"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)make_directory_maybe((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_paths_in_display_manager (SCM s_0)
{
#define FUNC_NAME "set-show-paths-in-display-manager"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_paths_in_display_manager(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_paths_in_display_manager_state ()
{
#define FUNC_NAME "show-paths-in-display-manager-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)show_paths_in_display_manager_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_gslist_for_scroll_in_display_manager_p ()
{
#define FUNC_NAME "gslist-for-scroll-in-display-manager-p"
  GSList **result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GSList **)gslist_for_scroll_in_display_manager_p();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_p_GSList, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_coordinates_glob_extension (SCM s_0)
{
#define FUNC_NAME "add-coordinates-glob-extension"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  add_coordinates_glob_extension((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_data_glob_extension (SCM s_0)
{
#define FUNC_NAME "add-data-glob-extension"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  add_data_glob_extension((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_dictionary_glob_extension (SCM s_0)
{
#define FUNC_NAME "add-dictionary-glob-extension"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  add_dictionary_glob_extension((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_map_glob_extension (SCM s_0)
{
#define FUNC_NAME "add-map-glob-extension"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  add_map_glob_extension((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_sticky_sort_by_date ()
{
#define FUNC_NAME "set-sticky-sort-by-date"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_sticky_sort_by_date();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_filter_fileselection_filenames (SCM s_0)
{
#define FUNC_NAME "set-filter-fileselection-filenames"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_filter_fileselection_filenames(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_file_selection_dialog_size (SCM s_0)
{
#define FUNC_NAME "set-file-selection-dialog-size"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_file_selection_dialog_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_filter_fileselection_filenames_state ()
{
#define FUNC_NAME "filter-fileselection-filenames-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)filter_fileselection_filenames_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_filename_filter_toggle_button_toggled (SCM s_0, SCM s_1)
{
#define FUNC_NAME "on-filename-filter-toggle-button-toggled"
  GtkButton *arg1 = (GtkButton *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkButton, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  on_filename_filter_toggle_button_toggled(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_filename_filter (SCM s_0)
{
#define FUNC_NAME "add-filename-filter"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  add_filename_filter(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_filename_filter_button (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-filename-filter-button"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  short arg2 ;
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (GtkWidget *)add_filename_filter_button(arg1,arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_filechooser_filter_button (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-filechooser-filter-button"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  short arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  add_filechooser_filter_button(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_filechooser_extra_filter_button (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "add-filechooser-extra-filter-button"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  gchar *arg2 = (gchar *) 0 ;
  gchar *arg3 = (gchar *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (gchar *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gchar, 2, 0);
  }
  {
    arg3 = (gchar *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_gchar, 3, 0);
  }
  add_filechooser_extra_filter_button(arg1,(gchar const *)arg2,(gchar const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_filename_filter_key_press_event (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "on-filename-filter-key-press-event"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GdkEventKey *arg2 = (GdkEventKey *) 0 ;
  gpointer arg3 ;
  gboolean result;
  gpointer *argp3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (GdkEventKey *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GdkEventKey, 2, 0);
  }
  {
    argp3 = (gpointer *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_gpointer, 3, 0);
    arg3 = *argp3;
  }
  result = on_filename_filter_key_press_event(arg1,arg2,arg3);
  {
    gboolean * resultptr;
    resultptr = new gboolean((gboolean &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_gboolean, 1);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_option_menu_with_coordinates_options (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "fill-option-menu-with-coordinates-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkSignalFunc arg2 ;
  int arg3 ;
  GtkSignalFunc *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkSignalFunc *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkSignalFunc, 2, 0);
    arg2 = *argp2;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  fill_option_menu_with_coordinates_options(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_file_chooser ()
{
#define FUNC_NAME "coot-file-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_file_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_dataset_chooser ()
{
#define FUNC_NAME "coot-dataset-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_dataset_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_map_name_chooser ()
{
#define FUNC_NAME "coot-map-name-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_map_name_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_save_coords_chooser ()
{
#define FUNC_NAME "coot-save-coords-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_save_coords_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_cif_dictionary_chooser ()
{
#define FUNC_NAME "coot-cif-dictionary-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_cif_dictionary_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_run_script_chooser ()
{
#define FUNC_NAME "coot-run-script-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_run_script_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_save_state_chooser ()
{
#define FUNC_NAME "coot-save-state-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_save_state_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_save_symmetry_chooser ()
{
#define FUNC_NAME "coot-save-symmetry-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_save_symmetry_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_screendump_chooser ()
{
#define FUNC_NAME "coot-screendump-chooser"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)coot_screendump_chooser();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_directory_for_coot_file_chooser (SCM s_0)
{
#define FUNC_NAME "set-directory-for-coot-file-chooser"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_directory_for_coot_file_chooser(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_file_chooser_file_name (SCM s_0)
{
#define FUNC_NAME "coot-file-chooser-file-name"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (char *)coot_file_chooser_file_name(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_filename_for_filechooserselection (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-filename-for-filechooserselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  gchar *arg2 = (gchar *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (gchar *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gchar, 2, 0);
  }
  set_filename_for_filechooserselection(arg1,(gchar const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_file_chooser_selector (SCM s_0)
{
#define FUNC_NAME "set-file-chooser-selector"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_file_chooser_selector(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_file_chooser_selector_state ()
{
#define FUNC_NAME "file-chooser-selector-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)file_chooser_selector_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_file_chooser_overwrite (SCM s_0)
{
#define FUNC_NAME "set-file-chooser-overwrite"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_file_chooser_overwrite(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_file_chooser_overwrite_state ()
{
#define FUNC_NAME "file-chooser-overwrite-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)file_chooser_overwrite_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_positive_float_from_entry (SCM s_0)
{
#define FUNC_NAME "get-positive-float-from-entry"
  GtkEntry *arg1 = (GtkEntry *) 0 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkEntry *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkEntry, 1, 0);
  }
  result = (float)get_positive_float_from_entry(arg1);
  {
    gswig_result = scm_make_real(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_filename_filter_gtk2 (SCM s_0)
{
#define FUNC_NAME "handle-filename-filter-gtk2"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  handle_filename_filter_gtk2(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_transient_and_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-transient-and-position"
  int arg1 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  set_transient_and_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_info_dialog (SCM s_0)
{
#define FUNC_NAME "info-dialog"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  info_dialog((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_main_menubar ()
{
#define FUNC_NAME "main-menubar"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)main_menubar();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_main_statusbar ()
{
#define FUNC_NAME "main-statusbar"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)main_statusbar();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_manage_column_selector (SCM s_0)
{
#define FUNC_NAME "manage-column-selector"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  manage_column_selector((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_f_optionmenu_with_expert_options (SCM s_0)
{
#define FUNC_NAME "fill-f-optionmenu-with-expert-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_f_optionmenu_with_expert_options(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_column_label_make_fourier (SCM s_0)
{
#define FUNC_NAME "handle-column-label-make-fourier"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  handle_column_label_make_fourier(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chain_n_residues (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chain-n-residues"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)chain_n_residues((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_molecule_centre_internal (SCM s_0, SCM s_1)
{
#define FUNC_NAME "molecule-centre-internal"
  int arg1 ;
  int arg2 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (float)molecule_centre_internal(arg1,arg2);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_resname_from_serial_number (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "resname-from-serial-number"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)resname_from_serial_number(arg1,(char const *)arg2,arg3);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_seqnum_from_serial_number (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "seqnum-from-serial-number"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  result = (int)seqnum_from_serial_number(arg1,(char const *)arg2,arg3);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_insertion_code_from_serial_number (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "insertion-code-from-serial-number"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)insertion_code_from_serial_number(arg1,(char const *)arg2,arg3);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chain_id (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chain-id"
  int arg1 ;
  int arg2 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)chain_id(arg1,arg2);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_n_chains (SCM s_0)
{
#define FUNC_NAME "n-chains"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)n_chains(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_is_solvent_chain_p (SCM s_0, SCM s_1)
{
#define FUNC_NAME "is-solvent-chain-p"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)is_solvent_chain_p(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_copy_molecule (SCM s_0)
{
#define FUNC_NAME "copy-molecule"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)copy_molecule(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_exchange_chain_ids_for_seg_ids (SCM s_0)
{
#define FUNC_NAME "exchange-chain-ids-for-seg-ids"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)exchange_chain_ids_for_seg_ids(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_version ()
{
#define FUNC_NAME "coot-version"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)coot_version();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_molecule_name (SCM s_0)
{
#define FUNC_NAME "molecule-name"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)molecule_name(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_molecule_name (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-molecule-name"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  set_molecule_name(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_main_window ()
{
#define FUNC_NAME "main-window"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)main_window();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_checked_exit (SCM s_0)
{
#define FUNC_NAME "coot-checked-exit"
  int arg1 ;
  gboolean result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = coot_checked_exit(arg1);
  {
    gboolean * resultptr;
    resultptr = new gboolean((gboolean &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_gboolean, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_real_exit (SCM s_0)
{
#define FUNC_NAME "coot-real-exit"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  coot_real_exit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_clear_backup_or_real_exit (SCM s_0)
{
#define FUNC_NAME "coot-clear-backup-or-real-exit"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  coot_clear_backup_or_real_exit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_clear_backups (SCM s_0)
{
#define FUNC_NAME "run-clear-backups"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  run_clear_backups(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_about_window (SCM s_0)
{
#define FUNC_NAME "fill-about-window"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_about_window(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_first_coords_imol ()
{
#define FUNC_NAME "first-coords-imol"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)first_coords_imol();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_do_anti_aliasing (SCM s_0)
{
#define FUNC_NAME "set-do-anti-aliasing"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_do_anti_aliasing(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_anti_aliasing_state ()
{
#define FUNC_NAME "do-anti-aliasing-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)do_anti_aliasing_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_do_GL_lighting (SCM s_0)
{
#define FUNC_NAME "set-do-GL-lighting"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_do_GL_lighting(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_GL_lighting_state ()
{
#define FUNC_NAME "do-GL-lighting-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)do_GL_lighting_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_use_graphics_interface_state ()
{
#define FUNC_NAME "use-graphics-interface-state"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)use_graphics_interface_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_start_graphics_interface ()
{
#define FUNC_NAME "start-graphics-interface"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  start_graphics_interface();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_reset_view ()
{
#define FUNC_NAME "reset-view"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)reset_view();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_n_molecules ()
{
#define FUNC_NAME "graphics-n-molecules"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)graphics_n_molecules();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_next_map_for_molecule (SCM s_0)
{
#define FUNC_NAME "next-map-for-molecule"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)next_map_for_molecule(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_toggle_idle_spin_function ()
{
#define FUNC_NAME "toggle-idle-spin-function"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  toggle_idle_spin_function();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_idle_function_rotate_angle (SCM s_0)
{
#define FUNC_NAME "set-idle-function-rotate-angle"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_idle_function_rotate_angle(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_idle_function_rotate_angle ()
{
#define FUNC_NAME "idle-function-rotate-angle"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)idle_function_rotate_angle();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_read_draw_molecule (SCM s_0)
{
#define FUNC_NAME "handle-read-draw-molecule"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)handle_read_draw_molecule((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_read_draw_molecule_with_recentre (SCM s_0, SCM s_1)
{
#define FUNC_NAME "handle-read-draw-molecule-with-recentre"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)handle_read_draw_molecule_with_recentre((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_pdb (SCM s_0)
{
#define FUNC_NAME "read-pdb"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_pdb((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_replace_fragment (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "replace-fragment"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  result = (int)replace_fragment(arg1,arg2,(char const *)arg3);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_and_update_model_molecule_from_file (SCM s_0, SCM s_1)
{
#define FUNC_NAME "clear-and-update-model-molecule-from-file"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)clear_and_update_model_molecule_from_file(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_screendump_image (SCM s_0)
{
#define FUNC_NAME "screendump-image"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  screendump_image((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_is_difference_map_checkbutton (SCM s_0)
{
#define FUNC_NAME "add-is-difference-map-checkbutton"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  add_is_difference_map_checkbutton(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_read_map_difference_map_toggle_button_toggled (SCM s_0, SCM s_1)
{
#define FUNC_NAME "on-read-map-difference-map-toggle-button-toggled"
  GtkButton *arg1 = (GtkButton *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkButton, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  on_read_map_difference_map_toggle_button_toggled(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_recentre_on_read_pdb_checkbutton (SCM s_0)
{
#define FUNC_NAME "add-recentre-on-read-pdb-checkbutton"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  add_recentre_on_read_pdb_checkbutton(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_recentre_on_read_pdb_toggle_button_toggled (SCM s_0, SCM s_1)
{
#define FUNC_NAME "on-recentre-on-read-pdb-toggle-button-toggled"
  GtkButton *arg1 = (GtkButton *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkButton, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  on_recentre_on_read_pdb_toggle_button_toggled(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_scroll_by_wheel_mouse (SCM s_0)
{
#define FUNC_NAME "set-scroll-by-wheel-mouse"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_scroll_by_wheel_mouse(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_scroll_by_wheel_mouse_state ()
{
#define FUNC_NAME "scroll-by-wheel-mouse-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)scroll_by_wheel_mouse_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_default_initial_contour_level_for_map (SCM s_0)
{
#define FUNC_NAME "set-default-initial-contour-level-for-map"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_default_initial_contour_level_for_map(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_default_initial_contour_level_for_difference_map (SCM s_0)
{
#define FUNC_NAME "set-default-initial-contour-level-for-difference-map"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_default_initial_contour_level_for_difference_map(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_print_view_matrix ()
{
#define FUNC_NAME "print-view-matrix"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  print_view_matrix();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_view_matrix_element (SCM s_0, SCM s_1)
{
#define FUNC_NAME "get-view-matrix-element"
  int arg1 ;
  int arg2 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (float)get_view_matrix_element(arg1,arg2);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_view_quaternion_internal (SCM s_0)
{
#define FUNC_NAME "get-view-quaternion-internal"
  int arg1 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (float)get_view_quaternion_internal(arg1);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_view_quaternion (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "set-view-quaternion"
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  set_view_quaternion(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_ncs_to_view_orientation (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "apply-ncs-to-view-orientation"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  apply_ncs_to_view_orientation(arg1,(char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_fps_flag (SCM s_0)
{
#define FUNC_NAME "set-fps-flag"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_fps_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_fps_flag ()
{
#define FUNC_NAME "get-fps-flag"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)get_fps_flag();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_origin_marker (SCM s_0)
{
#define FUNC_NAME "set-show-origin-marker"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_origin_marker(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_origin_marker_state ()
{
#define FUNC_NAME "show-origin-marker-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)show_origin_marker_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_suck_model_fit_dialog ()
{
#define FUNC_NAME "suck-model-fit-dialog"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)suck_model_fit_dialog();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_suck_model_fit_dialog_bl ()
{
#define FUNC_NAME "suck-model-fit-dialog-bl"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)suck_model_fit_dialog_bl();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_close_model_fit_dialog (SCM s_0)
{
#define FUNC_NAME "close-model-fit-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (GtkWidget *)close_model_fit_dialog(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_popup_window (SCM s_0)
{
#define FUNC_NAME "popup-window"
  char *arg1 = (char *) 0 ;
  GtkWidget *result = 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (GtkWidget *)popup_window((char const *)arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_status_bar_text (SCM s_0)
{
#define FUNC_NAME "add-status-bar-text"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  add_status_bar_text((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_model_fit_refine_dialog_stays_on_top (SCM s_0)
{
#define FUNC_NAME "set-model-fit-refine-dialog-stays-on-top"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_model_fit_refine_dialog_stays_on_top(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_model_fit_refine_dialog_stays_on_top_state ()
{
#define FUNC_NAME "model-fit-refine-dialog-stays-on-top-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)model_fit_refine_dialog_stays_on_top_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_accept_reject_dialog_window_position (SCM s_0)
{
#define FUNC_NAME "save-accept-reject-dialog-window-position"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_accept_reject_dialog_window_position(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_accept_reject_dialog (SCM s_0)
{
#define FUNC_NAME "set-accept-reject-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_accept_reject_dialog(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_accept_reject_dialog_docked (SCM s_0)
{
#define FUNC_NAME "set-accept-reject-dialog-docked"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_accept_reject_dialog_docked(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_accept_reject_dialog_docked_state ()
{
#define FUNC_NAME "accept-reject-dialog-docked-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)accept_reject_dialog_docked_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_quanta_buttons ()
{
#define FUNC_NAME "quanta-buttons"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  quanta_buttons();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_quanta_like_zoom ()
{
#define FUNC_NAME "quanta-like-zoom"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  quanta_like_zoom();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_control_key_for_rotate (SCM s_0)
{
#define FUNC_NAME "set-control-key-for-rotate"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_control_key_for_rotate(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_control_key_for_rotate_state ()
{
#define FUNC_NAME "control-key-for-rotate-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)control_key_for_rotate_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_blob_under_pointer_to_screen_centre ()
{
#define FUNC_NAME "blob-under-pointer-to-screen-centre"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)blob_under_pointer_to_screen_centre();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_normal_cursor ()
{
#define FUNC_NAME "normal-cursor"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  normal_cursor();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fleur_cursor ()
{
#define FUNC_NAME "fleur-cursor"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  fleur_cursor();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_pick_cursor_maybe ()
{
#define FUNC_NAME "pick-cursor-maybe"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  pick_cursor_maybe();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotate_cursor ()
{
#define FUNC_NAME "rotate-cursor"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  rotate_cursor();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_pick_cursor_index (SCM s_0)
{
#define FUNC_NAME "set-pick-cursor-index"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_pick_cursor_index(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_post_model_fit_refine_dialog ()
{
#define FUNC_NAME "post-model-fit-refine-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  post_model_fit_refine_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_model_fit_refine_dialog ()
{
#define FUNC_NAME "wrapped-create-model-fit-refine-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_model_fit_refine_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_model_fit_refine_dialog ()
{
#define FUNC_NAME "unset-model-fit-refine-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_model_fit_refine_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_refine_params_dialog ()
{
#define FUNC_NAME "unset-refine-params-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_refine_params_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_select_map_dialog ()
{
#define FUNC_NAME "show-select-map-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  show_select_map_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_model_fit_refine_rotate_translate_zone_label (SCM s_0)
{
#define FUNC_NAME "set-model-fit-refine-rotate-translate-zone-label"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_model_fit_refine_rotate_translate_zone_label((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_model_fit_refine_place_atom_at_pointer_label (SCM s_0)
{
#define FUNC_NAME "set-model-fit-refine-place-atom-at-pointer-label"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_model_fit_refine_place_atom_at_pointer_label((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_other_model_tools_dialog ()
{
#define FUNC_NAME "wrapped-create-other-model-tools-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_other_model_tools_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_other_modelling_tools_dialog ()
{
#define FUNC_NAME "unset-other-modelling-tools-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_other_modelling_tools_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_post_other_modelling_tools_dialog ()
{
#define FUNC_NAME "post-other-modelling-tools-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  post_other_modelling_tools_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_backup (SCM s_0)
{
#define FUNC_NAME "make-backup"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  make_backup(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_turn_off_backup (SCM s_0)
{
#define FUNC_NAME "turn-off-backup"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  turn_off_backup(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_turn_on_backup (SCM s_0)
{
#define FUNC_NAME "turn-on-backup"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  turn_on_backup(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_backup_state (SCM s_0)
{
#define FUNC_NAME "backup-state"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)backup_state(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_undo ()
{
#define FUNC_NAME "apply-undo"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  apply_undo();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_redo ()
{
#define FUNC_NAME "apply-redo"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  apply_redo();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_have_unsaved_changes (SCM s_0)
{
#define FUNC_NAME "set-have-unsaved-changes"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_have_unsaved_changes(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_have_unsaved_changes_p (SCM s_0)
{
#define FUNC_NAME "have-unsaved-changes-p"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)have_unsaved_changes_p(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_undo_molecule (SCM s_0)
{
#define FUNC_NAME "set-undo-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_undo_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_set_undo_molecule_chooser ()
{
#define FUNC_NAME "show-set-undo-molecule-chooser"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  show_set_undo_molecule_chooser();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_unpathed_backup_file_names (SCM s_0)
{
#define FUNC_NAME "set-unpathed-backup-file-names"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_unpathed_backup_file_names(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unpathed_backup_file_names_state ()
{
#define FUNC_NAME "unpathed-backup-file-names-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)unpathed_backup_file_names_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_recover_session ()
{
#define FUNC_NAME "recover-session"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  recover_session();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_recover_session (SCM s_0)
{
#define FUNC_NAME "execute-recover-session"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_recover_session(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_calc_phases_generic (SCM s_0)
{
#define FUNC_NAME "calc-phases-generic"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  calc_phases_generic((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_from_mtz_by_refmac_calc_phases (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "map-from-mtz-by-refmac-calc-phases"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  result = (int)map_from_mtz_by_refmac_calc_phases((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_from_mtz_by_calc_phases (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "map-from-mtz-by-calc-phases"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  result = (int)map_from_mtz_by_calc_phases((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_map_colour (SCM s_0)
{
#define FUNC_NAME "get-map-colour"
  int arg1 ;
  gdouble *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (gdouble *)get_map_colour(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gdouble, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_on_map_colour_choices (SCM s_0)
{
#define FUNC_NAME "add-on-map-colour-choices"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  add_on_map_colour_choices(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_colour_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "map-colour-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  map_colour_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_my_delete_menu_items (SCM s_0, SCM s_1)
{
#define FUNC_NAME "my-delete-menu-items"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  my_delete_menu_items(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_on_map_scroll_whell_choices (SCM s_0)
{
#define FUNC_NAME "add-on-map-scroll-whell-choices"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  add_on_map_scroll_whell_choices(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_scroll_wheel_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "map-scroll-wheel-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  map_scroll_wheel_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_scroll_wheel_map ()
{
#define FUNC_NAME "scroll-wheel-map"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)scroll_wheel_map();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_previous_map_colour (SCM s_0)
{
#define FUNC_NAME "save-previous-map-colour"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  save_previous_map_colour(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_restore_previous_map_colour (SCM s_0)
{
#define FUNC_NAME "restore-previous-map-colour"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  restore_previous_map_colour(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_active_map_drag_flag (SCM s_0)
{
#define FUNC_NAME "set-active-map-drag-flag"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_active_map_drag_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_active_map_drag_flag ()
{
#define FUNC_NAME "get-active-map-drag-flag"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)get_active_map_drag_flag();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_last_map_colour (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-last-map-colour"
  double arg1 ;
  double arg2 ;
  double arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  set_last_map_colour(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_colour (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "set-map-colour"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  set_map_colour(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_map_colour_change (SCM s_0, SCM s_1)
{
#define FUNC_NAME "handle-map-colour-change"
  int arg1 ;
  gdouble *arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (gdouble *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gdouble, 2, 0);
  }
  handle_map_colour_change(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_symmetry_colour_change (SCM s_0, SCM s_1)
{
#define FUNC_NAME "handle-symmetry-colour-change"
  int arg1 ;
  gdouble *arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (gdouble *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gdouble, 2, 0);
  }
  handle_symmetry_colour_change(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_single_map_properties_dialog (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fill-single-map-properties-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  fill_single_map_properties_dialog(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_contour_level_absolute (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-contour-level-absolute"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_contour_level_absolute(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_contour_level_in_sigma (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-contour-level-in-sigma"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_contour_level_in_sigma(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_last_map_sigma_step (SCM s_0)
{
#define FUNC_NAME "set-last-map-sigma-step"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_last_map_sigma_step(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_contour_sigma_button_and_entry (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-contour-sigma-button-and-entry"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_contour_sigma_button_and_entry(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_contour_by_sigma_step_maybe (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-contour-by-sigma-step-maybe"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_contour_by_sigma_step_maybe(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_contour_by_sigma_step_by_mol (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-contour-by-sigma-step-by-mol"
  float arg1 ;
  short arg2 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  set_contour_by_sigma_step_by_mol(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_data_resolution (SCM s_0)
{
#define FUNC_NAME "data-resolution"
  int arg1 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (float)data_resolution(arg1);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_solid_surface (SCM s_0, SCM s_1)
{
#define FUNC_NAME "solid-surface"
  int arg1 ;
  short arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  solid_surface(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_export_map (SCM s_0, SCM s_1)
{
#define FUNC_NAME "export-map"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)export_map(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_transform_map_raw (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10, SCM s_11, SCM s_12, SCM s_13, SCM s_14, SCM s_15, SCM s_16)
{
#define FUNC_NAME "transform-map-raw"
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = scm_num2dbl(s_8, FUNC_NAME);
  }
  {
    arg10 = scm_num2dbl(s_9, FUNC_NAME);
  }
  {
    arg11 = scm_num2dbl(s_10, FUNC_NAME);
  }
  {
    arg12 = scm_num2dbl(s_11, FUNC_NAME);
  }
  {
    arg13 = scm_num2dbl(s_12, FUNC_NAME);
  }
  {
    arg14 = scm_num2dbl(s_13, FUNC_NAME);
  }
  {
    arg15 = scm_num2dbl(s_14, FUNC_NAME);
  }
  {
    arg16 = scm_num2dbl(s_15, FUNC_NAME);
  }
  {
    arg17 = scm_num2dbl(s_16, FUNC_NAME);
  }
  result = (int)transform_map_raw(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_transform_map_raw_rest (SCM rest)
{
SCM arg[17];
SWIG_Guile_GetArgs (arg, rest, 17, 0, "transform-map-raw");
return _wrap_transform_map_raw(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10], arg[11], arg[12], arg[13], arg[14], arg[15], arg[16]);
}
static SCM
_wrap_rotate_map_round_screen_axis_x (SCM s_0)
{
#define FUNC_NAME "rotate-map-round-screen-axis-x"
  float arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  result = (int)rotate_map_round_screen_axis_x(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotate_map_round_screen_axis_y (SCM s_0)
{
#define FUNC_NAME "rotate-map-round-screen-axis-y"
  float arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  result = (int)rotate_map_round_screen_axis_y(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotate_map_round_screen_axis_z (SCM s_0)
{
#define FUNC_NAME "rotate-map-round-screen-axis-z"
  float arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  result = (int)rotate_map_round_screen_axis_z(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_iso_level_increment_entry (SCM s_0)
{
#define FUNC_NAME "get-text-for-iso-level-increment-entry"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)get_text_for_iso_level_increment_entry(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_diff_map_iso_level_increment_entry (SCM s_0)
{
#define FUNC_NAME "get-text-for-diff-map-iso-level-increment-entry"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)get_text_for_diff_map_iso_level_increment_entry(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_iso_level_increment (SCM s_0)
{
#define FUNC_NAME "set-iso-level-increment"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_iso_level_increment(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_iso_level_increment_from_text (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-iso-level-increment-from-text"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_iso_level_increment_from_text((char const *)arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_diff_map_iso_level_increment (SCM s_0)
{
#define FUNC_NAME "set-diff-map-iso-level-increment"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_diff_map_iso_level_increment(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_diff_map_iso_level_increment_from_text (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-diff-map-iso-level-increment-from-text"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_diff_map_iso_level_increment_from_text((char const *)arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_single_map_properties_apply_contour_level_to_map (SCM s_0)
{
#define FUNC_NAME "single-map-properties-apply-contour-level-to-map"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  single_map_properties_apply_contour_level_to_map(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_sampling_rate_text (SCM s_0)
{
#define FUNC_NAME "set-map-sampling-rate-text"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_map_sampling_rate_text((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_sampling_rate (SCM s_0)
{
#define FUNC_NAME "set-map-sampling-rate"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_map_sampling_rate(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_map_sampling_rate_text ()
{
#define FUNC_NAME "get-text-for-map-sampling-rate-text"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)get_text_for_map_sampling_rate_text();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_map_sampling_rate ()
{
#define FUNC_NAME "get-map-sampling-rate"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)get_map_sampling_rate();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_scrollable_map (SCM s_0)
{
#define FUNC_NAME "set-scrollable-map"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_scrollable_map(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_contour_level (SCM s_0)
{
#define FUNC_NAME "change-contour-level"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  change_contour_level(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_last_map_contour_level (SCM s_0)
{
#define FUNC_NAME "set-last-map-contour-level"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_last_map_contour_level(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_last_map_contour_level_by_sigma (SCM s_0)
{
#define FUNC_NAME "set-last-map-contour-level-by-sigma"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_last_map_contour_level_by_sigma(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_stop_scroll_diff_map (SCM s_0)
{
#define FUNC_NAME "set-stop-scroll-diff-map"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_stop_scroll_diff_map(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_stop_scroll_iso_map (SCM s_0)
{
#define FUNC_NAME "set-stop-scroll-iso-map"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_stop_scroll_iso_map(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_stop_scroll_iso_map_level (SCM s_0)
{
#define FUNC_NAME "set-stop-scroll-iso-map-level"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_stop_scroll_iso_map_level(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_stop_scroll_diff_map_level (SCM s_0)
{
#define FUNC_NAME "set-stop-scroll-diff-map-level"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_stop_scroll_diff_map_level(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_residue_density_fit_scale_factor (SCM s_0)
{
#define FUNC_NAME "set-residue-density-fit-scale-factor"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_residue_density_fit_scale_factor(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_line_width (SCM s_0)
{
#define FUNC_NAME "set-map-line-width"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_map_line_width(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_line_width_state ()
{
#define FUNC_NAME "map-line-width-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)map_line_width_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_and_draw_map (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "make-and-draw-map"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  result = (int)make_and_draw_map((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_and_draw_map_with_refmac_params (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10)
{
#define FUNC_NAME "make-and-draw-map-with-refmac-params"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  short arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  short arg11 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  int must_free8 = 0 ;
  int must_free9 = 0 ;
  int must_free10 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = scm_num2short(s_6, SCM_ARG1, FUNC_NAME);
  }
  {
    arg8 = (char *)SWIG_scm2str(s_7);
    must_free8 = 1;
  }
  {
    arg9 = (char *)SWIG_scm2str(s_8);
    must_free9 = 1;
  }
  {
    arg10 = (char *)SWIG_scm2str(s_9);
    must_free10 = 1;
  }
  {
    arg11 = scm_num2short(s_10, SCM_ARG1, FUNC_NAME);
  }
  result = (int)make_and_draw_map_with_refmac_params((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,arg11);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free8 && arg8) SWIG_free(arg8);
  if (must_free9 && arg9) SWIG_free(arg9);
  if (must_free10 && arg10) SWIG_free(arg10);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_and_draw_map_with_refmac_params_rest (SCM rest)
{
SCM arg[11];
SWIG_Guile_GetArgs (arg, rest, 11, 0, "make-and-draw-map-with-refmac-params");
return _wrap_make_and_draw_map_with_refmac_params(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10]);
}
static SCM
_wrap_make_and_draw_map_with_reso_with_refmac_params (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10, SCM s_11, SCM s_12, SCM s_13, SCM s_14)
{
#define FUNC_NAME "make-and-draw-map-with-reso-with-refmac-params"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  short arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  short arg11 ;
  short arg12 ;
  short arg13 ;
  float arg14 ;
  float arg15 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  int must_free8 = 0 ;
  int must_free9 = 0 ;
  int must_free10 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = scm_num2short(s_6, SCM_ARG1, FUNC_NAME);
  }
  {
    arg8 = (char *)SWIG_scm2str(s_7);
    must_free8 = 1;
  }
  {
    arg9 = (char *)SWIG_scm2str(s_8);
    must_free9 = 1;
  }
  {
    arg10 = (char *)SWIG_scm2str(s_9);
    must_free10 = 1;
  }
  {
    arg11 = scm_num2short(s_10, SCM_ARG1, FUNC_NAME);
  }
  {
    arg12 = scm_num2short(s_11, SCM_ARG1, FUNC_NAME);
  }
  {
    arg13 = scm_num2short(s_12, SCM_ARG1, FUNC_NAME);
  }
  {
    arg14 = scm_num2dbl(s_13, FUNC_NAME);
  }
  {
    arg15 = scm_num2dbl(s_14, FUNC_NAME);
  }
  result = (int)make_and_draw_map_with_reso_with_refmac_params((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,arg11,arg12,arg13,arg14,arg15);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free8 && arg8) SWIG_free(arg8);
  if (must_free9 && arg9) SWIG_free(arg9);
  if (must_free10 && arg10) SWIG_free(arg10);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_and_draw_map_with_reso_with_refmac_params_rest (SCM rest)
{
SCM arg[15];
SWIG_Guile_GetArgs (arg, rest, 15, 0, "make-and-draw-map-with-reso-with-refmac-params");
return _wrap_make_and_draw_map_with_reso_with_refmac_params(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10], arg[11], arg[12], arg[13], arg[14]);
}
static SCM
_wrap_refmac_parameters_scm (SCM s_0)
{
#define FUNC_NAME "refmac-parameters-scm"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)refmac_parameters_scm(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_valid_labels (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "valid-labels"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  result = (int)valid_labels((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mtz_file_has_phases_p (SCM s_0)
{
#define FUNC_NAME "mtz-file-has-phases-p"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)mtz_file_has_phases_p((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_is_mtz_file_p (SCM s_0)
{
#define FUNC_NAME "is-mtz-file-p"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)is_mtz_file_p((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_auto_read_make_and_draw_maps (SCM s_0)
{
#define FUNC_NAME "auto-read-make-and-draw-maps"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)auto_read_make_and_draw_maps((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_auto_read_do_difference_map_too (SCM s_0)
{
#define FUNC_NAME "set-auto-read-do-difference-map-too"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_auto_read_do_difference_map_too(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_auto_read_do_difference_map_too_state ()
{
#define FUNC_NAME "auto-read-do-difference-map-too-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)auto_read_do_difference_map_too_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_auto_read_column_labels (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-auto-read-column-labels"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  set_auto_read_column_labels((char const *)arg1,(char const *)arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_density_size_widget ()
{
#define FUNC_NAME "get-text-for-density-size-widget"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)get_text_for_density_size_widget();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_density_size_from_widget (SCM s_0)
{
#define FUNC_NAME "set-density-size-from-widget"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_density_size_from_widget((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_radius (SCM s_0)
{
#define FUNC_NAME "set-map-radius"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_map_radius(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_density_size (SCM s_0)
{
#define FUNC_NAME "set-density-size"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_density_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_radius_slider_max (SCM s_0)
{
#define FUNC_NAME "set-map-radius-slider-max"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_map_radius_slider_max(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_display_intro_string (SCM s_0)
{
#define FUNC_NAME "set-display-intro-string"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_display_intro_string((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_esoteric_depth_cue (SCM s_0)
{
#define FUNC_NAME "set-esoteric-depth-cue"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_esoteric_depth_cue(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_esoteric_depth_cue_state ()
{
#define FUNC_NAME "esoteric-depth-cue-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)esoteric_depth_cue_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_swap_difference_map_colours (SCM s_0)
{
#define FUNC_NAME "set-swap-difference-map-colours"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_swap_difference_map_colours(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_is_difference_map (SCM s_0)
{
#define FUNC_NAME "set-map-is-difference-map"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)set_map_is_difference_map(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_is_difference_map (SCM s_0)
{
#define FUNC_NAME "map-is-difference-map"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)map_is_difference_map(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_another_level ()
{
#define FUNC_NAME "another-level"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)another_level();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_another_level_from_map_molecule_number (SCM s_0)
{
#define FUNC_NAME "another-level-from-map-molecule-number"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)another_level_from_map_molecule_number(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_residue_density_fit_scale_factor ()
{
#define FUNC_NAME "residue-density-fit-scale-factor"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)residue_density_fit_scale_factor();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_density_at_point (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "density-at-point"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (float)density_at_point(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mtz_hklin_for_map (SCM s_0)
{
#define FUNC_NAME "mtz-hklin-for-map"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)mtz_hklin_for_map(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mtz_fp_for_map (SCM s_0)
{
#define FUNC_NAME "mtz-fp-for-map"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)mtz_fp_for_map(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mtz_phi_for_map (SCM s_0)
{
#define FUNC_NAME "mtz-phi-for-map"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)mtz_phi_for_map(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mtz_weight_for_map (SCM s_0)
{
#define FUNC_NAME "mtz-weight-for-map"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)mtz_weight_for_map(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mtz_use_weight_for_map (SCM s_0)
{
#define FUNC_NAME "mtz-use-weight-for-map"
  int arg1 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (short)mtz_use_weight_for_map(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_write_pdb_file (SCM s_0, SCM s_1)
{
#define FUNC_NAME "write-pdb-file"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)write_pdb_file(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_write_residue_range_to_pdb_file (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "write-residue-range-to-pdb-file"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  result = (int)write_residue_range_to_pdb_file(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_refmac (SCM s_0)
{
#define FUNC_NAME "execute-refmac"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_refmac(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refmac_molecule_button_select (SCM s_0, SCM s_1)
{
#define FUNC_NAME "refmac-molecule-button-select"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  refmac_molecule_button_select(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refmac_molecule (SCM s_0)
{
#define FUNC_NAME "set-refmac-molecule"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)set_refmac_molecule(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_option_menu_with_refmac_options (SCM s_0)
{
#define FUNC_NAME "fill-option-menu-with-refmac-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_option_menu_with_refmac_options(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_free_memory_run_refmac (SCM s_0)
{
#define FUNC_NAME "free-memory-run-refmac"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  free_memory_run_refmac(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refmac_counter (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-refmac-counter"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_refmac_counter(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refmac_name (SCM s_0)
{
#define FUNC_NAME "refmac-name"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)refmac_name(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_swap_map_colours (SCM s_0, SCM s_1)
{
#define FUNC_NAME "swap-map-colours"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  swap_map_colours(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_keep_map_colour_after_refmac (SCM s_0)
{
#define FUNC_NAME "set-keep-map-colour-after-refmac"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_keep_map_colour_after_refmac(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_keep_map_colour_after_refmac_state ()
{
#define FUNC_NAME "keep-map-colour-after-refmac-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)keep_map_colour_after_refmac_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_symmetry_size_widget ()
{
#define FUNC_NAME "get-text-for-symmetry-size-widget"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)get_text_for_symmetry_size_widget();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_size_from_widget (SCM s_0)
{
#define FUNC_NAME "set-symmetry-size-from-widget"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_symmetry_size_from_widget((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_size (SCM s_0)
{
#define FUNC_NAME "set-symmetry-size"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_symmetry_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_symmetry_bonds_colour (SCM s_0)
{
#define FUNC_NAME "get-symmetry-bonds-colour"
  int arg1 ;
  double *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (double *)get_symmetry_bonds_colour(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_double, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_show_symmetry ()
{
#define FUNC_NAME "get-show-symmetry"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)get_show_symmetry();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_symmetry_master (SCM s_0)
{
#define FUNC_NAME "set-show-symmetry-master"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_symmetry_master(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_symmetry_molecule (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-show-symmetry-molecule"
  int arg1 ;
  short arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_show_symmetry_molecule(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_symmetry_as_calphas (SCM s_0, SCM s_1)
{
#define FUNC_NAME "symmetry-as-calphas"
  int arg1 ;
  short arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  symmetry_as_calphas(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_symmetry_as_calphas_state (SCM s_0)
{
#define FUNC_NAME "get-symmetry-as-calphas-state"
  int arg1 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (short)get_symmetry_as_calphas_state(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_molecule_rotate_colour_map (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-symmetry-molecule-rotate-colour-map"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_symmetry_molecule_rotate_colour_map(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_symmetry_molecule_rotate_colour_map_state (SCM s_0)
{
#define FUNC_NAME "symmetry-molecule-rotate-colour-map-state"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)symmetry_molecule_rotate_colour_map_state(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_colour_by_symop (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-symmetry-colour-by-symop"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_symmetry_colour_by_symop(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_whole_chain (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-symmetry-whole-chain"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_symmetry_whole_chain(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_atom_labels_expanded (SCM s_0)
{
#define FUNC_NAME "set-symmetry-atom-labels-expanded"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_symmetry_atom_labels_expanded(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_show_symmetry_window ()
{
#define FUNC_NAME "wrapped-create-show-symmetry-window"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_show_symmetry_window();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_symmetry_colour_adjustment_changed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "symmetry-colour-adjustment-changed"
  GtkAdjustment *arg1 = (GtkAdjustment *) 0 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkAdjustment *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkAdjustment, 1, 0);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  symmetry_colour_adjustment_changed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_symmetry_molecule_controller_dialog ()
{
#define FUNC_NAME "symmetry-molecule-controller-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)symmetry_molecule_controller_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_has_unit_cell_state (SCM s_0)
{
#define FUNC_NAME "has-unit-cell-state"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)has_unit_cell_state(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_symmetry_coords (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8)
{
#define FUNC_NAME "save-symmetry-coords"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = scm_num2int(s_6, SCM_ARG1, FUNC_NAME);
  }
  {
    arg8 = scm_num2int(s_7, SCM_ARG1, FUNC_NAME);
  }
  {
    arg9 = scm_num2int(s_8, SCM_ARG1, FUNC_NAME);
  }
  save_symmetry_coords((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_save_symmetry_coords ()
{
#define FUNC_NAME "setup-save-symmetry-coords"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  setup_save_symmetry_coords();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_symmetry_coords_from_fileselection (SCM s_0)
{
#define FUNC_NAME "save-symmetry-coords-from-fileselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_symmetry_coords_from_fileselection(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_space_group (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-space-group"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  set_space_group(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_shift_search_size (SCM s_0)
{
#define FUNC_NAME "set-symmetry-shift-search-size"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_symmetry_shift_search_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_directory_for_fileselection (SCM s_0)
{
#define FUNC_NAME "set-directory-for-fileselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_directory_for_fileselection(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_directory_from_fileselection (SCM s_0)
{
#define FUNC_NAME "save-directory-from-fileselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_directory_from_fileselection((GtkWidget const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_directory_for_saving_from_fileselection (SCM s_0)
{
#define FUNC_NAME "save-directory-for-saving-from-fileselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_directory_for_saving_from_fileselection((GtkWidget const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_file_for_save_fileselection (SCM s_0)
{
#define FUNC_NAME "set-file-for-save-fileselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_file_for_save_fileselection(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_directory_for_filechooser (SCM s_0)
{
#define FUNC_NAME "set-directory-for-filechooser"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_directory_for_filechooser(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_directory_from_filechooser (SCM s_0)
{
#define FUNC_NAME "save-directory-from-filechooser"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_directory_from_filechooser((GtkWidget const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_directory_for_saving_from_filechooser (SCM s_0)
{
#define FUNC_NAME "save-directory-for-saving-from-filechooser"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_directory_for_saving_from_filechooser((GtkWidget const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_sort_button_fileselection (SCM s_0)
{
#define FUNC_NAME "add-sort-button-fileselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (GtkWidget *)add_sort_button_fileselection(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ccp4i_project_optionmenu (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-ccp4i-project-optionmenu"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  add_ccp4i_project_optionmenu(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ccp4i_projects_to_optionmenu (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-ccp4i-projects-to-optionmenu"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkSignalFunc arg2 ;
  GtkSignalFunc *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkSignalFunc *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkSignalFunc, 2, 0);
    arg2 = *argp2;
  }
  add_ccp4i_projects_to_optionmenu(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ccp4i_project_shortcut (SCM s_0)
{
#define FUNC_NAME "add-ccp4i-project-shortcut"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  add_ccp4i_project_shortcut(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_option_menu_refmac_ccp4i_project_signal_func (SCM s_0, SCM s_1)
{
#define FUNC_NAME "option-menu-refmac-ccp4i-project-signal-func"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  option_menu_refmac_ccp4i_project_signal_func(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_refmac_ccp4i_option_menu_signal_func (SCM s_0, SCM s_1)
{
#define FUNC_NAME "run-refmac-ccp4i-option-menu-signal-func"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  run_refmac_ccp4i_option_menu_signal_func(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_refmac_ccp4i_project ()
{
#define FUNC_NAME "clear-refmac-ccp4i-project"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_refmac_ccp4i_project();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_lookup_file_selection_widgets (SCM s_0, SCM s_1)
{
#define FUNC_NAME "lookup-file-selection-widgets"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (GtkWidget *)lookup_file_selection_widgets(arg1,arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fileselection_sort_button_clicked (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fileselection-sort-button-clicked"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  fileselection_sort_button_clicked(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_push_the_buttons_on_fileselection (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "push-the-buttons-on-fileselection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  GtkWidget *arg3 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  {
    arg3 = (GtkWidget *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_GtkWidget, 3, 0);
  }
  push_the_buttons_on_fileselection(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_print_all_history_in_scheme ()
{
#define FUNC_NAME "print-all-history-in-scheme"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  print_all_history_in_scheme();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_print_all_history_in_python ()
{
#define FUNC_NAME "print-all-history-in-python"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  print_all_history_in_python();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_console_display_commands_state (SCM s_0)
{
#define FUNC_NAME "set-console-display-commands-state"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_console_display_commands_state(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_console_display_commands_hilights (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-console-display-commands-hilights"
  short arg1 ;
  short arg2 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  set_console_display_commands_hilights(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_state ()
{
#define FUNC_NAME "save-state"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  save_state();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_state_file (SCM s_0)
{
#define FUNC_NAME "save-state-file"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  save_state_file((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_save_state_file_name (SCM s_0)
{
#define FUNC_NAME "set-save-state-file-name"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_save_state_file_name((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_state_file_name_scm ()
{
#define FUNC_NAME "save-state-file-name-scm"
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (SCM)save_state_file_name_scm();
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_state_file_name_raw ()
{
#define FUNC_NAME "save-state-file-name-raw"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)save_state_file_name_raw();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_run_state_file_status (SCM s_0)
{
#define FUNC_NAME "set-run-state-file-status"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_run_state_file_status(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_state_file ()
{
#define FUNC_NAME "run-state-file"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  run_state_file();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_state_file_maybe ()
{
#define FUNC_NAME "run-state-file-maybe"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  run_state_file_maybe();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_run_state_file_dialog ()
{
#define FUNC_NAME "wrapped-create-run-state-file-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_run_state_file_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_VT_FLAT(SCM s_0)
{
#define FUNC_NAME "VT-FLAT"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_VT_FLAT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_VT_SPHERICAL(SCM s_0)
{
#define FUNC_NAME "VT-SPHERICAL"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_VT_SPHERICAL);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_vt_surface (SCM s_0)
{
#define FUNC_NAME "vt-surface"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  vt_surface(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_vt_surface_status ()
{
#define FUNC_NAME "vt-surface-status"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)vt_surface_status();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_clipping1_activate ()
{
#define FUNC_NAME "do-clipping1-activate"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_clipping1_activate();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clipping_adjustment_changed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "clipping-adjustment-changed"
  GtkAdjustment *arg1 = (GtkAdjustment *) 0 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkAdjustment *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkAdjustment, 1, 0);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  clipping_adjustment_changed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_clipping_back (SCM s_0)
{
#define FUNC_NAME "set-clipping-back"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_clipping_back(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_clipping_front (SCM s_0)
{
#define FUNC_NAME "set-clipping-front"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_clipping_front(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_show_unit_cell (SCM s_0)
{
#define FUNC_NAME "get-show-unit-cell"
  int arg1 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (short)get_show_unit_cell(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_unit_cells_all (SCM s_0)
{
#define FUNC_NAME "set-show-unit-cells-all"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_unit_cells_all(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_unit_cell (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-show-unit-cell"
  int arg1 ;
  short arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_show_unit_cell(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_unit_cell_colour (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-unit-cell-colour"
  float arg1 ;
  float arg2 ;
  float arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  set_unit_cell_colour(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_symmetry_colour_merge (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-symmetry-colour-merge"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_symmetry_colour_merge(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_colour_map_rotation_on_read_pdb (SCM s_0)
{
#define FUNC_NAME "set-colour-map-rotation-on-read-pdb"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_colour_map_rotation_on_read_pdb(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_colour_map_rotation_on_read_pdb_flag (SCM s_0)
{
#define FUNC_NAME "set-colour-map-rotation-on-read-pdb-flag"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_colour_map_rotation_on_read_pdb_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_colour_map_rotation_on_read_pdb_c_only_flag (SCM s_0)
{
#define FUNC_NAME "set-colour-map-rotation-on-read-pdb-c-only-flag"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_colour_map_rotation_on_read_pdb_c_only_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_colour_by_chain (SCM s_0)
{
#define FUNC_NAME "set-colour-by-chain"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_colour_by_chain(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_colour_by_molecule (SCM s_0)
{
#define FUNC_NAME "set-colour-by-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_colour_by_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_colour_map_rotation_for_map (SCM s_0)
{
#define FUNC_NAME "set-colour-map-rotation-for-map"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_colour_map_rotation_for_map(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_coords_colour_control_dialog ()
{
#define FUNC_NAME "wrapped-create-coords-colour-control-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_coords_colour_control_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_molecule_bonds_colour_map_rotation (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-molecule-bonds-colour-map-rotation"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_molecule_bonds_colour_map_rotation(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_molecule_bonds_colour_map_rotation (SCM s_0)
{
#define FUNC_NAME "get-molecule-bonds-colour-map-rotation"
  int arg1 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (float)get_molecule_bonds_colour_map_rotation(arg1);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_limit_aniso ()
{
#define FUNC_NAME "get-limit-aniso"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)get_limit_aniso();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_show_limit_aniso ()
{
#define FUNC_NAME "get-show-limit-aniso"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)get_show_limit_aniso();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_show_aniso ()
{
#define FUNC_NAME "get-show-aniso"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)get_show_aniso();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_limit_aniso (SCM s_0)
{
#define FUNC_NAME "set-limit-aniso"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_limit_aniso(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_aniso_limit_size_from_widget (SCM s_0)
{
#define FUNC_NAME "set-aniso-limit-size-from-widget"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_aniso_limit_size_from_widget((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_aniso (SCM s_0)
{
#define FUNC_NAME "set-show-aniso"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_aniso(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_aniso_limit_radius_entry ()
{
#define FUNC_NAME "get-text-for-aniso-limit-radius-entry"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)get_text_for_aniso_limit_radius_entry();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_aniso_probability (SCM s_0)
{
#define FUNC_NAME "set-aniso-probability"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_aniso_probability(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_aniso_probability ()
{
#define FUNC_NAME "get-aniso-probability"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)get_aniso_probability();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_graphics_window_size (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-graphics-window-size"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_graphics_window_size(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_graphics_window_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-graphics-window-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_graphics_window_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_store_graphics_window_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "store-graphics-window-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  store_graphics_window_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_store_window_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "store-window-position"
  int arg1 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  store_window_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_store_window_size (SCM s_0, SCM s_1)
{
#define FUNC_NAME "store-window-size"
  int arg1 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  store_window_size(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_draw ()
{
#define FUNC_NAME "graphics-draw"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  graphics_draw();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_hardware_stereo_mode ()
{
#define FUNC_NAME "hardware-stereo-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  hardware_stereo_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_stereo_mode_state ()
{
#define FUNC_NAME "stereo-mode-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)stereo_mode_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mono_mode ()
{
#define FUNC_NAME "mono-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  mono_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_side_by_side_stereo_mode (SCM s_0)
{
#define FUNC_NAME "side-by-side-stereo-mode"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  side_by_side_stereo_mode(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_hardware_stereo_angle_factor (SCM s_0)
{
#define FUNC_NAME "set-hardware-stereo-angle-factor"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_hardware_stereo_angle_factor(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_hardware_stereo_angle_factor_state ()
{
#define FUNC_NAME "hardware-stereo-angle-factor-state"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)hardware_stereo_angle_factor_state();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_model_fit_refine_dialog_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-model-fit-refine-dialog-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_model_fit_refine_dialog_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_display_control_dialog_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-display-control-dialog-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_display_control_dialog_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_go_to_atom_window_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-go-to-atom-window-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_go_to_atom_window_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_delete_dialog_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-delete-dialog-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_delete_dialog_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotate_translate_dialog_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-rotate-translate-dialog-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_rotate_translate_dialog_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_accept_reject_dialog_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-accept-reject-dialog-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_accept_reject_dialog_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ramachandran_plot_dialog_position (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-ramachandran-plot-dialog-position"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_ramachandran_plot_dialog_position(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_smooth_scroll_flag (SCM s_0)
{
#define FUNC_NAME "set-smooth-scroll-flag"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_smooth_scroll_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_smooth_scroll ()
{
#define FUNC_NAME "get-smooth-scroll"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)get_smooth_scroll();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_smooth_scroll_steps_str (SCM s_0)
{
#define FUNC_NAME "set-smooth-scroll-steps-str"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_smooth_scroll_steps_str((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_smooth_scroll_steps (SCM s_0)
{
#define FUNC_NAME "set-smooth-scroll-steps"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_smooth_scroll_steps(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_smooth_scroll_steps ()
{
#define FUNC_NAME "get-text-for-smooth-scroll-steps"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)get_text_for_smooth_scroll_steps();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_smooth_scroll_limit_str (SCM s_0)
{
#define FUNC_NAME "set-smooth-scroll-limit-str"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_smooth_scroll_limit_str((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_smooth_scroll_limit (SCM s_0)
{
#define FUNC_NAME "set-smooth-scroll-limit"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_smooth_scroll_limit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_smooth_scroll_limit ()
{
#define FUNC_NAME "get-text-for-smooth-scroll-limit"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)get_text_for_smooth_scroll_limit();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_font_size (SCM s_0)
{
#define FUNC_NAME "set-font-size"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_font_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_font_size ()
{
#define FUNC_NAME "get-font-size"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)get_font_size();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_font_colour (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-font-colour"
  float arg1 ;
  float arg2 ;
  float arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  set_font_colour(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotation_centre_size_from_widget (SCM s_0)
{
#define FUNC_NAME "set-rotation-centre-size-from-widget"
  gchar *arg1 = (gchar *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (gchar *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_gchar, 1, 0);
  }
  set_rotation_centre_size_from_widget((gchar const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotation_centre_size (SCM s_0)
{
#define FUNC_NAME "set-rotation-centre-size"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_rotation_centre_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_rotation_centre_cube_size ()
{
#define FUNC_NAME "get-text-for-rotation-centre-cube-size"
  gchar *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (gchar *)get_text_for_rotation_centre_cube_size();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gchar, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_recentre_on_read_pdb ()
{
#define FUNC_NAME "recentre-on-read-pdb"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)recentre_on_read_pdb();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_recentre_on_read_pdb (SCM s_0)
{
#define FUNC_NAME "set-recentre-on-read-pdb"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_recentre_on_read_pdb(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotation_centre (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-rotation-centre"
  float arg1 ;
  float arg2 ;
  float arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  set_rotation_centre(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotation_centre_internal (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-rotation-centre-internal"
  float arg1 ;
  float arg2 ;
  float arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  set_rotation_centre_internal(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotation_centre_position (SCM s_0)
{
#define FUNC_NAME "rotation-centre-position"
  int arg1 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (float)rotation_centre_position(arg1);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_draw_axes (SCM s_0)
{
#define FUNC_NAME "set-draw-axes"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_draw_axes(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_atom_index (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "atom-index"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (int)atom_index(arg1,(char const *)arg2,arg3,(char const *)arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_atom_index_first_atom_in_residue (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "atom-index-first-atom-in-residue"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (int)atom_index_first_atom_in_residue(arg1,(char const *)arg2,arg3,(char const *)arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_median_temperature_factor (SCM s_0)
{
#define FUNC_NAME "median-temperature-factor"
  int arg1 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (float)median_temperature_factor(arg1);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_average_temperature_factor (SCM s_0)
{
#define FUNC_NAME "average-temperature-factor"
  int arg1 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (float)average_temperature_factor(arg1);
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_pending_picks ()
{
#define FUNC_NAME "clear-pending-picks"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_pending_picks();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_centre_of_mass_string (SCM s_0)
{
#define FUNC_NAME "centre-of-mass-string"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)centre_of_mass_string(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_default_temperature_factor_for_new_atoms (SCM s_0)
{
#define FUNC_NAME "set-default-temperature-factor-for-new-atoms"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_default_temperature_factor_for_new_atoms(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_default_new_atoms_b_factor ()
{
#define FUNC_NAME "default-new-atoms-b-factor"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)default_new_atoms_b_factor();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_atom_attribute (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "set-atom-attribute"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  int must_free6 = 0 ;
  int must_free7 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  {
    arg7 = (char *)SWIG_scm2str(s_6);
    must_free7 = 1;
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  result = (int)set_atom_attribute(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,arg8);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  if (must_free6 && arg6) SWIG_free(arg6);
  if (must_free7 && arg7) SWIG_free(arg7);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_atom_string_attribute (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "set-atom-string-attribute"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  int must_free6 = 0 ;
  int must_free7 = 0 ;
  int must_free8 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  {
    arg7 = (char *)SWIG_scm2str(s_6);
    must_free7 = 1;
  }
  {
    arg8 = (char *)SWIG_scm2str(s_7);
    must_free8 = 1;
  }
  result = (int)set_atom_string_attribute(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  if (must_free6 && arg6) SWIG_free(arg6);
  if (must_free7 && arg7) SWIG_free(arg7);
  if (must_free8 && arg8) SWIG_free(arg8);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_atom_attributes (SCM s_0)
{
#define FUNC_NAME "set-atom-attributes"
  SCM arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = (int)set_atom_attributes(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_skel_greer_on ()
{
#define FUNC_NAME "skel-greer-on"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  skel_greer_on();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_skel_greer_off ()
{
#define FUNC_NAME "skel-greer-off"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  skel_greer_off();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_skel_foadi_on ()
{
#define FUNC_NAME "skel-foadi-on"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  skel_foadi_on();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_skel_foadi_off ()
{
#define FUNC_NAME "skel-foadi-off"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  skel_foadi_off();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_skeletonize_map_by_optionmenu (SCM s_0)
{
#define FUNC_NAME "skeletonize-map-by-optionmenu"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  skeletonize_map_by_optionmenu(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_skeletonize_map_single_map_maybe (SCM s_0, SCM s_1)
{
#define FUNC_NAME "skeletonize-map-single-map-maybe"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  skeletonize_map_single_map_maybe(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_skeletonize_map (SCM s_0, SCM s_1)
{
#define FUNC_NAME "skeletonize-map"
  int arg1 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)skeletonize_map(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unskeletonize_map (SCM s_0)
{
#define FUNC_NAME "unskeletonize-map"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)unskeletonize_map(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_option_menu_with_skeleton_options (SCM s_0)
{
#define FUNC_NAME "fill-option-menu-with-skeleton-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_option_menu_with_skeleton_options(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_initial_map_for_skeletonize ()
{
#define FUNC_NAME "set-initial-map-for-skeletonize"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_initial_map_for_skeletonize();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_max_skeleton_search_depth (SCM s_0)
{
#define FUNC_NAME "set-max-skeleton-search-depth"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_max_skeleton_search_depth(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_on_off_skeleton_radio_buttons (SCM s_0)
{
#define FUNC_NAME "set-on-off-skeleton-radio-buttons"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_on_off_skeleton_radio_buttons(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_on_off_single_map_skeleton_radio_buttons (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-on-off-single-map-skeleton-radio-buttons"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_on_off_single_map_skeleton_radio_buttons(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_skeletonization_level_entry ()
{
#define FUNC_NAME "get-text-for-skeletonization-level-entry"
  gchar *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (gchar *)get_text_for_skeletonization_level_entry();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gchar, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_skeletonization_level_from_widget (SCM s_0)
{
#define FUNC_NAME "set-skeletonization-level-from-widget"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_skeletonization_level_from_widget((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_skeleton_box_size_entry ()
{
#define FUNC_NAME "get-text-for-skeleton-box-size-entry"
  gchar *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (gchar *)get_text_for_skeleton_box_size_entry();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gchar, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_skeleton_box_size_from_widget (SCM s_0)
{
#define FUNC_NAME "set-skeleton-box-size-from-widget"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_skeleton_box_size_from_widget((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_skeleton_box_size (SCM s_0)
{
#define FUNC_NAME "set-skeleton-box-size"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_skeleton_box_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_skeleton_colour_change (SCM s_0, SCM s_1)
{
#define FUNC_NAME "handle-skeleton-colour-change"
  int arg1 ;
  gdouble *arg2 = (gdouble *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (gdouble *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gdouble, 2, 0);
  }
  handle_skeleton_colour_change(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_skeleton_colour (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "set-skeleton-colour"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  set_skeleton_colour(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_skeleton_colour ()
{
#define FUNC_NAME "get-skeleton-colour"
  gdouble *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (gdouble *)get_skeleton_colour();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gdouble, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_read_ccp4_map (SCM s_0, SCM s_1)
{
#define FUNC_NAME "handle-read-ccp4-map"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)handle_read_ccp4_map((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_coordinates_using_widget (SCM s_0)
{
#define FUNC_NAME "save-coordinates-using-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_coordinates_using_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_coordinates (SCM s_0, SCM s_1)
{
#define FUNC_NAME "save-coordinates"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)save_coordinates(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_save_coordinates_in_original_directory (SCM s_0)
{
#define FUNC_NAME "set-save-coordinates-in-original-directory"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_save_coordinates_in_original_directory(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_molecule_coords_button_select (SCM s_0, SCM s_1)
{
#define FUNC_NAME "save-molecule-coords-button-select"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  save_molecule_coords_button_select(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_molecule_number_from_option_menu ()
{
#define FUNC_NAME "save-molecule-number-from-option-menu"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)save_molecule_number_from_option_menu();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_save_molecule_number (SCM s_0)
{
#define FUNC_NAME "set-save-molecule-number"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_save_molecule_number(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_phs_and_coords_and_make_map (SCM s_0)
{
#define FUNC_NAME "read-phs-and-coords-and-make-map"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  read_phs_and_coords_and_make_map((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_phs_and_make_map_using_cell_symm_from_previous_mol (SCM s_0)
{
#define FUNC_NAME "read-phs-and-make-map-using-cell-symm-from-previous-mol"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_phs_and_make_map_using_cell_symm_from_previous_mol((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_phs_and_make_map_using_cell_symm_from_mol (SCM s_0, SCM s_1)
{
#define FUNC_NAME "read-phs-and-make-map-using-cell-symm-from-mol"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)read_phs_and_make_map_using_cell_symm_from_mol((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename (SCM s_0)
{
#define FUNC_NAME "read-phs-and-make-map-using-cell-symm-from-mol-using-implicit-phs-filename"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_phs_and_make_map_using_cell_symm (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "read-phs-and-make-map-using-cell-symm"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  result = (int)read_phs_and_make_map_using_cell_symm((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_phs_and_make_map_with_reso_limits (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "read-phs-and-make-map-with-reso-limits"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (int)read_phs_and_make_map_with_reso_limits(arg1,(char const *)arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_store_phs_filename (SCM s_0)
{
#define FUNC_NAME "graphics-store-phs-filename"
  gchar *arg1 = (gchar *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (gchar *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_gchar, 1, 0);
  }
  graphics_store_phs_filename((gchar const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_get_phs_filename ()
{
#define FUNC_NAME "graphics-get-phs-filename"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)graphics_get_phs_filename();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_possible_cell_symm_for_phs_file ()
{
#define FUNC_NAME "possible-cell-symm-for-phs-file"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)possible_cell_symm_for_phs_file();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_phs_cell_chooser (SCM s_0, SCM s_1)
{
#define FUNC_NAME "get-text-for-phs-cell-chooser"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  gchar *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (gchar *)get_text_for_phs_cell_chooser(arg1,arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gchar, 0);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_undo_last_move ()
{
#define FUNC_NAME "undo-last-move"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  undo_last_move();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_translate_molecule_by (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "translate-molecule-by"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  translate_molecule_by(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_transform_molecule_by (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10, SCM s_11, SCM s_12)
{
#define FUNC_NAME "transform-molecule-by"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = scm_num2dbl(s_8, FUNC_NAME);
  }
  {
    arg10 = scm_num2dbl(s_9, FUNC_NAME);
  }
  {
    arg11 = scm_num2dbl(s_10, FUNC_NAME);
  }
  {
    arg12 = scm_num2dbl(s_11, FUNC_NAME);
  }
  {
    arg13 = scm_num2dbl(s_12, FUNC_NAME);
  }
  transform_molecule_by(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_transform_molecule_by_rest (SCM rest)
{
SCM arg[13];
SWIG_Guile_GetArgs (arg, rest, 13, 0, "transform-molecule-by");
return _wrap_transform_molecule_by(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10], arg[11], arg[12]);
}
static SCM
_wrap_wrapped_create_goto_atom_window ()
{
#define FUNC_NAME "wrapped-create-goto-atom-window"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_goto_atom_window();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_post_go_to_atom_window ()
{
#define FUNC_NAME "post-go-to-atom-window"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  post_go_to_atom_window();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_go_to_atom_window (SCM s_0)
{
#define FUNC_NAME "fill-go-to-atom-window"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_go_to_atom_window(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_go_to_atom_chain_entry ()
{
#define FUNC_NAME "get-text-for-go-to-atom-chain-entry"
  gchar *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (gchar *)get_text_for_go_to_atom_chain_entry();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gchar, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_go_to_atom_residue_entry ()
{
#define FUNC_NAME "get-text-for-go-to-atom-residue-entry"
  gchar *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (gchar *)get_text_for_go_to_atom_residue_entry();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gchar, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_go_to_atom_atom_name_entry ()
{
#define FUNC_NAME "get-text-for-go-to-atom-atom-name-entry"
  gchar *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (gchar *)get_text_for_go_to_atom_atom_name_entry();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_gchar, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_atom_molecule_number ()
{
#define FUNC_NAME "go-to-atom-molecule-number"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)go_to_atom_molecule_number();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_atom_chain_id ()
{
#define FUNC_NAME "go-to-atom-chain-id"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)go_to_atom_chain_id();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_atom_atom_name ()
{
#define FUNC_NAME "go-to-atom-atom-name"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)go_to_atom_atom_name();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_atom_residue_number ()
{
#define FUNC_NAME "go-to-atom-residue-number"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)go_to_atom_residue_number();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_atom_ins_code ()
{
#define FUNC_NAME "go-to-atom-ins-code"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)go_to_atom_ins_code();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_atom_alt_conf ()
{
#define FUNC_NAME "go-to-atom-alt-conf"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)go_to_atom_alt_conf();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_go_to_atom_chain_residue_atom_name (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-go-to-atom-chain-residue-atom-name"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  result = (int)set_go_to_atom_chain_residue_atom_name((char const *)arg1,arg2,(char const *)arg3);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_go_to_atom_chain_residue_atom_name_no_redraw (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-go-to-atom-chain-residue-atom-name-no-redraw"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  result = (int)set_go_to_atom_chain_residue_atom_name_no_redraw((char const *)arg1,arg2,(char const *)arg3);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_go_to_atom_chain_residue_atom_name_strings (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-go-to-atom-chain-residue-atom-name-strings"
  gchar *arg1 = (gchar *) 0 ;
  gchar *arg2 = (gchar *) 0 ;
  gchar *arg3 = (gchar *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (gchar *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_gchar, 1, 0);
  }
  {
    arg2 = (gchar *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gchar, 2, 0);
  }
  {
    arg3 = (gchar *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_gchar, 3, 0);
  }
  result = (int)set_go_to_atom_chain_residue_atom_name_strings((gchar const *)arg1,(gchar const *)arg2,(gchar const *)arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_goto_prev_atom_maybe (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "goto-prev-atom-maybe"
  gchar *arg1 = (gchar *) 0 ;
  gchar *arg2 = (gchar *) 0 ;
  gchar *arg3 = (gchar *) 0 ;
  GtkEntry *arg4 = (GtkEntry *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (gchar *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_gchar, 1, 0);
  }
  {
    arg2 = (gchar *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gchar, 2, 0);
  }
  {
    arg3 = (gchar *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_gchar, 3, 0);
  }
  {
    arg4 = (GtkEntry *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_GtkEntry, 4, 0);
  }
  result = (int)goto_prev_atom_maybe((gchar const *)arg1,(gchar const *)arg2,(gchar const *)arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_goto_near_atom_maybe (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "goto-near-atom-maybe"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  GtkEntry *arg4 = (GtkEntry *) 0 ;
  int arg5 ;
  int result;
  int must_free1 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (GtkEntry *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_GtkEntry, 4, 0);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  result = (int)goto_near_atom_maybe((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_goto_next_atom_maybe_new (SCM s_0)
{
#define FUNC_NAME "goto-next-atom-maybe-new"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)goto_next_atom_maybe_new(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_goto_previous_atom_maybe_new (SCM s_0)
{
#define FUNC_NAME "goto-previous-atom-maybe-new"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)goto_previous_atom_maybe_new(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_update_go_to_atom_from_current_position ()
{
#define FUNC_NAME "update-go-to-atom-from-current-position"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  update_go_to_atom_from_current_position();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_go_to_atom_values (SCM s_0)
{
#define FUNC_NAME "apply-go-to-atom-values"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)apply_go_to_atom_values(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_atom_spec_to_atom_index (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "atom-spec-to-atom-index"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (int)atom_spec_to_atom_index(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_full_atom_spec_to_atom_index (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "full-atom-spec-to-atom-index"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  int must_free6 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  result = (int)full_atom_spec_to_atom_index(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  if (must_free6 && arg6) SWIG_free(arg6);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_update_go_to_atom_window_on_changed_mol (SCM s_0)
{
#define FUNC_NAME "update-go-to-atom-window-on-changed-mol"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  update_go_to_atom_window_on_changed_mol(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_update_go_to_atom_window_on_new_mol ()
{
#define FUNC_NAME "update-go-to-atom-window-on-new-mol"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  update_go_to_atom_window_on_new_mol();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_update_go_to_atom_window_on_other_molecule_chosen (SCM s_0)
{
#define FUNC_NAME "update-go-to-atom-window-on-other-molecule-chosen"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  update_go_to_atom_window_on_other_molecule_chosen(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_go_to_atom_molecule (SCM s_0)
{
#define FUNC_NAME "set-go-to-atom-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_go_to_atom_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_atom_molecule_optionmenu_active_molecule (SCM s_0)
{
#define FUNC_NAME "go-to-atom-molecule-optionmenu-active-molecule"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)go_to_atom_molecule_optionmenu_active_molecule(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_go_to_atom_widget (SCM s_0)
{
#define FUNC_NAME "save-go-to-atom-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_go_to_atom_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_go_to_atom_widget ()
{
#define FUNC_NAME "unset-go-to-atom-widget"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_go_to_atom_widget();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_atom_list (SCM s_0)
{
#define FUNC_NAME "clear-atom-list"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  clear_atom_list(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_go_to_atom_from_widget (SCM s_0)
{
#define FUNC_NAME "apply-go-to-atom-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  apply_go_to_atom_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_go_to_atom_residue_list_select_child (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "on-go-to-atom-residue-list-select-child"
  GtkList *arg1 = (GtkList *) 0 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  gpointer arg3 ;
  gpointer *argp3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkList *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkList, 1, 0);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  {
    argp3 = (gpointer *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_gpointer, 3, 0);
    arg3 = *argp3;
  }
  on_go_to_atom_residue_list_select_child(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_autobuild_ca_off ()
{
#define FUNC_NAME "autobuild-ca-off"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  autobuild_ca_off();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_test_fragment ()
{
#define FUNC_NAME "test-fragment"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  test_fragment();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_skeleton_prune ()
{
#define FUNC_NAME "do-skeleton-prune"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_skeleton_prune();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_test_function (SCM s_0, SCM s_1)
{
#define FUNC_NAME "test-function"
  int arg1 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)test_function(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_display_control_widget_in_graphics (SCM s_0)
{
#define FUNC_NAME "save-display-control-widget-in-graphics"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  save_display_control_widget_in_graphics(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_display_control_window ()
{
#define FUNC_NAME "wrapped-create-display-control-window"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_display_control_window();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_post_display_control_window ()
{
#define FUNC_NAME "post-display-control-window"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  post_display_control_window();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_map_display_control_widgets ()
{
#define FUNC_NAME "add-map-display-control-widgets"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_map_display_control_widgets();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_mol_display_control_widgets ()
{
#define FUNC_NAME "add-mol-display-control-widgets"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_mol_display_control_widgets();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_map_and_mol_display_control_widgets ()
{
#define FUNC_NAME "add-map-and-mol-display-control-widgets"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_map_and_mol_display_control_widgets();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_reset_graphics_display_control_window ()
{
#define FUNC_NAME "reset-graphics-display-control-window"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  reset_graphics_display_control_window();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_close_graphics_display_control_window ()
{
#define FUNC_NAME "close-graphics-display-control-window"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  close_graphics_display_control_window();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_displayed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-map-displayed"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_map_displayed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_mol_displayed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-mol-displayed"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_mol_displayed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_mol_active (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-mol-active"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_mol_active(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mol_is_displayed (SCM s_0)
{
#define FUNC_NAME "mol-is-displayed"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)mol_is_displayed(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mol_is_active (SCM s_0)
{
#define FUNC_NAME "mol-is-active"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)mol_is_active(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_is_displayed (SCM s_0)
{
#define FUNC_NAME "map-is-displayed"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)map_is_displayed(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_all_maps_displayed (SCM s_0)
{
#define FUNC_NAME "set-all-maps-displayed"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_all_maps_displayed(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_all_models_displayed_and_active (SCM s_0)
{
#define FUNC_NAME "set-all-models-displayed-and-active"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_all_models_displayed_and_active(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_spacegroup (SCM s_0)
{
#define FUNC_NAME "show-spacegroup"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)show_spacegroup(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_merge_molecules_dialog ()
{
#define FUNC_NAME "wrapped-create-merge-molecules-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_merge_molecules_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_merge_molecules_gui ()
{
#define FUNC_NAME "do-merge-molecules-gui"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_merge_molecules_gui();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_merge_molecules (SCM s_0)
{
#define FUNC_NAME "do-merge-molecules"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  do_merge_molecules(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_vbox_with_coordinates_options (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fill-vbox-with-coordinates-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkSignalFunc arg2 ;
  GtkSignalFunc *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkSignalFunc *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkSignalFunc, 2, 0);
    arg2 = *argp2;
  }
  fill_vbox_with_coordinates_options(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_merge_molecules_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "merge-molecules-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  merge_molecules_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_merge_molecules_check_button_toggled (SCM s_0, SCM s_1)
{
#define FUNC_NAME "on-merge-molecules-check-button-toggled"
  GtkToggleButton *arg1 = (GtkToggleButton *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkToggleButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkToggleButton, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  on_merge_molecules_check_button_toggled(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_merge_molecules (SCM s_0, SCM s_1)
{
#define FUNC_NAME "merge-molecules"
  SCM arg1 ;
  int arg2 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)merge_molecules(arg1,arg2);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_mutate_sequence_dialog ()
{
#define FUNC_NAME "wrapped-create-mutate-sequence-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_mutate_sequence_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_mutate_sequence (SCM s_0)
{
#define FUNC_NAME "do-mutate-sequence"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  do_mutate_sequence(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mutate_sequence_molecule_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "mutate-sequence-molecule-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  mutate_sequence_molecule_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mutate_sequence_chain_option_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "mutate-sequence-chain-option-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  mutate_sequence_chain_option_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_fit_loop_dialog ()
{
#define FUNC_NAME "wrapped-fit-loop-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_fit_loop_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fit_loop_from_widget (SCM s_0)
{
#define FUNC_NAME "fit-loop-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fit_loop_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_align_and_mutate_dialog ()
{
#define FUNC_NAME "wrapped-create-align-and-mutate-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_align_and_mutate_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_align_mutate_sequence (SCM s_0)
{
#define FUNC_NAME "do-align-mutate-sequence"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)do_align_mutate_sequence(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_align_and_mutate_molecule_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "align-and-mutate-molecule-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  align_and_mutate_molecule_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_align_and_mutate_chain_option_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "align-and-mutate-chain-option-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  align_and_mutate_chain_option_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_align_and_mutate (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "align-and-mutate"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  align_and_mutate(arg1,(char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_renumber_residue_range (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "renumber-residue-range"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  result = (int)renumber_residue_range(arg1,(char const *)arg2,arg3,arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_renumber_residue_range_dialog ()
{
#define FUNC_NAME "wrapped-create-renumber-residue-range-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_renumber_residue_range_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_renumber_residues_from_widget (SCM s_0)
{
#define FUNC_NAME "renumber-residues-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  renumber_residues_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_residue_number (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "change-residue-number"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free6 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  result = (int)change_residue_number(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5,(char const *)arg6);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free6 && arg6) SWIG_free(arg6);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_change_chain_id_dialog ()
{
#define FUNC_NAME "wrapped-create-change-chain-id-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_change_chain_id_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_chain_id_by_widget (SCM s_0)
{
#define FUNC_NAME "change-chain-id-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  change_chain_id_by_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_chain_ids_mol_option_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "change-chain-ids-mol-option-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  change_chain_ids_mol_option_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_chain_ids_chain_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "change-chain-ids-chain-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  change_chain_ids_chain_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_chain_id (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "change-chain-id"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  short arg4 ;
  int arg5 ;
  int arg6 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2short(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  change_chain_id(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_chain_id_with_result_scm (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "change-chain-id-with-result-scm"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  short arg4 ;
  int arg5 ;
  int arg6 ;
  SCM result;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2short(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)change_chain_id_with_result_scm(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  gswig_result=result;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_post_scripting_window ()
{
#define FUNC_NAME "post-scripting-window"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  post_scripting_window();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_post_scheme_scripting_window ()
{
#define FUNC_NAME "post-scheme-scripting-window"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  post_scheme_scripting_window();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_post_python_scripting_window ()
{
#define FUNC_NAME "post-python-scripting-window"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  post_python_scripting_window();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_command_line_scripts ()
{
#define FUNC_NAME "run-command-line-scripts"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  run_command_line_scripts();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_guile_window_entry (SCM s_0)
{
#define FUNC_NAME "setup-guile-window-entry"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  setup_guile_window_entry(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_python_window_entry (SCM s_0)
{
#define FUNC_NAME "setup-python-window-entry"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  setup_python_window_entry(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_guile_window_enter_callback (SCM s_0, SCM s_1)
{
#define FUNC_NAME "guile-window-enter-callback"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  guile_window_enter_callback(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_guile_gui_loaded_flag ()
{
#define FUNC_NAME "set-guile-gui-loaded-flag"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_guile_gui_loaded_flag();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_python_gui_loaded_flag ()
{
#define FUNC_NAME "set-python-gui-loaded-flag"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_python_gui_loaded_flag();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_found_coot_gui ()
{
#define FUNC_NAME "set-found-coot-gui"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_found_coot_gui();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_get_accession_code (SCM s_0)
{
#define FUNC_NAME "handle-get-accession-code"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  handle_get_accession_code(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_get_libcheck_monomer_code (SCM s_0)
{
#define FUNC_NAME "handle-get-libcheck-monomer-code"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  handle_get_libcheck_monomer_code(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_monomer (SCM s_0)
{
#define FUNC_NAME "get-monomer"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)get_monomer((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_make_monomer_search (SCM s_0, SCM s_1)
{
#define FUNC_NAME "handle-make-monomer-search"
  char *arg1 = (char *) 0 ;
  GtkWidget *arg2 = (GtkWidget *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (GtkWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkWidget, 2, 0);
  }
  result = (int)handle_make_monomer_search((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_script (SCM s_0)
{
#define FUNC_NAME "run-script"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  run_script((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_guile_script (SCM s_0)
{
#define FUNC_NAME "run-guile-script"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  run_guile_script((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_python_script (SCM s_0)
{
#define FUNC_NAME "run-python-script"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  run_python_script((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_regularize (SCM s_0)
{
#define FUNC_NAME "do-regularize"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_regularize(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_refine (SCM s_0)
{
#define FUNC_NAME "do-refine"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_refine(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_planar_peptide_restraints ()
{
#define FUNC_NAME "add-planar-peptide-restraints"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_planar_peptide_restraints();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_planar_peptide_restraints ()
{
#define FUNC_NAME "remove-planar-peptide-restraints"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  remove_planar_peptide_restraints();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_omega_torsion_restriants ()
{
#define FUNC_NAME "add-omega-torsion-restriants"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_omega_torsion_restriants();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_omega_torsion_restriants ()
{
#define FUNC_NAME "remove-omega-torsion-restriants"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  remove_omega_torsion_restriants();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refinement_immediate_replacement (SCM s_0)
{
#define FUNC_NAME "set-refinement-immediate-replacement"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_refinement_immediate_replacement(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refinement_immediate_replacement_state ()
{
#define FUNC_NAME "refinement-immediate-replacement-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)refinement_immediate_replacement_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_residue_selection_flash_frames_number (SCM s_0)
{
#define FUNC_NAME "set-residue-selection-flash-frames-number"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_residue_selection_flash_frames_number(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_accept_regularizement ()
{
#define FUNC_NAME "accept-regularizement"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  accept_regularizement();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_up_moving_atoms ()
{
#define FUNC_NAME "clear-up-moving-atoms"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_up_moving_atoms();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_moving_atoms_object ()
{
#define FUNC_NAME "clear-moving-atoms-object"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_moving_atoms_object();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_option_menu_with_refine_options (SCM s_0)
{
#define FUNC_NAME "fill-option-menu-with-refine-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_option_menu_with_refine_options(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_refine_params_dialog ()
{
#define FUNC_NAME "wrapped-create-refine-params-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_refine_params_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_torsions_toggle (SCM s_0)
{
#define FUNC_NAME "do-torsions-toggle"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  do_torsions_toggle(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_peptide_torsions_toggle ()
{
#define FUNC_NAME "do-peptide-torsions-toggle"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_peptide_torsions_toggle();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refine_with_torsion_restraints (SCM s_0)
{
#define FUNC_NAME "set-refine-with-torsion-restraints"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_refine_with_torsion_restraints(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refine_params_toggle_buttons (SCM s_0)
{
#define FUNC_NAME "set-refine-params-toggle-buttons"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_refine_params_toggle_buttons(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refine_params_phi_psi_restraints_type (SCM s_0)
{
#define FUNC_NAME "set-refine-params-phi-psi-restraints-type"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_refine_params_phi_psi_restraints_type(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_matrix (SCM s_0)
{
#define FUNC_NAME "set-matrix"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_matrix(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_matrix_state ()
{
#define FUNC_NAME "matrix-state"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)matrix_state();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refine_auto_range_step (SCM s_0)
{
#define FUNC_NAME "set-refine-auto-range-step"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_refine_auto_range_step(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refine_max_residues (SCM s_0)
{
#define FUNC_NAME "set-refine-max-residues"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_refine_max_residues(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refine_zone_atom_index_define (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "refine-zone-atom-index-define"
  int arg1 ;
  int arg2 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  refine_zone_atom_index_define(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refine_zone (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "refine-zone"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  refine_zone(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refine_zone_with_full_residue_spec (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "refine-zone-with-full-residue-spec"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free6 = 0 ;
  int must_free7 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  {
    arg7 = (char *)SWIG_scm2str(s_6);
    must_free7 = 1;
  }
  refine_zone_with_full_residue_spec(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5,(char const *)arg6,(char const *)arg7);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free6 && arg6) SWIG_free(arg6);
  if (must_free7 && arg7) SWIG_free(arg7);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refine_auto_range (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "refine-auto-range"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  refine_auto_range(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_regularize_zone (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "regularize-zone"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  regularize_zone(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dragged_refinement_steps_per_frame (SCM s_0)
{
#define FUNC_NAME "set-dragged-refinement-steps-per-frame"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_dragged_refinement_steps_per_frame(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_dragged_refinement_steps_per_frame ()
{
#define FUNC_NAME "dragged-refinement-steps-per-frame"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)dragged_refinement_steps_per_frame();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_refinement_refine_per_frame (SCM s_0)
{
#define FUNC_NAME "set-refinement-refine-per-frame"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_refinement_refine_per_frame(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_refinement_refine_per_frame_state ()
{
#define FUNC_NAME "refinement-refine-per-frame-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)refinement_refine_per_frame_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_fix_chiral_volumes_before_refinement (SCM s_0)
{
#define FUNC_NAME "set-fix-chiral-volumes-before-refinement"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_fix_chiral_volumes_before_refinement(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_check_chiral_volumes (SCM s_0)
{
#define FUNC_NAME "check-chiral-volumes"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  check_chiral_volumes(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_check_chiral_volumes_from_widget (SCM s_0)
{
#define FUNC_NAME "check-chiral-volumes-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  check_chiral_volumes_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_chiral_volume_molecule_option_menu (SCM s_0)
{
#define FUNC_NAME "fill-chiral-volume-molecule-option-menu"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_chiral_volume_molecule_option_menu(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chiral_volume_molecule_option_menu_item_select (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chiral-volume-molecule-option-menu-item-select"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  chiral_volume_molecule_option_menu_item_select(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_chiral_volume_errors_dialog (SCM s_0)
{
#define FUNC_NAME "set-show-chiral-volume-errors-dialog"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_chiral_volume_errors_dialog(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_secondary_structure_restraints_type (SCM s_0)
{
#define FUNC_NAME "set-secondary-structure-restraints-type"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_secondary_structure_restraints_type(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_secondary_structure_restraints_type ()
{
#define FUNC_NAME "secondary-structure-restraints-type"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)secondary_structure_restraints_type();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_imol_refinement_map ()
{
#define FUNC_NAME "imol-refinement-map"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)imol_refinement_map();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_imol_refinement_map (SCM s_0)
{
#define FUNC_NAME "set-imol-refinement-map"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)set_imol_refinement_map(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_does_residue_exist_p (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "does-residue-exist-p"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (int)does_residue_exist_p(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fit_residue_range_to_map_by_simplex (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "fit-residue-range-to-map-by-simplex"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  fit_residue_range_to_map_by_simplex(arg1,arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_score_residue_range_fit_to_map (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "score-residue-range-fit-to-map"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  float result;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  result = (float)score_residue_range_fit_to_map(arg1,arg2,arg3,arg4,arg5,arg6);
  {
    gswig_result = scm_make_real(result);
  }
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fix_nomenclature_errors (SCM s_0)
{
#define FUNC_NAME "fix-nomenclature-errors"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)fix_nomenclature_errors(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_move_molecule_here_dialog ()
{
#define FUNC_NAME "wrapped-create-move-molecule-here-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_move_molecule_here_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_move_molecule_here_by_widget (SCM s_0)
{
#define FUNC_NAME "move-molecule-here-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  move_molecule_here_by_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_output_atom_info_as_text (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "output-atom-info-as-text"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  int must_free6 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  output_atom_info_as_text(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  if (must_free6 && arg6) SWIG_free(arg6);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_residue_info_dialog ()
{
#define FUNC_NAME "do-residue-info-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_residue_info_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_output_residue_info_dialog (SCM s_0, SCM s_1)
{
#define FUNC_NAME "output-residue-info-dialog"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  output_residue_info_dialog(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_residue_info_dialog (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "residue-info-dialog"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  residue_info_dialog(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_residue_info_dialog_is_displayed ()
{
#define FUNC_NAME "residue-info-dialog-is-displayed"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)residue_info_dialog_is_displayed();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_output_residue_info_as_text (SCM s_0, SCM s_1)
{
#define FUNC_NAME "output-residue-info-as-text"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  output_residue_info_as_text(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_residue_info_changes (SCM s_0)
{
#define FUNC_NAME "apply-residue-info-changes"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  apply_residue_info_changes(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_distance_define ()
{
#define FUNC_NAME "do-distance-define"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_distance_define();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_angle_define ()
{
#define FUNC_NAME "do-angle-define"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_angle_define();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_torsion_define ()
{
#define FUNC_NAME "do-torsion-define"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_torsion_define();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_residue_info_apply_all_checkbutton_toggled ()
{
#define FUNC_NAME "residue-info-apply-all-checkbutton-toggled"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  residue_info_apply_all_checkbutton_toggled();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_residue_info_dialog ()
{
#define FUNC_NAME "wrapped-create-residue-info-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_residue_info_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_residue_info_edit_list ()
{
#define FUNC_NAME "clear-residue-info-edit-list"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_residue_info_edit_list();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_residue_info_release_memory (SCM s_0)
{
#define FUNC_NAME "residue-info-release-memory"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  residue_info_release_memory(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_residue_info_widget ()
{
#define FUNC_NAME "unset-residue-info-widget"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_residue_info_widget();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_simple_distances ()
{
#define FUNC_NAME "clear-simple-distances"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_simple_distances();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_last_simple_distance ()
{
#define FUNC_NAME "clear-last-simple-distance"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_last_simple_distance();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_store_geometry_dialog (SCM s_0)
{
#define FUNC_NAME "store-geometry-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  store_geometry_dialog(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_environment_widget (SCM s_0)
{
#define FUNC_NAME "fill-environment-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_environment_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_environment_settings (SCM s_0)
{
#define FUNC_NAME "execute-environment-settings"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_environment_settings(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_toggle_environment_show_distances (SCM s_0)
{
#define FUNC_NAME "toggle-environment-show-distances"
  GtkToggleButton *arg1 = (GtkToggleButton *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkToggleButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkToggleButton, 1, 0);
  }
  toggle_environment_show_distances(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_environment_distances (SCM s_0)
{
#define FUNC_NAME "set-show-environment-distances"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_environment_distances(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_environment_distances_state ()
{
#define FUNC_NAME "show-environment-distances-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)show_environment_distances_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_environment_distances_distance_limits (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-environment-distances-distance-limits"
  float arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_environment_distances_distance_limits(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_pointer_distances_widget (SCM s_0)
{
#define FUNC_NAME "fill-pointer-distances-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_pointer_distances_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_pointer_distances_settings (SCM s_0)
{
#define FUNC_NAME "execute-pointer-distances-settings"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_pointer_distances_settings(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_toggle_pointer_distances_show_distances (SCM s_0)
{
#define FUNC_NAME "toggle-pointer-distances-show-distances"
  GtkToggleButton *arg1 = (GtkToggleButton *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkToggleButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkToggleButton, 1, 0);
  }
  toggle_pointer_distances_show_distances(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_pointer_distances (SCM s_0)
{
#define FUNC_NAME "set-show-pointer-distances"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_pointer_distances(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_scale_zoom (SCM s_0)
{
#define FUNC_NAME "scale-zoom"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  scale_zoom(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_scale_zoom_internal (SCM s_0)
{
#define FUNC_NAME "scale-zoom-internal"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  scale_zoom_internal(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_zoom_factor ()
{
#define FUNC_NAME "zoom-factor"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)zoom_factor();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_smooth_scroll_do_zoom (SCM s_0)
{
#define FUNC_NAME "set-smooth-scroll-do-zoom"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_smooth_scroll_do_zoom(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_smooth_scroll_do_zoom ()
{
#define FUNC_NAME "smooth-scroll-do-zoom"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)smooth_scroll_do_zoom();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_smooth_scroll_zoom_limit ()
{
#define FUNC_NAME "smooth-scroll-zoom-limit"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)smooth_scroll_zoom_limit();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_smooth_scroll_zoom_limit (SCM s_0)
{
#define FUNC_NAME "set-smooth-scroll-zoom-limit"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_smooth_scroll_zoom_limit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_zoom_adjustment (SCM s_0)
{
#define FUNC_NAME "set-zoom-adjustment"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_zoom_adjustment(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_zoom (SCM s_0)
{
#define FUNC_NAME "set-zoom"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_zoom(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_cns_data_file (SCM s_0, SCM s_1)
{
#define FUNC_NAME "handle-cns-data-file"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)handle_cns_data_file((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_cns_data_file_with_cell (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8)
{
#define FUNC_NAME "handle-cns-data-file-with-cell"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  char *arg9 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  int must_free9 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = (char *)SWIG_scm2str(s_8);
    must_free9 = 1;
  }
  result = (int)handle_cns_data_file_with_cell((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free9 && arg9) SWIG_free(arg9);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_auto_read_cif_data_with_phases (SCM s_0)
{
#define FUNC_NAME "auto-read-cif-data-with-phases"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)auto_read_cif_data_with_phases((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_with_phases_sigmaa (SCM s_0)
{
#define FUNC_NAME "read-cif-data-with-phases-sigmaa"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_cif_data_with_phases_sigmaa((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_with_phases_diff_sigmaa (SCM s_0)
{
#define FUNC_NAME "read-cif-data-with-phases-diff-sigmaa"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_cif_data_with_phases_diff_sigmaa((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data (SCM s_0, SCM s_1)
{
#define FUNC_NAME "read-cif-data"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)read_cif_data((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_2fofc_map (SCM s_0, SCM s_1)
{
#define FUNC_NAME "read-cif-data-2fofc-map"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)read_cif_data_2fofc_map((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_fofc_map (SCM s_0, SCM s_1)
{
#define FUNC_NAME "read-cif-data-fofc-map"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)read_cif_data_fofc_map((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_with_phases_fo_fc (SCM s_0)
{
#define FUNC_NAME "read-cif-data-with-phases-fo-fc"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_cif_data_with_phases_fo_fc((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_with_phases_2fo_fc (SCM s_0)
{
#define FUNC_NAME "read-cif-data-with-phases-2fo-fc"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_cif_data_with_phases_2fo_fc((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_with_phases_nfo_fc (SCM s_0, SCM s_1)
{
#define FUNC_NAME "read-cif-data-with-phases-nfo-fc"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)read_cif_data_with_phases_nfo_fc((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_data_with_phases_fo_alpha_calc (SCM s_0)
{
#define FUNC_NAME "read-cif-data-with-phases-fo-alpha-calc"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_cif_data_with_phases_fo_alpha_calc((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_cif_dictionary (SCM s_0)
{
#define FUNC_NAME "handle-cif-dictionary"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  handle_cif_dictionary((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_cif_dictionary (SCM s_0)
{
#define FUNC_NAME "read-cif-dictionary"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  read_cif_dictionary((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_write_connectivity (SCM s_0, SCM s_1)
{
#define FUNC_NAME "write-connectivity"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)write_connectivity((char const *)arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_import_all_refmac_cifs ()
{
#define FUNC_NAME "import-all-refmac-cifs"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  import_all_refmac_cifs();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_read_shelx_ins_file (SCM s_0)
{
#define FUNC_NAME "read-shelx-ins-file"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)read_shelx_ins_file((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_write_shelx_ins_file (SCM s_0, SCM s_1)
{
#define FUNC_NAME "write-shelx-ins-file"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)write_shelx_ins_file(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_shelx_fcf_file_internal (SCM s_0)
{
#define FUNC_NAME "handle-shelx-fcf-file-internal"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)handle_shelx_fcf_file_internal((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chain_id_for_shelxl_residue_number (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chain-id-for-shelxl-residue-number"
  int arg1 ;
  int arg2 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)chain_id_for_shelxl_residue_number(arg1,arg2);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_is_shelx_molecule (SCM s_0)
{
#define FUNC_NAME "is-shelx-molecule"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)is_shelx_molecule(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_shelx_string_to_molecule (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-shelx-string-to-molecule"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  add_shelx_string_to_molecule(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_deviant_geometry (SCM s_0)
{
#define FUNC_NAME "deviant-geometry"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  deviant_geometry(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_is_valid_model_molecule (SCM s_0)
{
#define FUNC_NAME "is-valid-model-molecule"
  int arg1 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (short)is_valid_model_molecule(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_is_valid_map_molecule (SCM s_0)
{
#define FUNC_NAME "is-valid-map-molecule"
  int arg1 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (short)is_valid_map_molecule(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_free_geometry_graph (SCM s_0)
{
#define FUNC_NAME "free-geometry-graph"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  free_geometry_graph(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_geometry_graph (SCM s_0)
{
#define FUNC_NAME "unset-geometry-graph"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  unset_geometry_graph(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_on_validation_graph_mol_options (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-on-validation-graph-mol-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  add_on_validation_graph_mol_options(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_my_delete_validaton_graph_mol_option (SCM s_0, SCM s_1)
{
#define FUNC_NAME "my-delete-validaton-graph-mol-option"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  my_delete_validaton_graph_mol_option(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_validation_graph_b_factor_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "validation-graph-b-factor-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  validation_graph_b_factor_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_validation_graph_geometry_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "validation-graph-geometry-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  validation_graph_geometry_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_validation_graph_omega_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "validation-graph-omega-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  validation_graph_omega_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_validation_graph_rotamer_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "validation-graph-rotamer-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  validation_graph_rotamer_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_validation_graph_density_fit_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "validation-graph-density-fit-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  validation_graph_density_fit_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_gln_and_asn_b_factor_outlier_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "gln-and-asn-b-factor-outlier-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  gln_and_asn_b_factor_outlier_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_validation_graph_ncs_diffs_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "validation-graph-ncs-diffs-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  validation_graph_ncs_diffs_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_probe_mol_selector_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "probe-mol-selector-activate"
  GtkMenuItem *arg1 = (GtkMenuItem *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkMenuItem *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkMenuItem, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  probe_mol_selector_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_difference_map_peaks (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "difference-map-peaks"
  int arg1 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  difference_map_peaks(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_difference_map_peaks_by_widget (SCM s_0)
{
#define FUNC_NAME "difference-map-peaks-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  difference_map_peaks_by_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_difference_map_peaks_widget (SCM s_0)
{
#define FUNC_NAME "set-difference-map-peaks-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_difference_map_peaks_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_diff_map_peaks ()
{
#define FUNC_NAME "clear-diff-map-peaks"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_diff_map_peaks();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_generate_diff_map_peaks_dialog ()
{
#define FUNC_NAME "wrapped-create-generate-diff-map-peaks-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_generate_diff_map_peaks_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_gln_asn_b_factor_outliers (SCM s_0)
{
#define FUNC_NAME "gln-asn-b-factor-outliers"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  gln_asn_b_factor_outliers(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_ramachandran_plot (SCM s_0)
{
#define FUNC_NAME "do-ramachandran-plot"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_ramachandran_plot(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_on_rama_choices ()
{
#define FUNC_NAME "add-on-rama-choices"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_on_rama_choices();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ramachandran_plot_contour_levels (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-ramachandran-plot-contour-levels"
  float arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_ramachandran_plot_contour_levels(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ramachandran_plot_background_block_size (SCM s_0)
{
#define FUNC_NAME "set-ramachandran-plot-background-block-size"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_ramachandran_plot_background_block_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_my_delete_ramachandran_mol_option (SCM s_0, SCM s_1)
{
#define FUNC_NAME "my-delete-ramachandran-mol-option"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  void *arg2 = (void *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (void *)SWIG_MustGetPtr(s_1, NULL, 2, 0);
  }
  my_delete_ramachandran_mol_option(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dynarama_is_displayed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-dynarama-is-displayed"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_dynarama_is_displayed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_dynarama_is_displayed_state (SCM s_0)
{
#define FUNC_NAME "dynarama-is-displayed-state"
  int arg1 ;
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (GtkWidget *)dynarama_is_displayed_state(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_mol_from_dynarama (SCM s_0)
{
#define FUNC_NAME "get-mol-from-dynarama"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)get_mol_from_dynarama(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_moving_atoms (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-moving-atoms"
  double arg1 ;
  double arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_moving_atoms(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_accept_phi_psi_moving_atoms ()
{
#define FUNC_NAME "accept-phi-psi-moving-atoms"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  accept_phi_psi_moving_atoms();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_edit_phi_psi (SCM s_0)
{
#define FUNC_NAME "setup-edit-phi-psi"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_edit_phi_psi(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_dynamic_distances (SCM s_0)
{
#define FUNC_NAME "setup-dynamic-distances"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_dynamic_distances(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_destroy_edit_backbone_rama_plot ()
{
#define FUNC_NAME "destroy-edit-backbone-rama-plot"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  destroy_edit_backbone_rama_plot();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ramachandran_plot_differences (SCM s_0, SCM s_1)
{
#define FUNC_NAME "ramachandran-plot-differences"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  ramachandran_plot_differences(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ramachandran_plot_differences_by_chain (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "ramachandran-plot-differences-by-chain"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  ramachandran_plot_differences_by_chain(arg1,arg2,(char const *)arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_ramachandran_plot_differences_dialog ()
{
#define FUNC_NAME "wrapped-ramachandran-plot-differences-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_ramachandran_plot_differences_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_ramachandran_plot_differences_by_widget (SCM s_0)
{
#define FUNC_NAME "do-ramachandran-plot-differences-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)do_ramachandran_plot_differences_by_widget(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ramachandran_plot_differences_option_menu_with_chain_options (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fill-ramachandran-plot-differences-option-menu-with-chain-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  fill_ramachandran_plot_differences_option_menu_with_chain_options(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ramachandran_plot_differences_mol_option_menu_activate_first (SCM s_0, SCM s_1)
{
#define FUNC_NAME "ramachandran-plot-differences-mol-option-menu-activate-first"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  ramachandran_plot_differences_mol_option_menu_activate_first(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ramachandran_plot_differences_mol_option_menu_activate_second (SCM s_0, SCM s_1)
{
#define FUNC_NAME "ramachandran-plot-differences-mol-option-menu-activate-second"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  ramachandran_plot_differences_mol_option_menu_activate_second(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ramachandran_plot_differences_chain_option_menu_activate_first (SCM s_0, SCM s_1)
{
#define FUNC_NAME "ramachandran-plot-differences-chain-option-menu-activate-first"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  ramachandran_plot_differences_chain_option_menu_activate_first(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ramachandran_plot_differences_chain_option_menu_activate_second (SCM s_0, SCM s_1)
{
#define FUNC_NAME "ramachandran-plot-differences-chain-option-menu-activate-second"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  ramachandran_plot_differences_chain_option_menu_activate_second(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_sequence_view (SCM s_0)
{
#define FUNC_NAME "do-sequence-view"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_sequence_view(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_on_sequence_view_choices ()
{
#define FUNC_NAME "add-on-sequence-view-choices"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_on_sequence_view_choices();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_sequence_view_is_displayed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-sequence-view-is-displayed"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_sequence_view_is_displayed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_peptide_carbonyl_by (SCM s_0)
{
#define FUNC_NAME "change-peptide-carbonyl-by"
  double arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  change_peptide_carbonyl_by(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_peptide_peptide_by (SCM s_0)
{
#define FUNC_NAME "change-peptide-peptide-by"
  double arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  change_peptide_peptide_by(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_setup_backbone_torsion_edit (SCM s_0, SCM s_1)
{
#define FUNC_NAME "execute-setup-backbone-torsion-edit"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  execute_setup_backbone_torsion_edit(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_backbone_torsion_edit (SCM s_0)
{
#define FUNC_NAME "setup-backbone-torsion-edit"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_backbone_torsion_edit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_backbone_torsion_peptide_button_start_pos (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-backbone-torsion-peptide-button-start-pos"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_backbone_torsion_peptide_button_start_pos(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_peptide_peptide_by_current_button_pos (SCM s_0, SCM s_1)
{
#define FUNC_NAME "change-peptide-peptide-by-current-button-pos"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  change_peptide_peptide_by_current_button_pos(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_backbone_torsion_carbonyl_button_start_pos (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-backbone-torsion-carbonyl-button-start-pos"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_backbone_torsion_carbonyl_button_start_pos(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_change_peptide_carbonyl_by_current_button_pos (SCM s_0, SCM s_1)
{
#define FUNC_NAME "change-peptide-carbonyl-by-current-button-pos"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  change_peptide_carbonyl_by_current_button_pos(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_atom_label (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "add-atom-label"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (int)add_atom_label(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_atom_label (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "remove-atom-label"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (int)remove_atom_label(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_all_atom_labels ()
{
#define FUNC_NAME "remove-all-atom-labels"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  remove_all_atom_labels();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_label_on_recentre_flag (SCM s_0)
{
#define FUNC_NAME "set-label-on-recentre-flag"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_label_on_recentre_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_centre_atom_label_status ()
{
#define FUNC_NAME "centre-atom-label-status"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)centre_atom_label_status();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_brief_atom_labels (SCM s_0)
{
#define FUNC_NAME "set-brief-atom-labels"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_brief_atom_labels(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_brief_atom_labels_state ()
{
#define FUNC_NAME "brief-atom-labels-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)brief_atom_labels_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotate_y_scene (SCM s_0, SCM s_1)
{
#define FUNC_NAME "rotate-y-scene"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  rotate_y_scene(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotate_x_scene (SCM s_0, SCM s_1)
{
#define FUNC_NAME "rotate-x-scene"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  rotate_x_scene(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotate_z_scene (SCM s_0, SCM s_1)
{
#define FUNC_NAME "rotate-z-scene"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  rotate_z_scene(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_spin_zoom_trans (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "spin-zoom-trans"
  int arg1 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  spin_zoom_trans(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_view_here (SCM s_0)
{
#define FUNC_NAME "add-view-here"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)add_view_here((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_view_raw (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8)
{
#define FUNC_NAME "add-view-raw"
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  char *arg9 = (char *) 0 ;
  int result;
  int must_free9 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = (char *)SWIG_scm2str(s_8);
    must_free9 = 1;
  }
  result = (int)add_view_raw(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free9 && arg9) SWIG_free(arg9);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_play_views ()
{
#define FUNC_NAME "play-views"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  play_views();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_this_view ()
{
#define FUNC_NAME "remove-this-view"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  remove_this_view();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_named_view (SCM s_0)
{
#define FUNC_NAME "remove-named-view"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)remove_named_view((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_view (SCM s_0)
{
#define FUNC_NAME "remove-view"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  remove_view(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_first_view (SCM s_0)
{
#define FUNC_NAME "go-to-first-view"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)go_to_first_view(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_view_number (SCM s_0, SCM s_1)
{
#define FUNC_NAME "go-to-view-number"
  int arg1 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)go_to_view_number(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_spin_view (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "add-spin-view"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  result = (int)add_spin_view((char const *)arg1,arg2,arg3);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_view_description (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-view-description"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  add_view_description(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_action_view (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-action-view"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)add_action_view((char const *)arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_insert_action_view_after_view (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "insert-action-view-after-view"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  result = (int)insert_action_view_after_view(arg1,(char const *)arg2,(char const *)arg3);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_n_views ()
{
#define FUNC_NAME "n-views"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)n_views();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_save_views (SCM s_0)
{
#define FUNC_NAME "save-views"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  save_views((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_views_play_speed ()
{
#define FUNC_NAME "views-play-speed"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)views_play_speed();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_views_play_speed (SCM s_0)
{
#define FUNC_NAME "set-views-play-speed"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_views_play_speed(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_view_name (SCM s_0)
{
#define FUNC_NAME "view-name"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)view_name(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_view_description (SCM s_0)
{
#define FUNC_NAME "view-description"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)view_description(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_go_to_view (SCM s_0)
{
#define FUNC_NAME "go-to-view"
  SCM arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  go_to_view(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_all_views ()
{
#define FUNC_NAME "clear-all-views"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_all_views();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_movie_file_name_prefix (SCM s_0)
{
#define FUNC_NAME "set-movie-file-name-prefix"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_movie_file_name_prefix((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_movie_frame_number (SCM s_0)
{
#define FUNC_NAME "set-movie-frame-number"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_movie_frame_number(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_movie_file_name_prefix ()
{
#define FUNC_NAME "movie-file-name-prefix"
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (SCM)movie_file_name_prefix();
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_movie_frame_number ()
{
#define FUNC_NAME "movie-frame-number"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)movie_frame_number();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_make_movie_mode (SCM s_0)
{
#define FUNC_NAME "set-make-movie-mode"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_make_movie_mode(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_background_colour (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-background-colour"
  double arg1 ;
  double arg2 ;
  double arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  set_background_colour(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_background_is_black_p ()
{
#define FUNC_NAME "background-is-black-p"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)background_is_black_p();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_acceptable_fit_fraction (SCM s_0)
{
#define FUNC_NAME "set-ligand-acceptable-fit-fraction"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_ligand_acceptable_fit_fraction(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_cluster_sigma_level (SCM s_0)
{
#define FUNC_NAME "set-ligand-cluster-sigma-level"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_ligand_cluster_sigma_level(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_flexible_ligand_n_samples (SCM s_0)
{
#define FUNC_NAME "set-ligand-flexible-ligand-n-samples"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_ligand_flexible_ligand_n_samples(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_verbose_reporting (SCM s_0)
{
#define FUNC_NAME "set-ligand-verbose-reporting"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_ligand_verbose_reporting(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_find_ligand_n_top_ligands (SCM s_0)
{
#define FUNC_NAME "set-find-ligand-n-top-ligands"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_find_ligand_n_top_ligands(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_find_ligand_mask_waters (SCM s_0)
{
#define FUNC_NAME "set-find-ligand-mask-waters"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_find_ligand_mask_waters(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_cluster_sigma_level_from_widget (SCM s_0)
{
#define FUNC_NAME "set-ligand-cluster-sigma-level-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_ligand_cluster_sigma_level_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_search_protein_molecule (SCM s_0)
{
#define FUNC_NAME "set-ligand-search-protein-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_ligand_search_protein_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_search_map_molecule (SCM s_0)
{
#define FUNC_NAME "set-ligand-search-map-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_ligand_search_map_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ligand_search_ligand_molecule (SCM s_0)
{
#define FUNC_NAME "add-ligand-search-ligand-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  add_ligand_search_ligand_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ligand_search_wiggly_ligand_molecule (SCM s_0)
{
#define FUNC_NAME "add-ligand-search-wiggly-ligand-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  add_ligand_search_wiggly_ligand_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_ligand_search ()
{
#define FUNC_NAME "execute-ligand-search"
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (SCM)execute_ligand_search();
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_free_ligand_search_user_data (SCM s_0)
{
#define FUNC_NAME "free-ligand-search-user-data"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  free_ligand_search_user_data(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ligand_clear_ligands ()
{
#define FUNC_NAME "add-ligand-clear-ligands"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  add_ligand_clear_ligands();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ligand_expert ()
{
#define FUNC_NAME "ligand-expert"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  ligand_expert();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_find_ligands_dialog ()
{
#define FUNC_NAME "do-find-ligands-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_find_ligands_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_dialog (SCM s_0)
{
#define FUNC_NAME "fill-ligands-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)fill_ligands_dialog(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_dialog_map_bits (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fill-ligands-dialog-map-bits"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  short arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)fill_ligands_dialog_map_bits(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_dialog_protein_bits (SCM s_0)
{
#define FUNC_NAME "fill-ligands-dialog-protein-bits"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)fill_ligands_dialog_protein_bits(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_dialog_ligands_bits (SCM s_0)
{
#define FUNC_NAME "fill-ligands-dialog-ligands-bits"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)fill_ligands_dialog_ligands_bits(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_find_ligand_many_atoms_in_ligands (SCM s_0)
{
#define FUNC_NAME "do-find-ligand-many-atoms-in-ligands"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  do_find_ligand_many_atoms_in_ligands(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_dialog_map_bits_by_dialog_name (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "fill-ligands-dialog-map-bits-by-dialog-name"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  char *arg2 = (char *) 0 ;
  short arg3 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  result = (int)fill_ligands_dialog_map_bits_by_dialog_name(arg1,(char const *)arg2,arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_dialog_protein_bits_by_dialog_name (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fill-ligands-dialog-protein-bits-by-dialog-name"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)fill_ligands_dialog_protein_bits_by_dialog_name(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_vbox_with_coords_options_by_dialog_name (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "fill-vbox-with-coords-options-by-dialog-name"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  char *arg2 = (char *) 0 ;
  short arg3 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  result = (int)fill_vbox_with_coords_options_by_dialog_name(arg1,(char const *)arg2,arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_sigma_level_entry (SCM s_0)
{
#define FUNC_NAME "fill-ligands-sigma-level-entry"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_ligands_sigma_level_entry(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_ligands_expert_options (SCM s_0)
{
#define FUNC_NAME "fill-ligands-expert-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_ligands_expert_options(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_expert_options_from_widget (SCM s_0)
{
#define FUNC_NAME "set-ligand-expert-options-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_ligand_expert_options_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_overlap_ligands (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "overlap-ligands"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  SCM result;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)overlap_ligands(arg1,arg2,(char const *)arg3,arg4);
  gswig_result=result;
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_analyse_ligand_differences (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "analyse-ligand-differences"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  SCM result;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)analyse_ligand_differences(arg1,arg2,(char const *)arg3,arg4);
  gswig_result=result;
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_get_mols_ligand_search (SCM s_0)
{
#define FUNC_NAME "execute-get-mols-ligand-search"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_get_mols_ligand_search(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_free_blob_dialog_memory (SCM s_0)
{
#define FUNC_NAME "free-blob-dialog-memory"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  free_blob_dialog_memory(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_renumber_waters (SCM s_0)
{
#define FUNC_NAME "renumber-waters"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  renumber_waters(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_find_waters_dialog (SCM s_0)
{
#define FUNC_NAME "fill-find-waters-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_find_waters_dialog(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_find_waters (SCM s_0)
{
#define FUNC_NAME "execute-find-waters"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_find_waters(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_find_waters_real (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "execute-find-waters-real"
  int arg1 ;
  int arg2 ;
  short arg3 ;
  float arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  execute_find_waters_real(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_find_waters (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "find-waters"
  int arg1 ;
  int arg2 ;
  short arg3 ;
  float arg4 ;
  short arg5 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2short(s_4, SCM_ARG1, FUNC_NAME);
  }
  find_waters(arg1,arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_text_for_find_waters_sigma_cut_off ()
{
#define FUNC_NAME "get-text-for-find-waters-sigma-cut-off"
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (char *)get_text_for_find_waters_sigma_cut_off();
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_value_for_find_waters_sigma_cut_off (SCM s_0)
{
#define FUNC_NAME "set-value-for-find-waters-sigma-cut-off"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_value_for_find_waters_sigma_cut_off(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_big_blob_button_clicked (SCM s_0, SCM s_1)
{
#define FUNC_NAME "on-big-blob-button-clicked"
  GtkButton *arg1 = (GtkButton *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkButton, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  on_big_blob_button_clicked(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_water_spherical_variance_limit (SCM s_0)
{
#define FUNC_NAME "set-ligand-water-spherical-variance-limit"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_ligand_water_spherical_variance_limit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_water_to_protein_distance_limits (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-ligand-water-to-protein-distance-limits"
  float arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_ligand_water_to_protein_distance_limits(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ligand_water_n_cycles (SCM s_0)
{
#define FUNC_NAME "set-ligand-water-n-cycles"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_ligand_water_n_cycles(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_write_peaksearched_waters ()
{
#define FUNC_NAME "set-write-peaksearched-waters"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_write_peaksearched_waters();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_find_blobs (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "execute-find-blobs"
  int arg1 ;
  int arg2 ;
  float arg3 ;
  short arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2short(s_3, SCM_ARG1, FUNC_NAME);
  }
  execute_find_blobs(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_find_blobs_from_widget (SCM s_0)
{
#define FUNC_NAME "execute-find-blobs-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_find_blobs_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_unmodelled_blobs_dialog ()
{
#define FUNC_NAME "wrapped-create-unmodelled-blobs-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_unmodelled_blobs_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_default_bond_thickness (SCM s_0)
{
#define FUNC_NAME "set-default-bond-thickness"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_default_bond_thickness(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_bond_thickness (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-bond-thickness"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_bond_thickness(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_bond_thickness_intermediate_atoms (SCM s_0)
{
#define FUNC_NAME "set-bond-thickness-intermediate-atoms"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_bond_thickness_intermediate_atoms(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_unbonded_atom_star_size (SCM s_0)
{
#define FUNC_NAME "set-unbonded-atom-star-size"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_unbonded_atom_star_size(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_draw_zero_occ_markers (SCM s_0)
{
#define FUNC_NAME "set-draw-zero-occ-markers"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_draw_zero_occ_markers(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_draw_hydrogens (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-draw-hydrogens"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_draw_hydrogens(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_ca_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-ca-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_ca_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_ca_plus_ligands_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-ca-plus-ligands-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_ca_plus_ligands_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_bonds_no_waters_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-bonds-no-waters-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_bonds_no_waters_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_bonds_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-bonds-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_bonds_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_ca_plus_ligands_sec_struct_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-ca-plus-ligands-sec-struct-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_ca_plus_ligands_sec_struct_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_sec_struct_bonds_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-sec-struct-bonds-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_sec_struct_bonds_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_rainbow_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-rainbow-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_rainbow_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_b_factor_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-b-factor-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_b_factor_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_to_occupancy_representation (SCM s_0)
{
#define FUNC_NAME "graphics-to-occupancy-representation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  graphics_to_occupancy_representation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_graphics_molecule_bond_type (SCM s_0)
{
#define FUNC_NAME "graphics-molecule-bond-type"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)graphics_molecule_bond_type(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_b_factor_bonds_scale_factor (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-b-factor-bonds-scale-factor"
  int arg1 ;
  float arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  result = (int)set_b_factor_bonds_scale_factor(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_bond_parameters_dialog ()
{
#define FUNC_NAME "wrapped-create-bond-parameters-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_bond_parameters_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_bond_parameters (SCM s_0)
{
#define FUNC_NAME "apply-bond-parameters"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  apply_bond_parameters(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_ball_and_stick (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "make-ball-and-stick"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  result = (int)make_ball_and_stick(arg1,(char const *)arg2,arg3,arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_ball_and_stick (SCM s_0)
{
#define FUNC_NAME "clear-ball-and-stick"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)clear_ball_and_stick(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_dots (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "dots"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (int)dots(arg1,(char const *)arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_dots (SCM s_0, SCM s_1)
{
#define FUNC_NAME "clear-dots"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  clear_dots(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_n_dots_sets (SCM s_0)
{
#define FUNC_NAME "n-dots-sets"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)n_dots_sets(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_pepflip (SCM s_0)
{
#define FUNC_NAME "do-pepflip"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_pepflip(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_pepflip (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "pepflip"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  pepflip(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_rigid_body_refine (SCM s_0)
{
#define FUNC_NAME "do-rigid-body-refine"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_rigid_body_refine(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rigid_body_refine_zone (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "rigid-body-refine-zone"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  rigid_body_refine_zone(arg1,arg2,(char const *)arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_rigid_body_refine (SCM s_0)
{
#define FUNC_NAME "execute-rigid-body-refine"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  execute_rigid_body_refine(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rigid_body_fit_acceptable_fit_fraction (SCM s_0)
{
#define FUNC_NAME "set-rigid-body-fit-acceptable-fit-fraction"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_rigid_body_fit_acceptable_fit_fraction(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_toggle_dynamic_map_display_size ()
{
#define FUNC_NAME "toggle-dynamic-map-display-size"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  toggle_dynamic_map_display_size();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_toggle_dynamic_map_sampling ()
{
#define FUNC_NAME "toggle-dynamic-map-sampling"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  toggle_dynamic_map_sampling();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_dynamic_map_sampling_checkbutton (SCM s_0)
{
#define FUNC_NAME "set-map-dynamic-map-sampling-checkbutton"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_map_dynamic_map_sampling_checkbutton(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_dynamic_map_display_size_checkbutton (SCM s_0)
{
#define FUNC_NAME "set-map-dynamic-map-display-size-checkbutton"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_map_dynamic_map_display_size_checkbutton(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dynamic_map_size_display_on ()
{
#define FUNC_NAME "set-dynamic-map-size-display-on"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_dynamic_map_size_display_on();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dynamic_map_size_display_off ()
{
#define FUNC_NAME "set-dynamic-map-size-display-off"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_dynamic_map_size_display_off();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dynamic_map_sampling_on ()
{
#define FUNC_NAME "set-dynamic-map-sampling-on"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_dynamic_map_sampling_on();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dynamic_map_sampling_off ()
{
#define FUNC_NAME "set-dynamic-map-sampling-off"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_dynamic_map_sampling_off();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dynamic_map_zoom_offset (SCM s_0)
{
#define FUNC_NAME "set-dynamic-map-zoom-offset"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_dynamic_map_zoom_offset(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_add_terminal_residue (SCM s_0)
{
#define FUNC_NAME "do-add-terminal-residue"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_add_terminal_residue(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_add_terminal_residue_n_phi_psi_trials (SCM s_0)
{
#define FUNC_NAME "set-add-terminal-residue-n-phi-psi-trials"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_add_terminal_residue_n_phi_psi_trials(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_add_terminal_residue_add_other_residue_flag (SCM s_0)
{
#define FUNC_NAME "set-add-terminal-residue-add-other-residue-flag"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_add_terminal_residue_add_other_residue_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_terminal_residue_do_rigid_body_refine (SCM s_0)
{
#define FUNC_NAME "set-terminal-residue-do-rigid-body-refine"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_terminal_residue_do_rigid_body_refine(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_terminal_residue_immediate_addition_state ()
{
#define FUNC_NAME "add-terminal-residue-immediate-addition-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)add_terminal_residue_immediate_addition_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_add_terminal_residue_immediate_addition (SCM s_0)
{
#define FUNC_NAME "set-add-terminal-residue-immediate-addition"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_add_terminal_residue_immediate_addition(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_terminal_residue (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "add-terminal-residue"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  result = (int)add_terminal_residue(arg1,arg2,arg3,arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_add_terminal_residue_default_residue_type (SCM s_0)
{
#define FUNC_NAME "set-add-terminal-residue-default-residue-type"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_add_terminal_residue_default_residue_type((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_add_terminal_residue_do_post_refine (SCM s_0)
{
#define FUNC_NAME "set-add-terminal-residue-do-post-refine"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_add_terminal_residue_do_post_refine(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_atom_by_atom_index (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "delete-atom-by-atom-index"
  int arg1 ;
  int arg2 ;
  short arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  delete_atom_by_atom_index(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_residue_by_atom_index (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "delete-residue-by-atom-index"
  int arg1 ;
  int arg2 ;
  short arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  delete_residue_by_atom_index(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_residue_hydrogens_by_atom_index (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "delete-residue-hydrogens-by-atom-index"
  int arg1 ;
  int arg2 ;
  short arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  delete_residue_hydrogens_by_atom_index(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_residue_range (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "delete-residue-range"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  delete_residue_range(arg1,(char const *)arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_residue (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "delete-residue"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  delete_residue(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_residue_with_altconf (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "delete-residue-with-altconf"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  delete_residue_with_altconf(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_residue_hydrogens (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "delete-residue-hydrogens"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  delete_residue_hydrogens(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_atom (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "delete-atom"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  int must_free6 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  delete_atom(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  if (must_free6 && arg6) SWIG_free(arg6);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_residue_sidechain (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "delete-residue-sidechain"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  short arg5 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2short(s_4, SCM_ARG1, FUNC_NAME);
  }
  delete_residue_sidechain(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_delete_atom_mode ()
{
#define FUNC_NAME "set-delete-atom-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_delete_atom_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_delete_residue_mode ()
{
#define FUNC_NAME "set-delete-residue-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_delete_residue_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_delete_residue_zone_mode ()
{
#define FUNC_NAME "set-delete-residue-zone-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_delete_residue_zone_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_delete_residue_hydrogens_mode ()
{
#define FUNC_NAME "set-delete-residue-hydrogens-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_delete_residue_hydrogens_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_delete_water_mode ()
{
#define FUNC_NAME "set-delete-water-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_delete_water_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_delete_sidechain_mode ()
{
#define FUNC_NAME "set-delete-sidechain-mode"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  set_delete_sidechain_mode();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_item_mode_is_atom_p ()
{
#define FUNC_NAME "delete-item-mode-is-atom-p"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)delete_item_mode_is_atom_p();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_item_mode_is_residue_p ()
{
#define FUNC_NAME "delete-item-mode-is-residue-p"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)delete_item_mode_is_residue_p();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_item_mode_is_water_p ()
{
#define FUNC_NAME "delete-item-mode-is-water-p"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)delete_item_mode_is_water_p();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_item_mode_is_sidechain_p ()
{
#define FUNC_NAME "delete-item-mode-is-sidechain-p"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)delete_item_mode_is_sidechain_p();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_store_delete_item_widget (SCM s_0)
{
#define FUNC_NAME "store-delete-item-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  store_delete_item_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_pending_delete_item ()
{
#define FUNC_NAME "clear-pending-delete-item"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_pending_delete_item();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_delete_item_widget ()
{
#define FUNC_NAME "clear-delete-item-widget"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_delete_item_widget();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_store_delete_item_widget_position ()
{
#define FUNC_NAME "store-delete-item-widget-position"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  store_delete_item_widget_position();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_item_widget_is_being_shown ()
{
#define FUNC_NAME "delete-item-widget-is-being-shown"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)delete_item_widget_is_being_shown();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_item_widget_keep_active_on ()
{
#define FUNC_NAME "delete-item-widget-keep-active-on"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)delete_item_widget_keep_active_on();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_delete_item_dialog ()
{
#define FUNC_NAME "wrapped-create-delete-item-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_delete_item_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_rot_trans_setup (SCM s_0)
{
#define FUNC_NAME "do-rot-trans-setup"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_rot_trans_setup(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_rot_trans_adjustments (SCM s_0)
{
#define FUNC_NAME "do-rot-trans-adjustments"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  do_rot_trans_adjustments(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rot_trans_reset_previous ()
{
#define FUNC_NAME "rot-trans-reset-previous"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  rot_trans_reset_previous();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotate_translate_zone_rotates_about_zone_centre (SCM s_0)
{
#define FUNC_NAME "set-rotate-translate-zone-rotates-about-zone-centre"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_rotate_translate_zone_rotates_about_zone_centre(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_cis_trans_conversion_setup (SCM s_0)
{
#define FUNC_NAME "do-cis-trans-conversion-setup"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_cis_trans_conversion_setup(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_cis_trans_convert (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "cis-trans-convert"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  cis_trans_convert(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_cis_peptides (SCM s_0)
{
#define FUNC_NAME "cis-peptides"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)cis_peptides(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_db_main (SCM s_0)
{
#define FUNC_NAME "do-db-main"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  do_db_main(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_db_mainchain (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "db-mainchain"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  db_mainchain(arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_close_molecule (SCM s_0)
{
#define FUNC_NAME "close-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  close_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_close_molecule_by_widget (SCM s_0)
{
#define FUNC_NAME "close-molecule-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  close_molecule_by_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_close_option_menu_with_all_molecule_options (SCM s_0)
{
#define FUNC_NAME "fill-close-option-menu-with-all-molecule-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_close_option_menu_with_all_molecule_options(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_close_molecule_item_select (SCM s_0, SCM s_1)
{
#define FUNC_NAME "close-molecule-item-select"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  close_molecule_item_select(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_close_molecules (SCM s_0)
{
#define FUNC_NAME "new-close-molecules"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  new_close_molecules(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_new_close_molecules_dialog ()
{
#define FUNC_NAME "wrapped-create-new-close-molecules-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_new_close_molecules_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_rotamers (SCM s_0)
{
#define FUNC_NAME "setup-rotamers"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_rotamers(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_rotamers (SCM s_0, SCM s_1)
{
#define FUNC_NAME "do-rotamers"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  do_rotamers(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotamer_lowest_probability (SCM s_0)
{
#define FUNC_NAME "set-rotamer-lowest-probability"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_rotamer_lowest_probability(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_rotamer_check_clashes (SCM s_0)
{
#define FUNC_NAME "set-rotamer-check-clashes"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_rotamer_check_clashes(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_auto_fit_best_rotamer (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "auto-fit-best-rotamer"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  float result;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = scm_num2int(s_6, SCM_ARG1, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  result = (float)auto_fit_best_rotamer(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
  {
    gswig_result = scm_make_real(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_auto_fit_best_rotamer_clash_flag (SCM s_0)
{
#define FUNC_NAME "set-auto-fit-best-rotamer-clash-flag"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_auto_fit_best_rotamer_clash_flag(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotamer_score (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "rotamer-score"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float result;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  result = (float)rotamer_score(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  {
    gswig_result = scm_make_real(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_auto_fit_rotamer (SCM s_0)
{
#define FUNC_NAME "setup-auto-fit-rotamer"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_auto_fit_rotamer(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_partial_residues (SCM s_0)
{
#define FUNC_NAME "fill-partial-residues"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  fill_partial_residues(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_partial_residue (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "fill-partial-residue"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  fill_partial_residue(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_graphics_rotamer_dialog (SCM s_0)
{
#define FUNC_NAME "set-graphics-rotamer-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  set_graphics_rotamer_dialog(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rotamer_graphs (SCM s_0)
{
#define FUNC_NAME "rotamer-graphs"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)rotamer_graphs(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_180_degree_side_chain_flip (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "do-180-degree-side-chain-flip"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  do_180_degree_side_chain_flip(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_180_degree_flip (SCM s_0)
{
#define FUNC_NAME "setup-180-degree-flip"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_180_degree_flip(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_mutate (SCM s_0)
{
#define FUNC_NAME "setup-mutate"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_mutate(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_mutate_auto_fit (SCM s_0)
{
#define FUNC_NAME "setup-mutate-auto-fit"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_mutate_auto_fit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_mutation (SCM s_0, SCM s_1)
{
#define FUNC_NAME "do-mutation"
  char *arg1 = (char *) 0 ;
  short arg2 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  do_mutation((char const *)arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_progressive_residues_in_chain_check (SCM s_0, SCM s_1)
{
#define FUNC_NAME "progressive-residues-in-chain-check"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  short result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (short)progressive_residues_in_chain_check((char const *)arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mutate (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "mutate"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  result = (int)mutate(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_mutate_auto_fit_do_post_refine (SCM s_0)
{
#define FUNC_NAME "set-mutate-auto-fit-do-post-refine"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_mutate_auto_fit_do_post_refine(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mutate_auto_fit_do_post_refine_state ()
{
#define FUNC_NAME "mutate-auto-fit-do-post-refine-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)mutate_auto_fit_do_post_refine_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mutate_single_residue_by_serial_number (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "mutate-single-residue-by-serial-number"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = SCM_CHAR(s_3);
  }
  result = (int)mutate_single_residue_by_serial_number(arg1,(char const *)arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mutate_single_residue_by_seqno (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "mutate-single-residue-by-seqno"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char arg5 ;
  int result;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = SCM_CHAR(s_4);
  }
  result = (int)mutate_single_residue_by_seqno(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_base_mutation (SCM s_0)
{
#define FUNC_NAME "do-base-mutation"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  do_base_mutation((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_residue_type_chooser_stub_state (SCM s_0)
{
#define FUNC_NAME "set-residue-type-chooser-stub-state"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_residue_type_chooser_stub_state(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_alt_conf_split_type_number ()
{
#define FUNC_NAME "alt-conf-split-type-number"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)alt_conf_split_type_number();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_add_alt_conf_split_type_number (SCM s_0)
{
#define FUNC_NAME "set-add-alt-conf-split-type-number"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_add_alt_conf_split_type_number(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_alt_conf_with_dialog (SCM s_0)
{
#define FUNC_NAME "setup-alt-conf-with-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  setup_alt_conf_with_dialog(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_add_alt_conf_dialog ()
{
#define FUNC_NAME "unset-add-alt-conf-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_add_alt_conf_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_add_alt_conf_define ()
{
#define FUNC_NAME "unset-add-alt-conf-define"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_add_alt_conf_define();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_altconf ()
{
#define FUNC_NAME "altconf"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  altconf();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_add_alt_conf_new_atoms_occupancy (SCM s_0)
{
#define FUNC_NAME "set-add-alt-conf-new-atoms-occupancy"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_add_alt_conf_new_atoms_occupancy(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_alt_conf_intermediate_atoms (SCM s_0)
{
#define FUNC_NAME "set-show-alt-conf-intermediate-atoms"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_show_alt_conf_intermediate_atoms(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_alt_conf_intermediate_atoms_state ()
{
#define FUNC_NAME "show-alt-conf-intermediate-atoms-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)show_alt_conf_intermediate_atoms_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_zero_occupancy_residue_range (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "zero-occupancy-residue-range"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  zero_occupancy_residue_range(arg1,(char const *)arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_occupancy_residue_range (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "fill-occupancy-residue-range"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  fill_occupancy_residue_range(arg1,(char const *)arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_place_atom_at_pointer ()
{
#define FUNC_NAME "place-atom-at-pointer"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  place_atom_at_pointer();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_place_typed_atom_at_pointer (SCM s_0)
{
#define FUNC_NAME "place-typed-atom-at-pointer"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  place_typed_atom_at_pointer((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_pointer_atom_is_dummy (SCM s_0)
{
#define FUNC_NAME "set-pointer-atom-is-dummy"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_pointer_atom_is_dummy(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_place_atom_molecule_option_menu (SCM s_0)
{
#define FUNC_NAME "fill-place-atom-molecule-option-menu"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  fill_place_atom_molecule_option_menu(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_display_where_is_pointer ()
{
#define FUNC_NAME "display-where-is-pointer"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  display_where_is_pointer();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_baton_mode (SCM s_0)
{
#define FUNC_NAME "set-baton-mode"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_baton_mode(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_draw_baton (SCM s_0)
{
#define FUNC_NAME "set-draw-baton"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_draw_baton(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_accept_baton_position ()
{
#define FUNC_NAME "accept-baton-position"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  accept_baton_position();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_baton_try_another ()
{
#define FUNC_NAME "baton-try-another"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  baton_try_another();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_shorten_baton ()
{
#define FUNC_NAME "shorten-baton"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  shorten_baton();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_lengthen_baton ()
{
#define FUNC_NAME "lengthen-baton"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  lengthen_baton();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_baton_build_delete_last_residue ()
{
#define FUNC_NAME "baton-build-delete-last-residue"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  baton_build_delete_last_residue();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_baton_build_params (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-baton-build-params"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  set_baton_build_params(arg1,(char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_baton_mode_calculate_skeleton (SCM s_0)
{
#define FUNC_NAME "baton-mode-calculate-skeleton"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  baton_mode_calculate_skeleton(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_reverse_direction_of_fragment (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "reverse-direction-of-fragment"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  reverse_direction_of_fragment(arg1,(char const *)arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_reverse_direction (SCM s_0)
{
#define FUNC_NAME "setup-reverse-direction"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_reverse_direction(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_OXT_to_residue (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "add-OXT-to-residue"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  short result;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (short)add_OXT_to_residue(arg1,arg2,(char const *)arg3,(char const *)arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_add_OXT_dialog ()
{
#define FUNC_NAME "wrapped-create-add-OXT-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_add_OXT_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_add_OXT_from_widget (SCM s_0)
{
#define FUNC_NAME "apply-add-OXT-from-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  apply_add_OXT_from_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_draw_crosshairs (SCM s_0)
{
#define FUNC_NAME "set-draw-crosshairs"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_draw_crosshairs(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_draw_crosshairs_state ()
{
#define FUNC_NAME "draw-crosshairs-state"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)draw_crosshairs_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_edit_chi_angles (SCM s_0)
{
#define FUNC_NAME "setup-edit-chi-angles"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_edit_chi_angles(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_find_hydrogen_torsion (SCM s_0)
{
#define FUNC_NAME "set-find-hydrogen-torsion"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_find_hydrogen_torsion(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_graphics_edit_current_chi (SCM s_0)
{
#define FUNC_NAME "set-graphics-edit-current-chi"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_graphics_edit_current_chi(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_moving_atom_move_chis ()
{
#define FUNC_NAME "unset-moving-atom-move-chis"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_moving_atom_move_chis();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_edit_chi_angles (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "edit-chi-angles"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  result = (int)edit_chi_angles(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_chi_angle_bond (SCM s_0)
{
#define FUNC_NAME "set-show-chi-angle-bond"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)set_show_chi_angle_bond(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_torsion_general (SCM s_0)
{
#define FUNC_NAME "setup-torsion-general"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_torsion_general(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_toggle_torsion_general_reverse ()
{
#define FUNC_NAME "toggle-torsion-general-reverse"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  toggle_torsion_general_reverse();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mask_map_by_molecule (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "mask-map-by-molecule"
  int arg1 ;
  int arg2 ;
  short arg3 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  result = (int)mask_map_by_molecule(arg1,arg2,arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mask_map_by_atom_selection (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "mask-map-by-atom-selection"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  short arg4 ;
  int result;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2short(s_3, SCM_ARG1, FUNC_NAME);
  }
  result = (int)mask_map_by_atom_selection(arg1,arg2,(char const *)arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_map_mask_atom_radius (SCM s_0)
{
#define FUNC_NAME "set-map-mask-atom-radius"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_map_mask_atom_radius(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_mask_atom_radius ()
{
#define FUNC_NAME "map-mask-atom-radius"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)map_mask_atom_radius();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_check_waters_dialog ()
{
#define FUNC_NAME "wrapped-create-check-waters-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_check_waters_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_check_waters_b_factor_limit (SCM s_0)
{
#define FUNC_NAME "set-check-waters-b-factor-limit"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_check_waters_b_factor_limit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_check_waters_map_sigma_limit (SCM s_0)
{
#define FUNC_NAME "set-check-waters-map-sigma-limit"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_check_waters_map_sigma_limit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_check_waters_min_dist_limit (SCM s_0)
{
#define FUNC_NAME "set-check-waters-min-dist-limit"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_check_waters_min_dist_limit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_check_waters_max_dist_limit (SCM s_0)
{
#define FUNC_NAME "set-check-waters-max-dist-limit"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_check_waters_max_dist_limit(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_check_waters_molecule_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "check-waters-molecule-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  check_waters_molecule_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_check_waters_by_widget (SCM s_0)
{
#define FUNC_NAME "do-check-waters-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  do_check_waters_by_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_store_checked_waters_baddies_dialog (SCM s_0)
{
#define FUNC_NAME "store-checked-waters-baddies-dialog"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  store_checked_waters_baddies_dialog(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_checked_waters_baddies_dialog (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "wrapped-checked-waters-baddies-dialog"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  short arg6 ;
  short arg7 ;
  short arg8 ;
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2short(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = scm_num2short(s_6, SCM_ARG1, FUNC_NAME);
  }
  {
    arg8 = scm_num2short(s_7, SCM_ARG1, FUNC_NAME);
  }
  result = (GtkWidget *)wrapped_checked_waters_baddies_dialog(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_checked_waters_baddies (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7)
{
#define FUNC_NAME "delete-checked-waters-baddies"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  short arg6 ;
  short arg7 ;
  short arg8 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2short(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = scm_num2short(s_6, SCM_ARG1, FUNC_NAME);
  }
  {
    arg8 = scm_num2short(s_7, SCM_ARG1, FUNC_NAME);
  }
  delete_checked_waters_baddies(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_check_waters_by_difference_map (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "check-waters-by-difference-map"
  int arg1 ;
  int arg2 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  check_waters_by_difference_map(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_check_waters_by_difference_map_by_widget (SCM s_0)
{
#define FUNC_NAME "check-waters-by-difference-map-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  check_waters_by_difference_map_by_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_check_waters_diff_map_dialog ()
{
#define FUNC_NAME "wrapped-create-check-waters-diff-map-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_check_waters_diff_map_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_check_waters_by_difference_map_sigma_level_state ()
{
#define FUNC_NAME "check-waters-by-difference-map-sigma-level-state"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)check_waters_by_difference_map_sigma_level_state();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_check_waters_by_difference_map_sigma_level (SCM s_0)
{
#define FUNC_NAME "set-check-waters-by-difference-map-sigma-level"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_check_waters_by_difference_map_sigma_level(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_lsq_matches ()
{
#define FUNC_NAME "clear-lsq-matches"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_lsq_matches();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_lsq_match (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "add-lsq-match"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  int must_free3 = 0 ;
  int must_free6 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  {
    arg7 = scm_num2int(s_6, SCM_ARG1, FUNC_NAME);
  }
  add_lsq_match(arg1,arg2,(char const *)arg3,arg4,arg5,(char const *)arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free6 && arg6) SWIG_free(arg6);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_lsq_matches (SCM s_0, SCM s_1)
{
#define FUNC_NAME "apply-lsq-matches"
  int arg1 ;
  int arg2 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)apply_lsq_matches(arg1,arg2);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_lsq_matches_simple (SCM s_0, SCM s_1)
{
#define FUNC_NAME "apply-lsq-matches-simple"
  int arg1 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)apply_lsq_matches_simple(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_lsq_deviation (SCM s_0)
{
#define FUNC_NAME "setup-lsq-deviation"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_lsq_deviation(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_setup_lsq_plane_define (SCM s_0)
{
#define FUNC_NAME "setup-lsq-plane-define"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  setup_lsq_plane_define(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_lsq_plane_dialog ()
{
#define FUNC_NAME "wrapped-create-lsq-plane-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_lsq_plane_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unset_lsq_plane_dialog ()
{
#define FUNC_NAME "unset-lsq-plane-dialog"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  unset_lsq_plane_dialog();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_last_lsq_plane_atom ()
{
#define FUNC_NAME "remove-last-lsq-plane-atom"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  remove_last_lsq_plane_atom();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_least_squares_dialog ()
{
#define FUNC_NAME "wrapped-create-least-squares-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_least_squares_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_apply_lsq_matches_by_widget (SCM s_0)
{
#define FUNC_NAME "apply-lsq-matches-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)apply_lsq_matches_by_widget(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_lsq_ref_mol_option_menu_changed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "lsq-ref-mol-option-menu-changed"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  lsq_ref_mol_option_menu_changed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_lsq_mov_mol_option_menu_changed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "lsq-mov-mol-option-menu-changed"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  lsq_mov_mol_option_menu_changed(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_lsq_reference_chain_option_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "lsq-reference-chain-option-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  lsq_reference_chain_option_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_lsq_moving_chain_option_menu_item_activate (SCM s_0, SCM s_1)
{
#define FUNC_NAME "lsq-moving-chain-option-menu-item-activate"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  GtkPositionType arg2 ;
  GtkPositionType *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    argp2 = (GtkPositionType *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GtkPositionType, 2, 0);
    arg2 = *argp2;
  }
  lsq_moving_chain_option_menu_item_activate(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_lsq_option_menu_with_chain_options (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fill-lsq-option-menu-with-chain-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  fill_lsq_option_menu_with_chain_options(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_trim_molecule_by_map (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "trim-molecule-by-map"
  int arg1 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  trim_molecule_by_map(arg1,arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_raster3d (SCM s_0)
{
#define FUNC_NAME "raster3d"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  raster3d((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_povray (SCM s_0)
{
#define FUNC_NAME "povray"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  povray((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_image_raster3d (SCM s_0)
{
#define FUNC_NAME "make-image-raster3d"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  make_image_raster3d((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_image_povray (SCM s_0)
{
#define FUNC_NAME "make-image-povray"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  make_image_povray((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_raster3d_bond_thickness (SCM s_0)
{
#define FUNC_NAME "set-raster3d-bond-thickness"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_raster3d_bond_thickness(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_raster3d_atom_radius (SCM s_0)
{
#define FUNC_NAME "set-raster3d-atom-radius"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_raster3d_atom_radius(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_raster3d_density_thickness (SCM s_0)
{
#define FUNC_NAME "set-raster3d-density-thickness"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_raster3d_density_thickness(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_renderer_show_atoms (SCM s_0)
{
#define FUNC_NAME "set-renderer-show-atoms"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_renderer_show_atoms(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_raster3d_bone_thickness (SCM s_0)
{
#define FUNC_NAME "set-raster3d-bone-thickness"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_raster3d_bone_thickness(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_raster_screen_shot ()
{
#define FUNC_NAME "raster-screen-shot"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  raster_screen_shot();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_citation_notice_off ()
{
#define FUNC_NAME "citation-notice-off"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  citation_notice_off();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_superpose (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "superpose"
  int arg1 ;
  int arg2 ;
  short arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  superpose(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_superpose_with_chain_selection (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "superpose-with-chain-selection"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  short arg7 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  {
    arg6 = scm_num2int(s_5, SCM_ARG1, FUNC_NAME);
  }
  {
    arg7 = scm_num2short(s_6, SCM_ARG1, FUNC_NAME);
  }
  superpose_with_chain_selection(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_superpose_with_atom_selection (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "superpose-with-atom-selection"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  short arg5 ;
  int must_free3 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = scm_num2short(s_4, SCM_ARG1, FUNC_NAME);
  }
  superpose_with_atom_selection(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_superpose (SCM s_0)
{
#define FUNC_NAME "execute-superpose"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  execute_superpose(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_superpose_dialog ()
{
#define FUNC_NAME "wrapped-create-superpose-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_superpose_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fill_superpose_option_menu_with_chain_options (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fill-superpose-option-menu-with-chain-options"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  fill_superpose_option_menu_with_chain_options(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_draw_ncs_ghosts (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-draw-ncs-ghosts"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_draw_ncs_ghosts(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ncs_ghost_bond_thickness (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-ncs-ghost-bond-thickness"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  set_ncs_ghost_bond_thickness(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ncs_update_ghosts (SCM s_0)
{
#define FUNC_NAME "ncs-update-ghosts"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  ncs_update_ghosts(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_dynamically_transformed_ncs_maps (SCM s_0, SCM s_1)
{
#define FUNC_NAME "make-dynamically-transformed-ncs-maps"
  int arg1 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)make_dynamically_transformed_ncs_maps(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_dynamically_transformed_ncs_maps_by_widget (SCM s_0)
{
#define FUNC_NAME "make-dynamically-transformed-ncs-maps-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)make_dynamically_transformed_ncs_maps_by_widget(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_ncs_maps_dialog ()
{
#define FUNC_NAME "wrapped-create-ncs-maps-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_ncs_maps_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_ncs_ghosts_maybe (SCM s_0)
{
#define FUNC_NAME "make-ncs-ghosts-maybe"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  make_ncs_ghosts_maybe(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ncs_matrix (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10, SCM s_11, SCM s_12, SCM s_13, SCM s_14)
{
#define FUNC_NAME "add-ncs-matrix"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = scm_num2dbl(s_8, FUNC_NAME);
  }
  {
    arg10 = scm_num2dbl(s_9, FUNC_NAME);
  }
  {
    arg11 = scm_num2dbl(s_10, FUNC_NAME);
  }
  {
    arg12 = scm_num2dbl(s_11, FUNC_NAME);
  }
  {
    arg13 = scm_num2dbl(s_12, FUNC_NAME);
  }
  {
    arg14 = scm_num2dbl(s_13, FUNC_NAME);
  }
  {
    arg15 = scm_num2dbl(s_14, FUNC_NAME);
  }
  add_ncs_matrix(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_ncs_matrix_rest (SCM rest)
{
SCM arg[15];
SWIG_Guile_GetArgs (arg, rest, 15, 0, "add-ncs-matrix");
return _wrap_add_ncs_matrix(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10], arg[11], arg[12], arg[13], arg[14]);
}
static SCM
_wrap_clear_ncs_ghost_matrices (SCM s_0)
{
#define FUNC_NAME "clear-ncs-ghost-matrices"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  clear_ncs_ghost_matrices(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_strict_ncs_matrix (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10, SCM s_11, SCM s_12, SCM s_13, SCM s_14)
{
#define FUNC_NAME "add-strict-ncs-matrix"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  int result;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = scm_num2dbl(s_8, FUNC_NAME);
  }
  {
    arg10 = scm_num2dbl(s_9, FUNC_NAME);
  }
  {
    arg11 = scm_num2dbl(s_10, FUNC_NAME);
  }
  {
    arg12 = scm_num2dbl(s_11, FUNC_NAME);
  }
  {
    arg13 = scm_num2dbl(s_12, FUNC_NAME);
  }
  {
    arg14 = scm_num2dbl(s_13, FUNC_NAME);
  }
  {
    arg15 = scm_num2dbl(s_14, FUNC_NAME);
  }
  result = (int)add_strict_ncs_matrix(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_strict_ncs_matrix_rest (SCM rest)
{
SCM arg[15];
SWIG_Guile_GetArgs (arg, rest, 15, 0, "add-strict-ncs-matrix");
return _wrap_add_strict_ncs_matrix(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10], arg[11], arg[12], arg[13], arg[14]);
}
static SCM
_wrap_show_strict_ncs_state (SCM s_0)
{
#define FUNC_NAME "show-strict-ncs-state"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)show_strict_ncs_state(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_show_strict_ncs (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-show-strict-ncs"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_show_strict_ncs(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_ncs_homology_level (SCM s_0)
{
#define FUNC_NAME "set-ncs-homology-level"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_ncs_homology_level(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_copy_chain (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "copy-chain"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  copy_chain(arg1,(char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_copy_from_ncs_master_to_others (SCM s_0, SCM s_1)
{
#define FUNC_NAME "copy-from-ncs-master-to-others"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  copy_from_ncs_master_to_others(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_copy_residue_range_from_ncs_master_to_others (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "copy-residue-range-from-ncs-master-to-others"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  copy_residue_range_from_ncs_master_to_others(arg1,(char const *)arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_create_ncs_control_dialog ()
{
#define FUNC_NAME "wrapped-create-ncs-control-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_create_ncs_control_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ncs_control_change_ncs_master_to_chain (SCM s_0, SCM s_1)
{
#define FUNC_NAME "ncs-control-change-ncs-master-to-chain"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  ncs_control_change_ncs_master_to_chain(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ncs_control_change_ncs_master_to_chain_update_widget (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "ncs-control-change-ncs-master-to-chain-update-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  ncs_control_change_ncs_master_to_chain_update_widget(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ncs_control_display_chain (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "ncs-control-display-chain"
  int arg1 ;
  int arg2 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  ncs_control_display_chain(arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ncs_chain_differences_scm (SCM s_0, SCM s_1)
{
#define FUNC_NAME "ncs-chain-differences-scm"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  SCM result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (SCM)ncs_chain_differences_scm(arg1,(char const *)arg2);
  gswig_result=result;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ncs_chain_ids_scm (SCM s_0)
{
#define FUNC_NAME "ncs-chain-ids-scm"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)ncs_chain_ids_scm(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_place_helix_here ()
{
#define FUNC_NAME "place-helix-here"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)place_helix_here();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_place_strand_here (SCM s_0, SCM s_1)
{
#define FUNC_NAME "place-strand-here"
  int arg1 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)place_strand_here(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_molecule_by_residue_type_selection (SCM s_0, SCM s_1)
{
#define FUNC_NAME "new-molecule-by-residue-type-selection"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)new_molecule_by_residue_type_selection(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_molecule_by_atom_selection (SCM s_0, SCM s_1)
{
#define FUNC_NAME "new-molecule-by-atom-selection"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)new_molecule_by_atom_selection(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_molecule_by_sphere_selection (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "new-molecule-by-sphere-selection"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  result = (int)new_molecule_by_sphere_selection(arg1,arg2,arg3,arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_axis_orientation_matrix (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8)
{
#define FUNC_NAME "set-axis-orientation-matrix"
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = scm_num2dbl(s_8, FUNC_NAME);
  }
  set_axis_orientation_matrix(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_axis_orientation_matrix_usage (SCM s_0)
{
#define FUNC_NAME "set-axis-orientation-matrix-usage"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_axis_orientation_matrix_usage(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ideal_nucleic_acid (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "ideal-nucleic-acid"
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  short arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2short(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (int)ideal_nucleic_acid((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_nucleotide_builder_dialog ()
{
#define FUNC_NAME "wrapped-nucleotide-builder-dialog"
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (GtkWidget *)wrapped_nucleotide_builder_dialog();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ideal_nucleic_acid_by_widget (SCM s_0)
{
#define FUNC_NAME "ideal-nucleic-acid-by-widget"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  ideal_nucleic_acid_by_widget(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_print_sequence_chain (SCM s_0, SCM s_1)
{
#define FUNC_NAME "print-sequence-chain"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  print_sequence_chain(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_assign_fasta_sequence (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "assign-fasta-sequence"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  assign_fasta_sequence(arg1,(char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_assign_pir_sequence (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "assign-pir-sequence"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  assign_pir_sequence(arg1,(char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_assign_sequence (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "assign-sequence"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  assign_sequence(arg1,arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_assign_sequence_from_file (SCM s_0, SCM s_1)
{
#define FUNC_NAME "assign-sequence-from-file"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  assign_sequence_from_file(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_assign_sequence_from_string (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "assign-sequence-from-string"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  assign_sequence_from_string(arg1,(char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_all_sequences_from_molecule (SCM s_0)
{
#define FUNC_NAME "delete-all-sequences-from-molecule"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  delete_all_sequences_from_molecule(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_sequence_by_chain_id (SCM s_0, SCM s_1)
{
#define FUNC_NAME "delete-sequence-by-chain-id"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  delete_sequence_by_chain_id(arg1,(char const *)arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_sequence_info (SCM s_0)
{
#define FUNC_NAME "sequence-info"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)sequence_info(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_surface (SCM s_0, SCM s_1)
{
#define FUNC_NAME "do-surface"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  do_surface(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fffear_search (SCM s_0, SCM s_1)
{
#define FUNC_NAME "fffear-search"
  int arg1 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)fffear_search(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_fffear_angular_resolution (SCM s_0)
{
#define FUNC_NAME "set-fffear-angular-resolution"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_fffear_angular_resolution(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_fffear_angular_resolution ()
{
#define FUNC_NAME "fffear-angular-resolution"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)fffear_angular_resolution();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_make_socket_listener_maybe ()
{
#define FUNC_NAME "make-socket-listener-maybe"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  make_socket_listener_maybe();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_coot_socket_listener_idle_func (SCM s_0)
{
#define FUNC_NAME "coot-socket-listener-idle-func"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = (int)coot_socket_listener_idle_func(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_coot_listener_socket_state_internal (SCM s_0)
{
#define FUNC_NAME "set-coot-listener-socket-state-internal"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_coot_listener_socket_state_internal(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_socket_string_waiting (SCM s_0)
{
#define FUNC_NAME "set-socket-string-waiting"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_socket_string_waiting((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_display_lists_for_maps (SCM s_0)
{
#define FUNC_NAME "set-display-lists-for-maps"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_display_lists_for_maps(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_preferences ()
{
#define FUNC_NAME "preferences"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  preferences();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_preferences ()
{
#define FUNC_NAME "clear-preferences"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  clear_preferences();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_mark_cis_peptides_as_bad (SCM s_0)
{
#define FUNC_NAME "set-mark-cis-peptides-as-bad"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_mark_cis_peptides_as_bad(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_show_mark_cis_peptides_as_bad_state ()
{
#define FUNC_NAME "show-mark-cis-peptides-as-bad-state"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)show_mark_cis_peptides_as_bad_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_browser_url (SCM s_0)
{
#define FUNC_NAME "browser-url"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  browser_url((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_browser_interface (SCM s_0)
{
#define FUNC_NAME "set-browser-interface"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_browser_interface((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_online_coot_search_request (SCM s_0)
{
#define FUNC_NAME "handle-online-coot-search-request"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  handle_online_coot_search_request((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_generic_object_number (SCM s_0)
{
#define FUNC_NAME "new-generic-object-number"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)new_generic_object_number((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_to_generic_object_add_line (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8)
{
#define FUNC_NAME "to-generic-object-add-line"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  {
    arg7 = scm_num2dbl(s_6, FUNC_NAME);
  }
  {
    arg8 = scm_num2dbl(s_7, FUNC_NAME);
  }
  {
    arg9 = scm_num2dbl(s_8, FUNC_NAME);
  }
  to_generic_object_add_line(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_to_generic_object_add_point (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "to-generic-object-add-point"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2dbl(s_4, FUNC_NAME);
  }
  {
    arg6 = scm_num2dbl(s_5, FUNC_NAME);
  }
  to_generic_object_add_point(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_to_generic_object_add_display_list_handle (SCM s_0, SCM s_1)
{
#define FUNC_NAME "to-generic-object-add-display-list-handle"
  int arg1 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  to_generic_object_add_display_list_handle(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_display_generic_object (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-display-generic-object"
  int arg1 ;
  short arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  set_display_generic_object(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_object_is_displayed_p (SCM s_0)
{
#define FUNC_NAME "generic-object-is-displayed-p"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)generic_object_is_displayed_p(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_object_index (SCM s_0)
{
#define FUNC_NAME "generic-object-index"
  char *arg1 = (char *) 0 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (int)generic_object_index((char const *)arg1);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_object_name (SCM s_0)
{
#define FUNC_NAME "generic-object-name"
  int arg1 ;
  char *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)generic_object_name(arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_number_of_generic_objects ()
{
#define FUNC_NAME "number-of-generic-objects"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)number_of_generic_objects();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_object_info ()
{
#define FUNC_NAME "generic-object-info"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  generic_object_info();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_object_has_objects_p (SCM s_0)
{
#define FUNC_NAME "generic-object-has-objects-p"
  int arg1 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (short)generic_object_has_objects_p(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_close_generic_object (SCM s_0)
{
#define FUNC_NAME "close-generic-object"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  close_generic_object(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_is_closed_generic_object_p (SCM s_0)
{
#define FUNC_NAME "is-closed-generic-object-p"
  int arg1 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (short)is_closed_generic_object_p(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_objects_gui_wrapper ()
{
#define FUNC_NAME "generic-objects-gui-wrapper"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  generic_objects_gui_wrapper();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_read_draw_probe_dots (SCM s_0)
{
#define FUNC_NAME "handle-read-draw-probe-dots"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  handle_read_draw_probe_dots((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_handle_read_draw_probe_dots_unformatted (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "handle-read-draw-probe-dots-unformatted"
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  handle_read_draw_probe_dots_unformatted((char const *)arg1,arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_do_probe_dots_on_rotamers_and_chis (SCM s_0)
{
#define FUNC_NAME "set-do-probe-dots-on-rotamers-and-chis"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_do_probe_dots_on_rotamers_and_chis(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_probe_dots_on_rotamers_and_chis_state ()
{
#define FUNC_NAME "do-probe-dots-on-rotamers-and-chis-state"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)do_probe_dots_on_rotamers_and_chis_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_do_probe_dots_post_refine (SCM s_0)
{
#define FUNC_NAME "set-do-probe-dots-post-refine"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_do_probe_dots_post_refine(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_probe_dots_post_refine_state ()
{
#define FUNC_NAME "do-probe-dots-post-refine-state"
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (short)do_probe_dots_post_refine_state();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_unmangle_hydrogen_name (SCM s_0)
{
#define FUNC_NAME "unmangle-hydrogen-name"
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (char *)unmangle_hydrogen_name((char const *)arg1);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_interactive_probe_dots_molprobity_radius (SCM s_0)
{
#define FUNC_NAME "set-interactive-probe-dots-molprobity-radius"
  float arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(s_0, FUNC_NAME);
  }
  set_interactive_probe_dots_molprobity_radius(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_interactive_probe_dots_molprobity_radius ()
{
#define FUNC_NAME "interactive-probe-dots-molprobity-radius"
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (float)interactive_probe_dots_molprobity_radius();
  {
    gswig_result = scm_make_real(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_probe_available_p ()
{
#define FUNC_NAME "probe-available-p"
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (int)probe_available_p();
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_dti_stereo_mode (SCM s_0)
{
#define FUNC_NAME "set-dti-stereo-mode"
  short arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2short(s_0, SCM_ARG1, FUNC_NAME);
  }
  set_dti_stereo_mode(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_sharpen (SCM s_0, SCM s_1)
{
#define FUNC_NAME "sharpen"
  int arg1 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  sharpen(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_drag_intermediate_atom_scm (SCM s_0, SCM s_1)
{
#define FUNC_NAME "drag-intermediate-atom-scm"
  SCM arg1 ;
  SCM arg2 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  arg2=s_1;
  result = (SCM)drag_intermediate_atom_scm(arg1,arg2);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mark_atom_as_fixed_scm (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "mark-atom-as-fixed-scm"
  int arg1 ;
  SCM arg2 ;
  int arg3 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  arg2=s_1;
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)mark_atom_as_fixed_scm(arg1,arg2,arg3);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_all_fixed_atoms (SCM s_0)
{
#define FUNC_NAME "clear-all-fixed-atoms"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  clear_all_fixed_atoms(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_scale_cell (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "scale-cell"
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  result = (int)scale_cell(arg1,arg2,arg3,arg4);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_write_ccp4mg_picture_description (SCM s_0)
{
#define FUNC_NAME "write-ccp4mg-picture-description"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  write_ccp4mg_picture_description((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_laplacian (SCM s_0)
{
#define FUNC_NAME "laplacian"
  int arg1 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (int)laplacian(arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_smiles_gui ()
{
#define FUNC_NAME "do-smiles-gui"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_smiles_gui();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_do_tw ()
{
#define FUNC_NAME "do-tw"
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  do_tw();
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_button_label_for_external_refinement (SCM s_0)
{
#define FUNC_NAME "set-button-label-for-external-refinement"
  char *arg1 = (char *) 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  set_button_label_for_external_refinement((char const *)arg1);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_place_text (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "place-text"
  char *arg1 = (char *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  {
    arg3 = scm_num2dbl(s_2, FUNC_NAME);
  }
  {
    arg4 = scm_num2dbl(s_3, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  result = (int)place_text((char const *)arg1,arg2,arg3,arg4,arg5);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_remove_text (SCM s_0)
{
#define FUNC_NAME "remove-text"
  int arg1 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  remove_text(arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_alias_path_t_index_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "alias-path-t-index-set"
  coot::alias_path_t *arg1 = (coot::alias_path_t *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::alias_path_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__alias_path_t, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  if (arg1) (arg1)->index = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_alias_path_t_index_get (SCM s_0)
{
#define FUNC_NAME "alias-path-t-index-get"
  coot::alias_path_t *arg1 = (coot::alias_path_t *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::alias_path_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__alias_path_t, 1, 0);
  }
  result = (int) ((arg1)->index);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_alias_path_t_s_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "alias-path-t-s-set"
  coot::alias_path_t *arg1 = (coot::alias_path_t *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::alias_path_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__alias_path_t, 1, 0);
  }
  {
    argp2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
    arg2 = *argp2;
  }
  if (arg1) (arg1)->s = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_alias_path_t_s_get (SCM s_0)
{
#define FUNC_NAME "alias-path-t-s-get"
  coot::alias_path_t *arg1 = (coot::alias_path_t *) 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::alias_path_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__alias_path_t, 1, 0);
  }
  result =  ((arg1)->s);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_alias_path_t_flag_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "alias-path-t-flag-set"
  coot::alias_path_t *arg1 = (coot::alias_path_t *) 0 ;
  bool arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::alias_path_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__alias_path_t, 1, 0);
  }
  {
    arg2 = SCM_NFALSEP(s_1);
  }
  if (arg1) (arg1)->flag = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_alias_path_t_flag_get (SCM s_0)
{
#define FUNC_NAME "alias-path-t-flag-get"
  coot::alias_path_t *arg1 = (coot::alias_path_t *) 0 ;
  bool result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::alias_path_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__alias_path_t, 1, 0);
  }
  result = (bool) ((arg1)->flag);
  {
    gswig_result = SCM_BOOL(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_alias_path_t (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "new-alias-path-t"
  int arg1 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  coot::alias_path_t *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
  }
  {
    arg3 = SCM_NFALSEP(s_2);
  }
  result = (coot::alias_path_t *)new coot::alias_path_t(arg1,(std::string const &)*arg2,arg3);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__alias_path_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_alias_path_t (SCM s_0)
{
#define FUNC_NAME "delete-alias-path-t"
  coot::alias_path_t *arg1 = (coot::alias_path_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::alias_path_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__alias_path_t, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_filtered_by_glob (SCM s_0, SCM s_1)
{
#define FUNC_NAME "filtered-by-glob"
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector<std::string > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = filtered_by_glob((std::string const &)*arg1,arg2);
  {
    std::vector<std::string > * resultptr;
    resultptr = new std::vector<std::string >((std::vector<std::string > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__vectorTstd__string_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_string_member (SCM s_0, SCM s_1)
{
#define FUNC_NAME "string-member"
  std::string *arg1 = 0 ;
  std::vector<std::string > *arg2 = 0 ;
  short result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  {
    arg2 = (std::vector<std::string > *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__vectorTstd__string_t, 2, 0);
  }
  result = (short)string_member((std::string const &)*arg1,(std::vector<std::string > const &)*arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_compare_strings (SCM s_0, SCM s_1)
{
#define FUNC_NAME "compare-strings"
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  {
    arg2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
  }
  result = (bool)compare_strings((std::string const &)*arg1,(std::string const &)*arg2);
  {
    gswig_result = SCM_BOOL(result);
  }
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_pre_directory_file_selection (SCM s_0)
{
#define FUNC_NAME "pre-directory-file-selection"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = pre_directory_file_selection(arg1);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_filelist_into_fileselection_clist (SCM s_0, SCM s_1)
{
#define FUNC_NAME "filelist-into-fileselection-clist"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  std::vector<std::string > *arg2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (std::vector<std::string > *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__vectorTstd__string_t, 2, 0);
  }
  filelist_into_fileselection_clist(arg1,(std::vector<std::string > const &)*arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_wrapped_nothing_bad_dialog (SCM s_0)
{
#define FUNC_NAME "wrapped-nothing-bad-dialog"
  std::string *arg1 = 0 ;
  GtkWidget *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = (GtkWidget *)wrapped_nothing_bad_dialog((std::string const &)*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GtkWidget, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_float_from_entry (SCM s_0)
{
#define FUNC_NAME "float-from-entry"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  std::pair<short,float > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = float_from_entry(arg1);
  {
    std::pair<short,float > * resultptr;
    resultptr = new std::pair<short,float >((std::pair<short,float > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__pairTshort_float_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_int_from_entry (SCM s_0)
{
#define FUNC_NAME "int-from-entry"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  std::pair<short,int > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  result = int_from_entry(arg1);
  {
    std::pair<short,int > * resultptr;
    resultptr = new std::pair<short,int >((std::pair<short,int > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__pairTshort_int_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_validation_mol_menu_item (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "add-validation-mol-menu-item"
  int arg1 ;
  std::string *arg2 = 0 ;
  GtkWidget *arg3 = (GtkWidget *) 0 ;
  GtkSignalFunc arg4 ;
  GtkSignalFunc *argp4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
  }
  {
    arg3 = (GtkWidget *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_GtkWidget, 3, 0);
  }
  {
    argp4 = (GtkSignalFunc *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_GtkSignalFunc, 4, 0);
    arg4 = *argp4;
  }
  add_validation_mol_menu_item(arg1,(std::string const &)*arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_create_initial_validation_graph_submenu_generic (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "create-initial-validation-graph-submenu-generic"
  GtkWidget *arg1 = (GtkWidget *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkWidget *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkWidget, 1, 0);
  }
  {
    arg2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
  }
  {
    arg3 = (std::string *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_std__string, 3, 0);
  }
  create_initial_validation_graph_submenu_generic(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_probe_dots_short_contact_name_to_expanded_name (SCM s_0)
{
#define FUNC_NAME "probe-dots-short-contact-name-to-expanded-name"
  std::string *arg1 = 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = probe_dots_short_contact_name_to_expanded_name((std::string const &)*arg1);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_go_to_atom_from_spec (SCM s_0)
{
#define FUNC_NAME "set-go-to-atom-from-spec"
  coot::atom_spec_t *arg1 = 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::atom_spec_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__atom_spec_t, 1, 0);
  }
  result = (int)set_go_to_atom_from_spec((coot::atom_spec_t const &)*arg1);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_active_atom_spec ()
{
#define FUNC_NAME "active-atom-spec"
  std::pair<bool,std::pair<int,coot::atom_spec_t > > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = active_atom_spec();
  {
    std::pair<bool,std::pair<int,coot::atom_spec_t > > * resultptr;
    resultptr = new std::pair<bool,std::pair<int,coot::atom_spec_t > >((std::pair<bool,std::pair<int,coot::atom_spec_t > > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_get_symmetry (SCM s_0)
{
#define FUNC_NAME "get-symmetry"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)get_symmetry(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_map_colour_mol_menu_item (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "add-map-colour-mol-menu-item"
  int arg1 ;
  std::string *arg2 = 0 ;
  GtkWidget *arg3 = (GtkWidget *) 0 ;
  GtkSignalFunc arg4 ;
  GtkSignalFunc *argp4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
  }
  {
    arg3 = (GtkWidget *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_GtkWidget, 3, 0);
  }
  {
    argp4 = (GtkSignalFunc *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_GtkSignalFunc, 4, 0);
    arg4 = *argp4;
  }
  add_map_colour_mol_menu_item(arg1,(std::string const &)*arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_map_scroll_wheel_mol_menu_item (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "add-map-scroll-wheel-mol-menu-item"
  int arg1 ;
  std::string *arg2 = 0 ;
  GtkWidget *arg3 = (GtkWidget *) 0 ;
  GtkSignalFunc arg4 ;
  GtkSignalFunc *argp4 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
  }
  {
    arg3 = (GtkWidget *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_GtkWidget, 3, 0);
  }
  {
    argp4 = (GtkSignalFunc *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_GtkSignalFunc, 4, 0);
    arg4 = *argp4;
  }
  add_map_scroll_wheel_mol_menu_item(arg1,(std::string const &)*arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_map_colour_components (SCM s_0)
{
#define FUNC_NAME "map-colour-components"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)map_colour_components(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_refmac_real (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6, SCM s_7, SCM s_8, SCM s_9, SCM s_10, SCM s_11, SCM s_12, SCM s_13, SCM s_14, SCM s_15, SCM s_16)
{
#define FUNC_NAME "execute-refmac-real"
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  std::string arg8 ;
  short arg9 ;
  std::string arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  std::string arg15 ;
  std::string arg16 ;
  std::string arg17 ;
  std::string *argp1 ;
  std::string *argp2 ;
  std::string *argp3 ;
  std::string *argp4 ;
  std::string *argp5 ;
  std::string *argp6 ;
  std::string *argp7 ;
  std::string *argp8 ;
  std::string *argp10 ;
  std::string *argp15 ;
  std::string *argp16 ;
  std::string *argp17 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    argp1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
    arg1 = *argp1;
  }
  {
    argp2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
    arg2 = *argp2;
  }
  {
    argp3 = (std::string *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_std__string, 3, 0);
    arg3 = *argp3;
  }
  {
    argp4 = (std::string *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_std__string, 4, 0);
    arg4 = *argp4;
  }
  {
    argp5 = (std::string *)SWIG_MustGetPtr(s_4, SWIGTYPE_p_std__string, 5, 0);
    arg5 = *argp5;
  }
  {
    argp6 = (std::string *)SWIG_MustGetPtr(s_5, SWIGTYPE_p_std__string, 6, 0);
    arg6 = *argp6;
  }
  {
    argp7 = (std::string *)SWIG_MustGetPtr(s_6, SWIGTYPE_p_std__string, 7, 0);
    arg7 = *argp7;
  }
  {
    argp8 = (std::string *)SWIG_MustGetPtr(s_7, SWIGTYPE_p_std__string, 8, 0);
    arg8 = *argp8;
  }
  {
    arg9 = scm_num2short(s_8, SCM_ARG1, FUNC_NAME);
  }
  {
    argp10 = (std::string *)SWIG_MustGetPtr(s_9, SWIGTYPE_p_std__string, 10, 0);
    arg10 = *argp10;
  }
  {
    arg11 = scm_num2int(s_10, SCM_ARG1, FUNC_NAME);
  }
  {
    arg12 = scm_num2int(s_11, SCM_ARG1, FUNC_NAME);
  }
  {
    arg13 = scm_num2int(s_12, SCM_ARG1, FUNC_NAME);
  }
  {
    arg14 = scm_num2int(s_13, SCM_ARG1, FUNC_NAME);
  }
  {
    argp15 = (std::string *)SWIG_MustGetPtr(s_14, SWIGTYPE_p_std__string, 15, 0);
    arg15 = *argp15;
  }
  {
    argp16 = (std::string *)SWIG_MustGetPtr(s_15, SWIGTYPE_p_std__string, 16, 0);
    arg16 = *argp16;
  }
  {
    argp17 = (std::string *)SWIG_MustGetPtr(s_16, SWIGTYPE_p_std__string, 17, 0);
    arg17 = *argp17;
  }
  execute_refmac_real(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  gswig_result = SCM_UNSPECIFIED;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_refmac_real_rest (SCM rest)
{
SCM arg[17];
SWIG_Guile_GetArgs (arg, rest, 17, 0, "execute-refmac-real");
return _wrap_execute_refmac_real(arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7], arg[8], arg[9], arg[10], arg[11], arg[12], arg[13], arg[14], arg[15], arg[16]);
}
static SCM
_wrap_new_str_mtime__SWIG_0 (int argc, SCM *argv)
{
#define FUNC_NAME "new-str-mtime"
  std::string arg1 ;
  time_t arg2 ;
  coot::str_mtime *result = 0 ;
  std::string *argp1 ;
  time_t *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    argp1 = (std::string *)SWIG_MustGetPtr(argv[0], SWIGTYPE_p_std__string, 1, 0);
    arg1 = *argp1;
  }
  {
    argp2 = (time_t *)SWIG_MustGetPtr(argv[1], SWIGTYPE_p_time_t, 2, 0);
    arg2 = *argp2;
  }
  result = (coot::str_mtime *)new coot::str_mtime(arg1,arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__str_mtime, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_str_mtime__SWIG_1 (int argc, SCM *argv)
{
#define FUNC_NAME "new-str-mtime"
  coot::str_mtime *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (coot::str_mtime *)new coot::str_mtime();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__str_mtime, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_str_mtime(SCM rest)
{
#define FUNC_NAME "new-str-mtime"
  SCM argv[2];
  int argc = SWIG_Guile_GetArgs (argv, rest, 0, 2, "new-str-mtime");
  if (argc == 0) {
    return _wrap_new_str_mtime__SWIG_1(argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      int res = SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *ptr;
        int res = SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_time_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_str_mtime__SWIG_0(argc,argv);
      }
    }
  }
  
  scm_misc_error("new-str-mtime", "No matching method for generic function `new_str_mtime'", SCM_EOL);
#undef FUNC_NAME
}


static SCM
_wrap_str_mtime_mtime_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "str-mtime-mtime-set"
  coot::str_mtime *arg1 = (coot::str_mtime *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::str_mtime *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__str_mtime, 1, 0);
  }
  {
    argp2 = (time_t *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_time_t, 2, 0);
    arg2 = *argp2;
  }
  if (arg1) (arg1)->mtime = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_str_mtime_mtime_get (SCM s_0)
{
#define FUNC_NAME "str-mtime-mtime-get"
  coot::str_mtime *arg1 = (coot::str_mtime *) 0 ;
  time_t result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::str_mtime *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__str_mtime, 1, 0);
  }
  result =  ((arg1)->mtime);
  {
    time_t * resultptr;
    resultptr = new time_t((time_t &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_time_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_str_mtime_file_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "str-mtime-file-set"
  coot::str_mtime *arg1 = (coot::str_mtime *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::str_mtime *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__str_mtime, 1, 0);
  }
  {
    argp2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
    arg2 = *argp2;
  }
  if (arg1) (arg1)->file = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_str_mtime_file_get (SCM s_0)
{
#define FUNC_NAME "str-mtime-file-get"
  coot::str_mtime *arg1 = (coot::str_mtime *) 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::str_mtime *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__str_mtime, 1, 0);
  }
  result =  ((arg1)->file);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_str_mtime (SCM s_0)
{
#define FUNC_NAME "delete-str-mtime"
  coot::str_mtime *arg1 = (coot::str_mtime *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::str_mtime *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__str_mtime, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_file_attribs_info_t_directory_prefix_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "file-attribs-info-t-directory-prefix-set"
  coot::file_attribs_info_t *arg1 = (coot::file_attribs_info_t *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::file_attribs_info_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__file_attribs_info_t, 1, 0);
  }
  {
    argp2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
    arg2 = *argp2;
  }
  if (arg1) (arg1)->directory_prefix = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_file_attribs_info_t_directory_prefix_get (SCM s_0)
{
#define FUNC_NAME "file-attribs-info-t-directory-prefix-get"
  coot::file_attribs_info_t *arg1 = (coot::file_attribs_info_t *) 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::file_attribs_info_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__file_attribs_info_t, 1, 0);
  }
  result =  ((arg1)->directory_prefix);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_file_attribs_info_t_file_mtimes_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "file-attribs-info-t-file-mtimes-set"
  coot::file_attribs_info_t *arg1 = (coot::file_attribs_info_t *) 0 ;
  std::vector<coot::str_mtime > *arg2 = (std::vector<coot::str_mtime > *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::file_attribs_info_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__file_attribs_info_t, 1, 0);
  }
  {
    arg2 = (std::vector<coot::str_mtime > *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__vectorTcoot__str_mtime_t, 2, 0);
  }
  if (arg1) (arg1)->file_mtimes = *arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_file_attribs_info_t_file_mtimes_get (SCM s_0)
{
#define FUNC_NAME "file-attribs-info-t-file-mtimes-get"
  coot::file_attribs_info_t *arg1 = (coot::file_attribs_info_t *) 0 ;
  std::vector<coot::str_mtime > *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::file_attribs_info_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__file_attribs_info_t, 1, 0);
  }
  result = (std::vector<coot::str_mtime > *)& ((arg1)->file_mtimes);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_std__vectorTcoot__str_mtime_t, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_file_attribs_info_t ()
{
#define FUNC_NAME "new-file-attribs-info-t"
  coot::file_attribs_info_t *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (coot::file_attribs_info_t *)new coot::file_attribs_info_t();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__file_attribs_info_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_file_attribs_info_t (SCM s_0)
{
#define FUNC_NAME "delete-file-attribs-info-t"
  coot::file_attribs_info_t *arg1 = (coot::file_attribs_info_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::file_attribs_info_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__file_attribs_info_t, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_compare_mtimes (SCM s_0, SCM s_1)
{
#define FUNC_NAME "compare-mtimes"
  coot::str_mtime arg1 ;
  coot::str_mtime arg2 ;
  bool result;
  coot::str_mtime *argp1 ;
  coot::str_mtime *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    argp1 = (coot::str_mtime *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__str_mtime, 1, 0);
    arg1 = *argp1;
  }
  {
    argp2 = (coot::str_mtime *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_coot__str_mtime, 2, 0);
    arg2 = *argp2;
  }
  result = (bool)compare_mtimes(arg1,arg2);
  {
    gswig_result = SCM_BOOL(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_parse_ccp4i_defs (SCM s_0)
{
#define FUNC_NAME "parse-ccp4i-defs"
  std::string *arg1 = 0 ;
  std::vector<std::pair<std::string,std::string > > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = parse_ccp4i_defs((std::string const &)*arg1);
  {
    std::vector<std::pair<std::string,std::string > > * resultptr;
    resultptr = new std::vector<std::pair<std::string,std::string > >((std::vector<std::pair<std::string,std::string > > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__vectorTstd__pairTstd__string_std__string_t_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_ccp4_project_directory (SCM s_0)
{
#define FUNC_NAME "ccp4-project-directory"
  std::string *arg1 = 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = ccp4_project_directory((std::string const &)*arg1);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_INT(SCM s_0)
{
#define FUNC_NAME "command-arg-t-INT"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_command_arg_t_INT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_FLOAT(SCM s_0)
{
#define FUNC_NAME "command-arg-t-FLOAT"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_command_arg_t_FLOAT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_STRING(SCM s_0)
{
#define FUNC_NAME "command-arg-t-STRING"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_command_arg_t_STRING);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_command_arg_t__SWIG_0 (int argc, SCM *argv)
{
#define FUNC_NAME "new-command-arg-t"
  int arg1 ;
  coot::command_arg_t *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(argv[0], SCM_ARG1, FUNC_NAME);
  }
  result = (coot::command_arg_t *)new coot::command_arg_t(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__command_arg_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_command_arg_t__SWIG_1 (int argc, SCM *argv)
{
#define FUNC_NAME "new-command-arg-t"
  float arg1 ;
  coot::command_arg_t *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2dbl(argv[0], FUNC_NAME);
  }
  result = (coot::command_arg_t *)new coot::command_arg_t(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__command_arg_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_command_arg_t__SWIG_2 (int argc, SCM *argv)
{
#define FUNC_NAME "new-command-arg-t"
  clipper::String *arg1 = 0 ;
  coot::command_arg_t *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (clipper::String *)SWIG_MustGetPtr(argv[0], SWIGTYPE_p_clipper__String, 1, 0);
  }
  result = (coot::command_arg_t *)new coot::command_arg_t((clipper::String const &)*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__command_arg_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_command_arg_t__SWIG_3 (int argc, SCM *argv)
{
#define FUNC_NAME "new-command-arg-t"
  std::string *arg1 = 0 ;
  coot::command_arg_t *result = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(argv[0], SWIGTYPE_p_std__string, 1, 0);
  }
  result = (coot::command_arg_t *)new coot::command_arg_t((std::string const &)*arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__command_arg_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_command_arg_t__SWIG_4 (int argc, SCM *argv)
{
#define FUNC_NAME "new-command-arg-t"
  char *arg1 = (char *) 0 ;
  coot::command_arg_t *result = 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(argv[0]);
    must_free1 = 1;
  }
  result = (coot::command_arg_t *)new coot::command_arg_t((char const *)arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_coot__command_arg_t, 1);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_command_arg_t(SCM rest)
{
#define FUNC_NAME "new-command-arg-t"
  SCM argv[1];
  int argc = SWIG_Guile_GetArgs (argv, rest, 0, 1, "new-command-arg-t");
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      int res = SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_clipper__String, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_command_arg_t__SWIG_2(argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      int res = SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_command_arg_t__SWIG_3(argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SCM_NFALSEP(scm_integer_p(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_command_arg_t__SWIG_0(argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SCM_NFALSEP(scm_real_p(argv[0])) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_command_arg_t__SWIG_1(argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SCM_STRINGP(argv[0]) ? 1 : 0;
    }
    if (_v) {
      return _wrap_new_command_arg_t__SWIG_4(argc,argv);
    }
  }
  
  scm_misc_error("new-command-arg-t", "No matching method for generic function `new_command_arg_t'", SCM_EOL);
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_type_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "command-arg-t-type-set"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  coot::command_arg_t::coot_script_arg_type arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  {
    arg2 = (coot::command_arg_t::coot_script_arg_type) scm_num2int(s_1, SCM_ARG1, FUNC_NAME); 
  }
  if (arg1) (arg1)->type = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_type_get (SCM s_0)
{
#define FUNC_NAME "command-arg-t-type-get"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  coot::command_arg_t::coot_script_arg_type result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  result = (coot::command_arg_t::coot_script_arg_type) ((arg1)->type);
  {
    gswig_result = scm_long2num(result); 
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_f_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "command-arg-t-f-set"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  float arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  {
    arg2 = scm_num2dbl(s_1, FUNC_NAME);
  }
  if (arg1) (arg1)->f = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_f_get (SCM s_0)
{
#define FUNC_NAME "command-arg-t-f-get"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  float result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  result = (float) ((arg1)->f);
  {
    gswig_result = scm_make_real(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_i_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "command-arg-t-i-set"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  int arg2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  if (arg1) (arg1)->i = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_i_get (SCM s_0)
{
#define FUNC_NAME "command-arg-t-i-get"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  result = (int) ((arg1)->i);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_s_set (SCM s_0, SCM s_1)
{
#define FUNC_NAME "command-arg-t-s-set"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  clipper::String arg2 ;
  clipper::String *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  {
    argp2 = (clipper::String *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_clipper__String, 2, 0);
    arg2 = *argp2;
  }
  if (arg1) (arg1)->s = arg2;
  
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_s_get (SCM s_0)
{
#define FUNC_NAME "command-arg-t-s-get"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  clipper::String result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  result =  ((arg1)->s);
  {
    clipper::String * resultptr;
    resultptr = new clipper::String((clipper::String &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_clipper__String, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_command_arg_t_as_string (SCM s_0)
{
#define FUNC_NAME "command-arg-t-as-string"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  result = ((coot::command_arg_t const *)arg1)->as_string();
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_command_arg_t (SCM s_0)
{
#define FUNC_NAME "delete-command-arg-t"
  coot::command_arg_t *arg1 = (coot::command_arg_t *) 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::command_arg_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__command_arg_t, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_to_history (SCM s_0)
{
#define FUNC_NAME "add-to-history"
  std::vector<std::string > *arg1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<std::string > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTstd__string_t, 1, 0);
  }
  add_to_history((std::vector<std::string > const &)*arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_to_history_simple (SCM s_0)
{
#define FUNC_NAME "add-to-history-simple"
  std::string *arg1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  add_to_history_simple((std::string const &)*arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_to_history_typed (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-to-history-typed"
  std::string *arg1 = 0 ;
  std::vector<coot::command_arg_t > *arg2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  {
    arg2 = (std::vector<coot::command_arg_t > *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__vectorTcoot__command_arg_t_t, 2, 0);
  }
  add_to_history_typed((std::string const &)*arg1,(std::vector<coot::command_arg_t > const &)*arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_single_quote (SCM s_0)
{
#define FUNC_NAME "single-quote"
  std::string *arg1 = 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = single_quote((std::string const &)*arg1);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_pythonize_command_name (SCM s_0)
{
#define FUNC_NAME "pythonize-command-name"
  std::string *arg1 = 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = pythonize_command_name((std::string const &)*arg1);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_schemize_command_name (SCM s_0)
{
#define FUNC_NAME "schemize-command-name"
  std::string *arg1 = 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = schemize_command_name((std::string const &)*arg1);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_languagize_command (SCM s_0)
{
#define FUNC_NAME "languagize-command"
  std::vector<std::string > *arg1 = 0 ;
  std::string result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<std::string > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTstd__string_t, 1, 0);
  }
  result = languagize_command((std::vector<std::string > const &)*arg1);
  {
    std::string * resultptr;
    resultptr = new std::string((std::string &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__string, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_to_database (SCM s_0)
{
#define FUNC_NAME "add-to-database"
  std::vector<std::string > *arg1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<std::string > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTstd__string_t, 1, 0);
  }
  add_to_database((std::vector<std::string > const &)*arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_merge_molecules_by_vector (SCM s_0, SCM s_1)
{
#define FUNC_NAME "merge-molecules-by-vector"
  std::vector<int > *arg1 = 0 ;
  int arg2 ;
  std::pair<int,std::vector<std::string > > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTint_t, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = merge_molecules_by_vector((std::vector<int > const &)*arg1,arg2);
  {
    std::pair<int,std::vector<std::string > > * resultptr;
    resultptr = new std::pair<int,std::vector<std::string > >((std::pair<int,std::vector<std::string > > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__pairTint_std__vectorTstd__string_t_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_dictionaries_read ()
{
#define FUNC_NAME "dictionaries-read"
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (SCM)dictionaries_read();
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_monomer_restraints (SCM s_0)
{
#define FUNC_NAME "monomer-restraints"
  char *arg1 = (char *) 0 ;
  SCM result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (SCM)monomer_restraints((char const *)arg1);
  gswig_result=result;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_monomer_restraints (SCM s_0, SCM s_1)
{
#define FUNC_NAME "set-monomer-restraints"
  char *arg1 = (char *) 0 ;
  SCM arg2 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  arg2=s_1;
  set_monomer_restraints((char const *)arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_safe_scheme_command_test (SCM s_0)
{
#define FUNC_NAME "safe-scheme-command-test"
  char *arg1 = (char *) 0 ;
  SCM result;
  int must_free1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (char *)SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (SCM)safe_scheme_command_test((char const *)arg1);
  gswig_result=result;
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_safe_scheme_command (SCM s_0)
{
#define FUNC_NAME "safe-scheme-command"
  std::string *arg1 = 0 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  result = (SCM)safe_scheme_command((std::string const &)*arg1);
  gswig_result=result;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_run_generic_script (SCM s_0)
{
#define FUNC_NAME "run-generic-script"
  std::vector<std::string > *arg1 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<std::string > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTstd__string_t, 1, 0);
  }
  run_generic_script((std::vector<std::string > const &)*arg1);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_scm_residue (SCM s_0)
{
#define FUNC_NAME "scm-residue"
  coot::residue_spec_t *arg1 = 0 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (coot::residue_spec_t *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_coot__residue_spec_t, 1, 0);
  }
  result = (SCM)scm_residue((coot::residue_spec_t const &)*arg1);
  gswig_result=result;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_atom_info_string (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5)
{
#define FUNC_NAME "atom-info-string"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *result = 0 ;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  int must_free5 = 0 ;
  int must_free6 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  {
    arg6 = (char *)SWIG_scm2str(s_5);
    must_free6 = 1;
  }
  result = (char *)atom_info_string(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    gswig_result = scm_makfrom0str((const char *)result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  if (must_free5 && arg5) SWIG_free(arg5);
  if (must_free6 && arg6) SWIG_free(arg6);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_residue_info (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "residue-info"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  SCM result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (SCM)residue_info(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result=result;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_residue_name (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "residue-name"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  SCM result;
  int must_free2 = 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (char *)SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  result = (SCM)residue_name(arg1,(char const *)arg2,arg3,(char const *)arg4);
  gswig_result=result;
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_clear_and_update_molecule (SCM s_0, SCM s_1)
{
#define FUNC_NAME "clear-and-update-molecule"
  int arg1 ;
  SCM arg2 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  arg2=s_1;
  result = (int)clear_and_update_molecule(arg1,arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_add_molecule (SCM s_0, SCM s_1)
{
#define FUNC_NAME "add-molecule"
  SCM arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)add_molecule(arg1,(char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_active_residue ()
{
#define FUNC_NAME "active-residue"
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = (SCM)active_residue();
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_closest_atom (SCM s_0)
{
#define FUNC_NAME "closest-atom"
  int arg1 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (SCM)closest_atom(arg1);
  gswig_result=result;
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_spin_search_by_atom_vectors (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "spin-search-by-atom-vectors"
  int arg1 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  std::pair<std::string,std::string > *arg6 = 0 ;
  std::vector<std::string > *arg7 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (std::string *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_std__string, 3, 0);
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (std::string *)SWIG_MustGetPtr(s_4, SWIGTYPE_p_std__string, 5, 0);
  }
  {
    arg6 = (std::pair<std::string,std::string > *)SWIG_MustGetPtr(s_5, SWIGTYPE_p_std__pairTstd__string_std__string_t, 6, 0);
  }
  {
    arg7 = (std::vector<std::string > *)SWIG_MustGetPtr(s_6, SWIGTYPE_p_std__vectorTstd__string_t, 7, 0);
  }
  spin_search_by_atom_vectors(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::pair<std::string,std::string > const &)*arg6,(std::vector<std::string > const &)*arg7);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_spin_search (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4, SCM s_5, SCM s_6)
{
#define FUNC_NAME "spin-search"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  SCM arg6 ;
  SCM arg7 ;
  int must_free3 = 0 ;
  int must_free5 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = (char *)SWIG_scm2str(s_4);
    must_free5 = 1;
  }
  arg6=s_5;
  arg7=s_6;
  spin_search(arg1,arg2,(char const *)arg3,arg4,(char const *)arg5,arg6,arg7);
  gswig_result = SCM_UNSPECIFIED;
  if (must_free3 && arg3) SWIG_free(arg3);
  if (must_free5 && arg5) SWIG_free(arg5);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_monomer_lib_3_letter_codes_matching (SCM s_0, SCM s_1)
{
#define FUNC_NAME "monomer-lib-3-letter-codes-matching"
  std::string *arg1 = 0 ;
  short arg2 ;
  std::vector<std::pair<std::string,std::string > > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::string *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__string, 1, 0);
  }
  {
    arg2 = scm_num2short(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = monomer_lib_3_letter_codes_matching((std::string const &)*arg1,arg2);
  {
    std::vector<std::pair<std::string,std::string > > * resultptr;
    resultptr = new std::vector<std::pair<std::string,std::string > >((std::vector<std::pair<std::string,std::string > > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__vectorTstd__pairTstd__string_std__string_t_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_on_monomer_lib_search_results_button_press (SCM s_0, SCM s_1)
{
#define FUNC_NAME "on-monomer-lib-search-results-button-press"
  GtkButton *arg1 = (GtkButton *) 0 ;
  gpointer arg2 ;
  gpointer *argp2 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (GtkButton *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GtkButton, 1, 0);
  }
  {
    argp2 = (gpointer *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_gpointer, 2, 0);
    arg2 = *argp2;
  }
  on_monomer_lib_search_results_button_press(arg1,arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mutate_internal (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "mutate-internal"
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (char *)SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = (std::string *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_std__string, 4, 0);
  }
  result = (int)mutate_internal(arg1,(char const *)arg2,arg3,*arg4);
  {
    gswig_result = scm_long2num(result);
  }
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_execute_ligand_search_internal ()
{
#define FUNC_NAME "execute-ligand-search-internal"
  std::vector<int > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  result = execute_ligand_search_internal();
  {
    std::vector<int > * resultptr;
    resultptr = new std::vector<int >((std::vector<int > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__vectorTint_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_overlap_ligands_internal (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "overlap-ligands-internal"
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  coot::graph_match_info_t result;
  int must_free3 = 0 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (char *)SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  {
    arg4 = scm_num2int(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = SCM_NFALSEP(s_4);
  }
  result = overlap_ligands_internal(arg1,arg2,(char const *)arg3,arg4,arg5);
  {
    coot::graph_match_info_t * resultptr;
    resultptr = new coot::graph_match_info_t((coot::graph_match_info_t &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_coot__graph_match_info_t, 1);
  }
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_cootaneer_internal (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "cootaneer-internal"
  int arg1 ;
  int arg2 ;
  coot::atom_spec_t *arg3 = 0 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (coot::atom_spec_t *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_coot__atom_spec_t, 3, 0);
  }
  result = (int)cootaneer_internal(arg1,arg2,*arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_cootaneer (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "cootaneer"
  int arg1 ;
  int arg2 ;
  SCM arg3 ;
  int result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  arg3=s_2;
  result = (int)cootaneer(arg1,arg2,arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_is_interesting_dots_object_next_p (SCM s_0)
{
#define FUNC_NAME "is-interesting-dots-object-next-p"
  std::vector<std::string > *arg1 = 0 ;
  std::pair<short,std::string > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<std::string > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTstd__string_t, 1, 0);
  }
  result = is_interesting_dots_object_next_p((std::vector<std::string > const &)*arg1);
  {
    std::pair<short,std::string > * resultptr;
    resultptr = new std::pair<short,std::string >((std::pair<short,std::string > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__pairTshort_std__string_t, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_string_vector_to_list_internal (SCM s_0)
{
#define FUNC_NAME "generic-string-vector-to-list-internal"
  std::vector<std::string > *arg1 = 0 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<std::string > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTstd__string_t, 1, 0);
  }
  result = (SCM)generic_string_vector_to_list_internal((std::vector<std::string > const &)*arg1);
  gswig_result=result;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_int_vector_to_list_internal (SCM s_0)
{
#define FUNC_NAME "generic-int-vector-to-list-internal"
  std::vector<int > *arg1 = 0 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (std::vector<int > *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_std__vectorTint_t, 1, 0);
  }
  result = (SCM)generic_int_vector_to_list_internal((std::vector<int > const &)*arg1);
  gswig_result=result;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_generic_list_to_string_vector_internal (SCM s_0)
{
#define FUNC_NAME "generic-list-to-string-vector-internal"
  SCM arg1 ;
  std::vector<std::string > result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = generic_list_to_string_vector_internal(arg1);
  {
    std::vector<std::string > * resultptr;
    resultptr = new std::vector<std::string >((std::vector<std::string > &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_std__vectorTstd__string_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_rtop_to_scm (SCM s_0)
{
#define FUNC_NAME "rtop-to-scm"
  clipper::RTop_orth *arg1 = 0 ;
  SCM result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = (clipper::RTop_orth *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_clipper__RTop_orth, 1, 0);
  }
  result = (SCM)rtop_to_scm((clipper::RTop_orth const &)*arg1);
  gswig_result=result;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_atom_spec_from_scm_expression (SCM s_0)
{
#define FUNC_NAME "atom-spec-from-scm-expression"
  SCM arg1 ;
  coot::atom_spec_t result;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  arg1=s_0;
  result = atom_spec_from_scm_expression(arg1);
  {
    coot::atom_spec_t * resultptr;
    resultptr = new coot::atom_spec_t((coot::atom_spec_t &) result);
    gswig_result =  SWIG_NewPointerObj (resultptr, SWIGTYPE_p_coot__atom_spec_t, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_set_display_control_button_state (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "set-display-control-button-state"
  int arg1 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SCM gswig_result;
  SWIGUNUSED int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  {
    arg2 = (std::string *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__string, 2, 0);
  }
  {
    arg3 = scm_num2int(s_2, SCM_ARG1, FUNC_NAME);
  }
  set_display_control_button_state(arg1,(std::string const &)*arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


#ifdef __cplusplus
extern "C" {
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_GdkEventKey = {"_p_GdkEventKey", "GdkEventKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkAdjustment = {"_p_GtkAdjustment", "GtkAdjustment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkButton = {"_p_GtkButton", "GtkButton *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkEntry = {"_p_GtkEntry", "GtkEntry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkList = {"_p_GtkList", "GtkList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkMenuItem = {"_p_GtkMenuItem", "GtkMenuItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkPositionType = {"_p_GtkPositionType", "GtkPositionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkSignalFunc = {"_p_GtkSignalFunc", "GtkSignalFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkToggleButton = {"_p_GtkToggleButton", "GtkToggleButton *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GtkWidget = {"_p_GtkWidget", "GtkWidget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clipper__RTop_orth = {"_p_clipper__RTop_orth", "clipper::RTop_orth *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_clipper__String = {"_p_clipper__String", "clipper::String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coot__alias_path_t = {"_p_coot__alias_path_t", "coot::alias_path_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coot__atom_spec_t = {"_p_coot__atom_spec_t", "coot::atom_spec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coot__command_arg_t = {"_p_coot__command_arg_t", "coot::command_arg_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coot__file_attribs_info_t = {"_p_coot__file_attribs_info_t", "coot::file_attribs_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coot__graph_match_info_t = {"_p_coot__graph_match_info_t", "coot::graph_match_info_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coot__residue_spec_t = {"_p_coot__residue_spec_t", "coot::residue_spec_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coot__str_mtime = {"_p_coot__str_mtime", "coot::str_mtime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gboolean = {"_p_gboolean", "gboolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gchar = {"_p_gchar", "gchar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gdouble = {"_p_gdouble", "gdouble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gpointer = {"_p_gpointer", "gpointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_GSList = {"_p_p_GSList", "GSList **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t = {"_p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t", "std::pair<bool,std::pair<int,coot::atom_spec_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairTint_std__vectorTstd__string_t_t = {"_p_std__pairTint_std__vectorTstd__string_t_t", "std::pair<int,std::vector<std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairTshort_float_t = {"_p_std__pairTshort_float_t", "std::pair<short,float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairTshort_int_t = {"_p_std__pairTshort_int_t", "std::pair<short,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairTshort_std__string_t = {"_p_std__pairTshort_std__string_t", "std::pair<short,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairTstd__string_std__string_t = {"_p_std__pairTstd__string_std__string_t", "std::pair<std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTcoot__command_arg_t_t = {"_p_std__vectorTcoot__command_arg_t_t", "std::vector<coot::command_arg_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTcoot__str_mtime_t = {"_p_std__vectorTcoot__str_mtime_t", "std::vector<coot::str_mtime > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTint_t = {"_p_std__vectorTint_t", "std::vector<int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTstd__pairTstd__string_std__string_t_t = {"_p_std__vectorTstd__pairTstd__string_std__string_t_t", "std::vector<std::pair<std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_t = {"_p_std__vectorTstd__string_t", "std::vector<std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_time_t = {"_p_time_t", "time_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|SCM *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GdkEventKey,
  &_swigt__p_GtkAdjustment,
  &_swigt__p_GtkButton,
  &_swigt__p_GtkEntry,
  &_swigt__p_GtkList,
  &_swigt__p_GtkMenuItem,
  &_swigt__p_GtkPositionType,
  &_swigt__p_GtkSignalFunc,
  &_swigt__p_GtkToggleButton,
  &_swigt__p_GtkWidget,
  &_swigt__p_clipper__RTop_orth,
  &_swigt__p_clipper__String,
  &_swigt__p_coot__alias_path_t,
  &_swigt__p_coot__atom_spec_t,
  &_swigt__p_coot__command_arg_t,
  &_swigt__p_coot__file_attribs_info_t,
  &_swigt__p_coot__graph_match_info_t,
  &_swigt__p_coot__residue_spec_t,
  &_swigt__p_coot__str_mtime,
  &_swigt__p_double,
  &_swigt__p_gboolean,
  &_swigt__p_gchar,
  &_swigt__p_gdouble,
  &_swigt__p_gpointer,
  &_swigt__p_p_GSList,
  &_swigt__p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t,
  &_swigt__p_std__pairTint_std__vectorTstd__string_t_t,
  &_swigt__p_std__pairTshort_float_t,
  &_swigt__p_std__pairTshort_int_t,
  &_swigt__p_std__pairTshort_std__string_t,
  &_swigt__p_std__pairTstd__string_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorTcoot__command_arg_t_t,
  &_swigt__p_std__vectorTcoot__str_mtime_t,
  &_swigt__p_std__vectorTint_t,
  &_swigt__p_std__vectorTstd__pairTstd__string_std__string_t_t,
  &_swigt__p_std__vectorTstd__string_t,
  &_swigt__p_time_t,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_GdkEventKey[] = {  {&_swigt__p_GdkEventKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkAdjustment[] = {  {&_swigt__p_GtkAdjustment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkButton[] = {  {&_swigt__p_GtkButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkEntry[] = {  {&_swigt__p_GtkEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkList[] = {  {&_swigt__p_GtkList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkMenuItem[] = {  {&_swigt__p_GtkMenuItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkPositionType[] = {  {&_swigt__p_GtkPositionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkSignalFunc[] = {  {&_swigt__p_GtkSignalFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkToggleButton[] = {  {&_swigt__p_GtkToggleButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GtkWidget[] = {  {&_swigt__p_GtkWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clipper__RTop_orth[] = {  {&_swigt__p_clipper__RTop_orth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_clipper__String[] = {  {&_swigt__p_clipper__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coot__alias_path_t[] = {  {&_swigt__p_coot__alias_path_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coot__atom_spec_t[] = {  {&_swigt__p_coot__atom_spec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coot__command_arg_t[] = {  {&_swigt__p_coot__command_arg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coot__file_attribs_info_t[] = {  {&_swigt__p_coot__file_attribs_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coot__graph_match_info_t[] = {  {&_swigt__p_coot__graph_match_info_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coot__residue_spec_t[] = {  {&_swigt__p_coot__residue_spec_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coot__str_mtime[] = {  {&_swigt__p_coot__str_mtime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gboolean[] = {  {&_swigt__p_gboolean, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gchar[] = {  {&_swigt__p_gchar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gdouble[] = {  {&_swigt__p_gdouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gpointer[] = {  {&_swigt__p_gpointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GSList[] = {  {&_swigt__p_p_GSList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t[] = {  {&_swigt__p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairTint_std__vectorTstd__string_t_t[] = {  {&_swigt__p_std__pairTint_std__vectorTstd__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairTshort_float_t[] = {  {&_swigt__p_std__pairTshort_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairTshort_int_t[] = {  {&_swigt__p_std__pairTshort_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairTshort_std__string_t[] = {  {&_swigt__p_std__pairTshort_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairTstd__string_std__string_t[] = {  {&_swigt__p_std__pairTstd__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTcoot__command_arg_t_t[] = {  {&_swigt__p_std__vectorTcoot__command_arg_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTcoot__str_mtime_t[] = {  {&_swigt__p_std__vectorTcoot__str_mtime_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_t[] = {  {&_swigt__p_std__vectorTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__pairTstd__string_std__string_t_t[] = {  {&_swigt__p_std__vectorTstd__pairTstd__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_t[] = {  {&_swigt__p_std__vectorTstd__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_time_t[] = {  {&_swigt__p_time_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GdkEventKey,
  _swigc__p_GtkAdjustment,
  _swigc__p_GtkButton,
  _swigc__p_GtkEntry,
  _swigc__p_GtkList,
  _swigc__p_GtkMenuItem,
  _swigc__p_GtkPositionType,
  _swigc__p_GtkSignalFunc,
  _swigc__p_GtkToggleButton,
  _swigc__p_GtkWidget,
  _swigc__p_clipper__RTop_orth,
  _swigc__p_clipper__String,
  _swigc__p_coot__alias_path_t,
  _swigc__p_coot__atom_spec_t,
  _swigc__p_coot__command_arg_t,
  _swigc__p_coot__file_attribs_info_t,
  _swigc__p_coot__graph_match_info_t,
  _swigc__p_coot__residue_spec_t,
  _swigc__p_coot__str_mtime,
  _swigc__p_double,
  _swigc__p_gboolean,
  _swigc__p_gchar,
  _swigc__p_gdouble,
  _swigc__p_gpointer,
  _swigc__p_p_GSList,
  _swigc__p_std__pairTbool_std__pairTint_coot__atom_spec_t_t_t,
  _swigc__p_std__pairTint_std__vectorTstd__string_t_t,
  _swigc__p_std__pairTshort_float_t,
  _swigc__p_std__pairTshort_int_t,
  _swigc__p_std__pairTshort_std__string_t,
  _swigc__p_std__pairTstd__string_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorTcoot__command_arg_t_t,
  _swigc__p_std__vectorTcoot__str_mtime_t,
  _swigc__p_std__vectorTint_t,
  _swigc__p_std__vectorTstd__pairTstd__string_std__string_t_t,
  _swigc__p_std__vectorTstd__string_t,
  _swigc__p_time_t,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


SWIG_GUILE_INIT_STATIC void
SWIG_init(void)
{
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  
  scm_c_define_gsubr("COOT-SCHEME-DIR", 0, 0, 0, (swig_guile_proc) _wrap_COOT_SCHEME_DIR);
  scm_c_define_gsubr("try-load-scheme-extras-dir", 0, 0, 0, (swig_guile_proc) _wrap_try_load_scheme_extras_dir);
  scm_c_define_gsubr("make-directory-maybe", 1, 0, 0, (swig_guile_proc) _wrap_make_directory_maybe);
  scm_c_define_gsubr("set-show-paths-in-display-manager", 1, 0, 0, (swig_guile_proc) _wrap_set_show_paths_in_display_manager);
  scm_c_define_gsubr("show-paths-in-display-manager-state", 0, 0, 0, (swig_guile_proc) _wrap_show_paths_in_display_manager_state);
  scm_c_define_gsubr("gslist-for-scroll-in-display-manager-p", 0, 0, 0, (swig_guile_proc) _wrap_gslist_for_scroll_in_display_manager_p);
  scm_c_define_gsubr("add-coordinates-glob-extension", 1, 0, 0, (swig_guile_proc) _wrap_add_coordinates_glob_extension);
  scm_c_define_gsubr("add-data-glob-extension", 1, 0, 0, (swig_guile_proc) _wrap_add_data_glob_extension);
  scm_c_define_gsubr("add-dictionary-glob-extension", 1, 0, 0, (swig_guile_proc) _wrap_add_dictionary_glob_extension);
  scm_c_define_gsubr("add-map-glob-extension", 1, 0, 0, (swig_guile_proc) _wrap_add_map_glob_extension);
  scm_c_define_gsubr("set-sticky-sort-by-date", 0, 0, 0, (swig_guile_proc) _wrap_set_sticky_sort_by_date);
  scm_c_define_gsubr("set-filter-fileselection-filenames", 1, 0, 0, (swig_guile_proc) _wrap_set_filter_fileselection_filenames);
  scm_c_define_gsubr("set-file-selection-dialog-size", 1, 0, 0, (swig_guile_proc) _wrap_set_file_selection_dialog_size);
  scm_c_define_gsubr("filter-fileselection-filenames-state", 0, 0, 0, (swig_guile_proc) _wrap_filter_fileselection_filenames_state);
  scm_c_define_gsubr("on-filename-filter-toggle-button-toggled", 2, 0, 0, (swig_guile_proc) _wrap_on_filename_filter_toggle_button_toggled);
  scm_c_define_gsubr("add-filename-filter", 1, 0, 0, (swig_guile_proc) _wrap_add_filename_filter);
  scm_c_define_gsubr("add-filename-filter-button", 2, 0, 0, (swig_guile_proc) _wrap_add_filename_filter_button);
  scm_c_define_gsubr("add-filechooser-filter-button", 2, 0, 0, (swig_guile_proc) _wrap_add_filechooser_filter_button);
  scm_c_define_gsubr("add-filechooser-extra-filter-button", 3, 0, 0, (swig_guile_proc) _wrap_add_filechooser_extra_filter_button);
  scm_c_define_gsubr("on-filename-filter-key-press-event", 3, 0, 0, (swig_guile_proc) _wrap_on_filename_filter_key_press_event);
  scm_c_define_gsubr("fill-option-menu-with-coordinates-options", 3, 0, 0, (swig_guile_proc) _wrap_fill_option_menu_with_coordinates_options);
  scm_c_define_gsubr("coot-file-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_file_chooser);
  scm_c_define_gsubr("coot-dataset-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_dataset_chooser);
  scm_c_define_gsubr("coot-map-name-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_map_name_chooser);
  scm_c_define_gsubr("coot-save-coords-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_save_coords_chooser);
  scm_c_define_gsubr("coot-cif-dictionary-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_cif_dictionary_chooser);
  scm_c_define_gsubr("coot-run-script-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_run_script_chooser);
  scm_c_define_gsubr("coot-save-state-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_save_state_chooser);
  scm_c_define_gsubr("coot-save-symmetry-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_save_symmetry_chooser);
  scm_c_define_gsubr("coot-screendump-chooser", 0, 0, 0, (swig_guile_proc) _wrap_coot_screendump_chooser);
  scm_c_define_gsubr("set-directory-for-coot-file-chooser", 1, 0, 0, (swig_guile_proc) _wrap_set_directory_for_coot_file_chooser);
  scm_c_define_gsubr("coot-file-chooser-file-name", 1, 0, 0, (swig_guile_proc) _wrap_coot_file_chooser_file_name);
  scm_c_define_gsubr("set-filename-for-filechooserselection", 2, 0, 0, (swig_guile_proc) _wrap_set_filename_for_filechooserselection);
  scm_c_define_gsubr("set-file-chooser-selector", 1, 0, 0, (swig_guile_proc) _wrap_set_file_chooser_selector);
  scm_c_define_gsubr("file-chooser-selector-state", 0, 0, 0, (swig_guile_proc) _wrap_file_chooser_selector_state);
  scm_c_define_gsubr("set-file-chooser-overwrite", 1, 0, 0, (swig_guile_proc) _wrap_set_file_chooser_overwrite);
  scm_c_define_gsubr("file-chooser-overwrite-state", 0, 0, 0, (swig_guile_proc) _wrap_file_chooser_overwrite_state);
  scm_c_define_gsubr("get-positive-float-from-entry", 1, 0, 0, (swig_guile_proc) _wrap_get_positive_float_from_entry);
  scm_c_define_gsubr("handle-filename-filter-gtk2", 1, 0, 0, (swig_guile_proc) _wrap_handle_filename_filter_gtk2);
  scm_c_define_gsubr("set-transient-and-position", 2, 0, 0, (swig_guile_proc) _wrap_set_transient_and_position);
  scm_c_define_gsubr("info-dialog", 1, 0, 0, (swig_guile_proc) _wrap_info_dialog);
  scm_c_define_gsubr("main-menubar", 0, 0, 0, (swig_guile_proc) _wrap_main_menubar);
  scm_c_define_gsubr("main-statusbar", 0, 0, 0, (swig_guile_proc) _wrap_main_statusbar);
  scm_c_define_gsubr("manage-column-selector", 1, 0, 0, (swig_guile_proc) _wrap_manage_column_selector);
  scm_c_define_gsubr("fill-f-optionmenu-with-expert-options", 1, 0, 0, (swig_guile_proc) _wrap_fill_f_optionmenu_with_expert_options);
  scm_c_define_gsubr("handle-column-label-make-fourier", 1, 0, 0, (swig_guile_proc) _wrap_handle_column_label_make_fourier);
  scm_c_define_gsubr("chain-n-residues", 2, 0, 0, (swig_guile_proc) _wrap_chain_n_residues);
  scm_c_define_gsubr("molecule-centre-internal", 2, 0, 0, (swig_guile_proc) _wrap_molecule_centre_internal);
  scm_c_define_gsubr("resname-from-serial-number", 3, 0, 0, (swig_guile_proc) _wrap_resname_from_serial_number);
  scm_c_define_gsubr("seqnum-from-serial-number", 3, 0, 0, (swig_guile_proc) _wrap_seqnum_from_serial_number);
  scm_c_define_gsubr("insertion-code-from-serial-number", 3, 0, 0, (swig_guile_proc) _wrap_insertion_code_from_serial_number);
  scm_c_define_gsubr("chain-id", 2, 0, 0, (swig_guile_proc) _wrap_chain_id);
  scm_c_define_gsubr("n-chains", 1, 0, 0, (swig_guile_proc) _wrap_n_chains);
  scm_c_define_gsubr("is-solvent-chain-p", 2, 0, 0, (swig_guile_proc) _wrap_is_solvent_chain_p);
  scm_c_define_gsubr("copy-molecule", 1, 0, 0, (swig_guile_proc) _wrap_copy_molecule);
  scm_c_define_gsubr("exchange-chain-ids-for-seg-ids", 1, 0, 0, (swig_guile_proc) _wrap_exchange_chain_ids_for_seg_ids);
  scm_c_define_gsubr("coot-version", 0, 0, 0, (swig_guile_proc) _wrap_coot_version);
  scm_c_define_gsubr("molecule-name", 1, 0, 0, (swig_guile_proc) _wrap_molecule_name);
  scm_c_define_gsubr("set-molecule-name", 2, 0, 0, (swig_guile_proc) _wrap_set_molecule_name);
  scm_c_define_gsubr("main-window", 0, 0, 0, (swig_guile_proc) _wrap_main_window);
  scm_c_define_gsubr("coot-checked-exit", 1, 0, 0, (swig_guile_proc) _wrap_coot_checked_exit);
  scm_c_define_gsubr("coot-real-exit", 1, 0, 0, (swig_guile_proc) _wrap_coot_real_exit);
  scm_c_define_gsubr("coot-clear-backup-or-real-exit", 1, 0, 0, (swig_guile_proc) _wrap_coot_clear_backup_or_real_exit);
  scm_c_define_gsubr("run-clear-backups", 1, 0, 0, (swig_guile_proc) _wrap_run_clear_backups);
  scm_c_define_gsubr("fill-about-window", 1, 0, 0, (swig_guile_proc) _wrap_fill_about_window);
  scm_c_define_gsubr("first-coords-imol", 0, 0, 0, (swig_guile_proc) _wrap_first_coords_imol);
  scm_c_define_gsubr("set-do-anti-aliasing", 1, 0, 0, (swig_guile_proc) _wrap_set_do_anti_aliasing);
  scm_c_define_gsubr("do-anti-aliasing-state", 0, 0, 0, (swig_guile_proc) _wrap_do_anti_aliasing_state);
  scm_c_define_gsubr("set-do-GL-lighting", 1, 0, 0, (swig_guile_proc) _wrap_set_do_GL_lighting);
  scm_c_define_gsubr("do-GL-lighting-state", 0, 0, 0, (swig_guile_proc) _wrap_do_GL_lighting_state);
  scm_c_define_gsubr("use-graphics-interface-state", 0, 0, 0, (swig_guile_proc) _wrap_use_graphics_interface_state);
  scm_c_define_gsubr("start-graphics-interface", 0, 0, 0, (swig_guile_proc) _wrap_start_graphics_interface);
  scm_c_define_gsubr("reset-view", 0, 0, 0, (swig_guile_proc) _wrap_reset_view);
  scm_c_define_gsubr("graphics-n-molecules", 0, 0, 0, (swig_guile_proc) _wrap_graphics_n_molecules);
  scm_c_define_gsubr("next-map-for-molecule", 1, 0, 0, (swig_guile_proc) _wrap_next_map_for_molecule);
  scm_c_define_gsubr("toggle-idle-spin-function", 0, 0, 0, (swig_guile_proc) _wrap_toggle_idle_spin_function);
  scm_c_define_gsubr("set-idle-function-rotate-angle", 1, 0, 0, (swig_guile_proc) _wrap_set_idle_function_rotate_angle);
  scm_c_define_gsubr("idle-function-rotate-angle", 0, 0, 0, (swig_guile_proc) _wrap_idle_function_rotate_angle);
  scm_c_define_gsubr("handle-read-draw-molecule", 1, 0, 0, (swig_guile_proc) _wrap_handle_read_draw_molecule);
  scm_c_define_gsubr("handle-read-draw-molecule-with-recentre", 2, 0, 0, (swig_guile_proc) _wrap_handle_read_draw_molecule_with_recentre);
  scm_c_define_gsubr("read-pdb", 1, 0, 0, (swig_guile_proc) _wrap_read_pdb);
  scm_c_define_gsubr("replace-fragment", 3, 0, 0, (swig_guile_proc) _wrap_replace_fragment);
  scm_c_define_gsubr("clear-and-update-model-molecule-from-file", 2, 0, 0, (swig_guile_proc) _wrap_clear_and_update_model_molecule_from_file);
  scm_c_define_gsubr("screendump-image", 1, 0, 0, (swig_guile_proc) _wrap_screendump_image);
  scm_c_define_gsubr("add-is-difference-map-checkbutton", 1, 0, 0, (swig_guile_proc) _wrap_add_is_difference_map_checkbutton);
  scm_c_define_gsubr("on-read-map-difference-map-toggle-button-toggled", 2, 0, 0, (swig_guile_proc) _wrap_on_read_map_difference_map_toggle_button_toggled);
  scm_c_define_gsubr("add-recentre-on-read-pdb-checkbutton", 1, 0, 0, (swig_guile_proc) _wrap_add_recentre_on_read_pdb_checkbutton);
  scm_c_define_gsubr("on-recentre-on-read-pdb-toggle-button-toggled", 2, 0, 0, (swig_guile_proc) _wrap_on_recentre_on_read_pdb_toggle_button_toggled);
  scm_c_define_gsubr("set-scroll-by-wheel-mouse", 1, 0, 0, (swig_guile_proc) _wrap_set_scroll_by_wheel_mouse);
  scm_c_define_gsubr("scroll-by-wheel-mouse-state", 0, 0, 0, (swig_guile_proc) _wrap_scroll_by_wheel_mouse_state);
  scm_c_define_gsubr("set-default-initial-contour-level-for-map", 1, 0, 0, (swig_guile_proc) _wrap_set_default_initial_contour_level_for_map);
  scm_c_define_gsubr("set-default-initial-contour-level-for-difference-map", 1, 0, 0, (swig_guile_proc) _wrap_set_default_initial_contour_level_for_difference_map);
  scm_c_define_gsubr("print-view-matrix", 0, 0, 0, (swig_guile_proc) _wrap_print_view_matrix);
  scm_c_define_gsubr("get-view-matrix-element", 2, 0, 0, (swig_guile_proc) _wrap_get_view_matrix_element);
  scm_c_define_gsubr("get-view-quaternion-internal", 1, 0, 0, (swig_guile_proc) _wrap_get_view_quaternion_internal);
  scm_c_define_gsubr("set-view-quaternion", 4, 0, 0, (swig_guile_proc) _wrap_set_view_quaternion);
  scm_c_define_gsubr("apply-ncs-to-view-orientation", 3, 0, 0, (swig_guile_proc) _wrap_apply_ncs_to_view_orientation);
  scm_c_define_gsubr("set-fps-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_fps_flag);
  scm_c_define_gsubr("get-fps-flag", 0, 0, 0, (swig_guile_proc) _wrap_get_fps_flag);
  scm_c_define_gsubr("set-show-origin-marker", 1, 0, 0, (swig_guile_proc) _wrap_set_show_origin_marker);
  scm_c_define_gsubr("show-origin-marker-state", 0, 0, 0, (swig_guile_proc) _wrap_show_origin_marker_state);
  scm_c_define_gsubr("suck-model-fit-dialog", 0, 0, 0, (swig_guile_proc) _wrap_suck_model_fit_dialog);
  scm_c_define_gsubr("suck-model-fit-dialog-bl", 0, 0, 0, (swig_guile_proc) _wrap_suck_model_fit_dialog_bl);
  scm_c_define_gsubr("close-model-fit-dialog", 1, 0, 0, (swig_guile_proc) _wrap_close_model_fit_dialog);
  scm_c_define_gsubr("popup-window", 1, 0, 0, (swig_guile_proc) _wrap_popup_window);
  scm_c_define_gsubr("add-status-bar-text", 1, 0, 0, (swig_guile_proc) _wrap_add_status_bar_text);
  scm_c_define_gsubr("set-model-fit-refine-dialog-stays-on-top", 1, 0, 0, (swig_guile_proc) _wrap_set_model_fit_refine_dialog_stays_on_top);
  scm_c_define_gsubr("model-fit-refine-dialog-stays-on-top-state", 0, 0, 0, (swig_guile_proc) _wrap_model_fit_refine_dialog_stays_on_top_state);
  scm_c_define_gsubr("save-accept-reject-dialog-window-position", 1, 0, 0, (swig_guile_proc) _wrap_save_accept_reject_dialog_window_position);
  scm_c_define_gsubr("set-accept-reject-dialog", 1, 0, 0, (swig_guile_proc) _wrap_set_accept_reject_dialog);
  scm_c_define_gsubr("set-accept-reject-dialog-docked", 1, 0, 0, (swig_guile_proc) _wrap_set_accept_reject_dialog_docked);
  scm_c_define_gsubr("accept-reject-dialog-docked-state", 0, 0, 0, (swig_guile_proc) _wrap_accept_reject_dialog_docked_state);
  scm_c_define_gsubr("quanta-buttons", 0, 0, 0, (swig_guile_proc) _wrap_quanta_buttons);
  scm_c_define_gsubr("quanta-like-zoom", 0, 0, 0, (swig_guile_proc) _wrap_quanta_like_zoom);
  scm_c_define_gsubr("set-control-key-for-rotate", 1, 0, 0, (swig_guile_proc) _wrap_set_control_key_for_rotate);
  scm_c_define_gsubr("control-key-for-rotate-state", 0, 0, 0, (swig_guile_proc) _wrap_control_key_for_rotate_state);
  scm_c_define_gsubr("blob-under-pointer-to-screen-centre", 0, 0, 0, (swig_guile_proc) _wrap_blob_under_pointer_to_screen_centre);
  scm_c_define_gsubr("normal-cursor", 0, 0, 0, (swig_guile_proc) _wrap_normal_cursor);
  scm_c_define_gsubr("fleur-cursor", 0, 0, 0, (swig_guile_proc) _wrap_fleur_cursor);
  scm_c_define_gsubr("pick-cursor-maybe", 0, 0, 0, (swig_guile_proc) _wrap_pick_cursor_maybe);
  scm_c_define_gsubr("rotate-cursor", 0, 0, 0, (swig_guile_proc) _wrap_rotate_cursor);
  scm_c_define_gsubr("set-pick-cursor-index", 1, 0, 0, (swig_guile_proc) _wrap_set_pick_cursor_index);
  scm_c_define_gsubr("post-model-fit-refine-dialog", 0, 0, 0, (swig_guile_proc) _wrap_post_model_fit_refine_dialog);
  scm_c_define_gsubr("wrapped-create-model-fit-refine-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_model_fit_refine_dialog);
  scm_c_define_gsubr("unset-model-fit-refine-dialog", 0, 0, 0, (swig_guile_proc) _wrap_unset_model_fit_refine_dialog);
  scm_c_define_gsubr("unset-refine-params-dialog", 0, 0, 0, (swig_guile_proc) _wrap_unset_refine_params_dialog);
  scm_c_define_gsubr("show-select-map-dialog", 0, 0, 0, (swig_guile_proc) _wrap_show_select_map_dialog);
  scm_c_define_gsubr("set-model-fit-refine-rotate-translate-zone-label", 1, 0, 0, (swig_guile_proc) _wrap_set_model_fit_refine_rotate_translate_zone_label);
  scm_c_define_gsubr("set-model-fit-refine-place-atom-at-pointer-label", 1, 0, 0, (swig_guile_proc) _wrap_set_model_fit_refine_place_atom_at_pointer_label);
  scm_c_define_gsubr("wrapped-create-other-model-tools-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_other_model_tools_dialog);
  scm_c_define_gsubr("unset-other-modelling-tools-dialog", 0, 0, 0, (swig_guile_proc) _wrap_unset_other_modelling_tools_dialog);
  scm_c_define_gsubr("post-other-modelling-tools-dialog", 0, 0, 0, (swig_guile_proc) _wrap_post_other_modelling_tools_dialog);
  scm_c_define_gsubr("make-backup", 1, 0, 0, (swig_guile_proc) _wrap_make_backup);
  scm_c_define_gsubr("turn-off-backup", 1, 0, 0, (swig_guile_proc) _wrap_turn_off_backup);
  scm_c_define_gsubr("turn-on-backup", 1, 0, 0, (swig_guile_proc) _wrap_turn_on_backup);
  scm_c_define_gsubr("backup-state", 1, 0, 0, (swig_guile_proc) _wrap_backup_state);
  scm_c_define_gsubr("apply-undo", 0, 0, 0, (swig_guile_proc) _wrap_apply_undo);
  scm_c_define_gsubr("apply-redo", 0, 0, 0, (swig_guile_proc) _wrap_apply_redo);
  scm_c_define_gsubr("set-have-unsaved-changes", 1, 0, 0, (swig_guile_proc) _wrap_set_have_unsaved_changes);
  scm_c_define_gsubr("have-unsaved-changes-p", 1, 0, 0, (swig_guile_proc) _wrap_have_unsaved_changes_p);
  scm_c_define_gsubr("set-undo-molecule", 1, 0, 0, (swig_guile_proc) _wrap_set_undo_molecule);
  scm_c_define_gsubr("show-set-undo-molecule-chooser", 0, 0, 0, (swig_guile_proc) _wrap_show_set_undo_molecule_chooser);
  scm_c_define_gsubr("set-unpathed-backup-file-names", 1, 0, 0, (swig_guile_proc) _wrap_set_unpathed_backup_file_names);
  scm_c_define_gsubr("unpathed-backup-file-names-state", 0, 0, 0, (swig_guile_proc) _wrap_unpathed_backup_file_names_state);
  scm_c_define_gsubr("recover-session", 0, 0, 0, (swig_guile_proc) _wrap_recover_session);
  scm_c_define_gsubr("execute-recover-session", 1, 0, 0, (swig_guile_proc) _wrap_execute_recover_session);
  scm_c_define_gsubr("calc-phases-generic", 1, 0, 0, (swig_guile_proc) _wrap_calc_phases_generic);
  scm_c_define_gsubr("map-from-mtz-by-refmac-calc-phases", 4, 0, 0, (swig_guile_proc) _wrap_map_from_mtz_by_refmac_calc_phases);
  scm_c_define_gsubr("map-from-mtz-by-calc-phases", 4, 0, 0, (swig_guile_proc) _wrap_map_from_mtz_by_calc_phases);
  scm_c_define_gsubr("get-map-colour", 1, 0, 0, (swig_guile_proc) _wrap_get_map_colour);
  scm_c_define_gsubr("add-on-map-colour-choices", 1, 0, 0, (swig_guile_proc) _wrap_add_on_map_colour_choices);
  scm_c_define_gsubr("map-colour-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_map_colour_mol_selector_activate);
  scm_c_define_gsubr("my-delete-menu-items", 2, 0, 0, (swig_guile_proc) _wrap_my_delete_menu_items);
  scm_c_define_gsubr("add-on-map-scroll-whell-choices", 1, 0, 0, (swig_guile_proc) _wrap_add_on_map_scroll_whell_choices);
  scm_c_define_gsubr("map-scroll-wheel-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_map_scroll_wheel_mol_selector_activate);
  scm_c_define_gsubr("scroll-wheel-map", 0, 0, 0, (swig_guile_proc) _wrap_scroll_wheel_map);
  scm_c_define_gsubr("save-previous-map-colour", 1, 0, 0, (swig_guile_proc) _wrap_save_previous_map_colour);
  scm_c_define_gsubr("restore-previous-map-colour", 1, 0, 0, (swig_guile_proc) _wrap_restore_previous_map_colour);
  scm_c_define_gsubr("set-active-map-drag-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_active_map_drag_flag);
  scm_c_define_gsubr("get-active-map-drag-flag", 0, 0, 0, (swig_guile_proc) _wrap_get_active_map_drag_flag);
  scm_c_define_gsubr("set-last-map-colour", 3, 0, 0, (swig_guile_proc) _wrap_set_last_map_colour);
  scm_c_define_gsubr("set-map-colour", 4, 0, 0, (swig_guile_proc) _wrap_set_map_colour);
  scm_c_define_gsubr("handle-map-colour-change", 2, 0, 0, (swig_guile_proc) _wrap_handle_map_colour_change);
  scm_c_define_gsubr("handle-symmetry-colour-change", 2, 0, 0, (swig_guile_proc) _wrap_handle_symmetry_colour_change);
  scm_c_define_gsubr("fill-single-map-properties-dialog", 2, 0, 0, (swig_guile_proc) _wrap_fill_single_map_properties_dialog);
  scm_c_define_gsubr("set-contour-level-absolute", 2, 0, 0, (swig_guile_proc) _wrap_set_contour_level_absolute);
  scm_c_define_gsubr("set-contour-level-in-sigma", 2, 0, 0, (swig_guile_proc) _wrap_set_contour_level_in_sigma);
  scm_c_define_gsubr("set-last-map-sigma-step", 1, 0, 0, (swig_guile_proc) _wrap_set_last_map_sigma_step);
  scm_c_define_gsubr("set-contour-sigma-button-and-entry", 2, 0, 0, (swig_guile_proc) _wrap_set_contour_sigma_button_and_entry);
  scm_c_define_gsubr("set-contour-by-sigma-step-maybe", 2, 0, 0, (swig_guile_proc) _wrap_set_contour_by_sigma_step_maybe);
  scm_c_define_gsubr("set-contour-by-sigma-step-by-mol", 3, 0, 0, (swig_guile_proc) _wrap_set_contour_by_sigma_step_by_mol);
  scm_c_define_gsubr("data-resolution", 1, 0, 0, (swig_guile_proc) _wrap_data_resolution);
  scm_c_define_gsubr("solid-surface", 2, 0, 0, (swig_guile_proc) _wrap_solid_surface);
  scm_c_define_gsubr("export-map", 2, 0, 0, (swig_guile_proc) _wrap_export_map);
  scm_c_define_gsubr("transform-map-raw", 0, 0, 1, (swig_guile_proc) _wrap_transform_map_raw_rest);
  scm_c_define_gsubr("rotate-map-round-screen-axis-x", 1, 0, 0, (swig_guile_proc) _wrap_rotate_map_round_screen_axis_x);
  scm_c_define_gsubr("rotate-map-round-screen-axis-y", 1, 0, 0, (swig_guile_proc) _wrap_rotate_map_round_screen_axis_y);
  scm_c_define_gsubr("rotate-map-round-screen-axis-z", 1, 0, 0, (swig_guile_proc) _wrap_rotate_map_round_screen_axis_z);
  scm_c_define_gsubr("get-text-for-iso-level-increment-entry", 1, 0, 0, (swig_guile_proc) _wrap_get_text_for_iso_level_increment_entry);
  scm_c_define_gsubr("get-text-for-diff-map-iso-level-increment-entry", 1, 0, 0, (swig_guile_proc) _wrap_get_text_for_diff_map_iso_level_increment_entry);
  scm_c_define_gsubr("set-iso-level-increment", 1, 0, 0, (swig_guile_proc) _wrap_set_iso_level_increment);
  scm_c_define_gsubr("set-iso-level-increment-from-text", 2, 0, 0, (swig_guile_proc) _wrap_set_iso_level_increment_from_text);
  scm_c_define_gsubr("set-diff-map-iso-level-increment", 1, 0, 0, (swig_guile_proc) _wrap_set_diff_map_iso_level_increment);
  scm_c_define_gsubr("set-diff-map-iso-level-increment-from-text", 2, 0, 0, (swig_guile_proc) _wrap_set_diff_map_iso_level_increment_from_text);
  scm_c_define_gsubr("single-map-properties-apply-contour-level-to-map", 1, 0, 0, (swig_guile_proc) _wrap_single_map_properties_apply_contour_level_to_map);
  scm_c_define_gsubr("set-map-sampling-rate-text", 1, 0, 0, (swig_guile_proc) _wrap_set_map_sampling_rate_text);
  scm_c_define_gsubr("set-map-sampling-rate", 1, 0, 0, (swig_guile_proc) _wrap_set_map_sampling_rate);
  scm_c_define_gsubr("get-text-for-map-sampling-rate-text", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_map_sampling_rate_text);
  scm_c_define_gsubr("get-map-sampling-rate", 0, 0, 0, (swig_guile_proc) _wrap_get_map_sampling_rate);
  scm_c_define_gsubr("set-scrollable-map", 1, 0, 0, (swig_guile_proc) _wrap_set_scrollable_map);
  scm_c_define_gsubr("change-contour-level", 1, 0, 0, (swig_guile_proc) _wrap_change_contour_level);
  scm_c_define_gsubr("set-last-map-contour-level", 1, 0, 0, (swig_guile_proc) _wrap_set_last_map_contour_level);
  scm_c_define_gsubr("set-last-map-contour-level-by-sigma", 1, 0, 0, (swig_guile_proc) _wrap_set_last_map_contour_level_by_sigma);
  scm_c_define_gsubr("set-stop-scroll-diff-map", 1, 0, 0, (swig_guile_proc) _wrap_set_stop_scroll_diff_map);
  scm_c_define_gsubr("set-stop-scroll-iso-map", 1, 0, 0, (swig_guile_proc) _wrap_set_stop_scroll_iso_map);
  scm_c_define_gsubr("set-stop-scroll-iso-map-level", 1, 0, 0, (swig_guile_proc) _wrap_set_stop_scroll_iso_map_level);
  scm_c_define_gsubr("set-stop-scroll-diff-map-level", 1, 0, 0, (swig_guile_proc) _wrap_set_stop_scroll_diff_map_level);
  scm_c_define_gsubr("set-residue-density-fit-scale-factor", 1, 0, 0, (swig_guile_proc) _wrap_set_residue_density_fit_scale_factor);
  scm_c_define_gsubr("set-map-line-width", 1, 0, 0, (swig_guile_proc) _wrap_set_map_line_width);
  scm_c_define_gsubr("map-line-width-state", 0, 0, 0, (swig_guile_proc) _wrap_map_line_width_state);
  scm_c_define_gsubr("make-and-draw-map", 6, 0, 0, (swig_guile_proc) _wrap_make_and_draw_map);
  scm_c_define_gsubr("make-and-draw-map-with-refmac-params", 0, 0, 1, (swig_guile_proc) _wrap_make_and_draw_map_with_refmac_params_rest);
  scm_c_define_gsubr("make-and-draw-map-with-reso-with-refmac-params", 0, 0, 1, (swig_guile_proc) _wrap_make_and_draw_map_with_reso_with_refmac_params_rest);
  scm_c_define_gsubr("refmac-parameters-scm", 1, 0, 0, (swig_guile_proc) _wrap_refmac_parameters_scm);
  scm_c_define_gsubr("valid-labels", 5, 0, 0, (swig_guile_proc) _wrap_valid_labels);
  scm_c_define_gsubr("mtz-file-has-phases-p", 1, 0, 0, (swig_guile_proc) _wrap_mtz_file_has_phases_p);
  scm_c_define_gsubr("is-mtz-file-p", 1, 0, 0, (swig_guile_proc) _wrap_is_mtz_file_p);
  scm_c_define_gsubr("auto-read-make-and-draw-maps", 1, 0, 0, (swig_guile_proc) _wrap_auto_read_make_and_draw_maps);
  scm_c_define_gsubr("set-auto-read-do-difference-map-too", 1, 0, 0, (swig_guile_proc) _wrap_set_auto_read_do_difference_map_too);
  scm_c_define_gsubr("auto-read-do-difference-map-too-state", 0, 0, 0, (swig_guile_proc) _wrap_auto_read_do_difference_map_too_state);
  scm_c_define_gsubr("set-auto-read-column-labels", 3, 0, 0, (swig_guile_proc) _wrap_set_auto_read_column_labels);
  scm_c_define_gsubr("get-text-for-density-size-widget", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_density_size_widget);
  scm_c_define_gsubr("set-density-size-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_density_size_from_widget);
  scm_c_define_gsubr("set-map-radius", 1, 0, 0, (swig_guile_proc) _wrap_set_map_radius);
  scm_c_define_gsubr("set-density-size", 1, 0, 0, (swig_guile_proc) _wrap_set_density_size);
  scm_c_define_gsubr("set-map-radius-slider-max", 1, 0, 0, (swig_guile_proc) _wrap_set_map_radius_slider_max);
  scm_c_define_gsubr("set-display-intro-string", 1, 0, 0, (swig_guile_proc) _wrap_set_display_intro_string);
  scm_c_define_gsubr("set-esoteric-depth-cue", 1, 0, 0, (swig_guile_proc) _wrap_set_esoteric_depth_cue);
  scm_c_define_gsubr("esoteric-depth-cue-state", 0, 0, 0, (swig_guile_proc) _wrap_esoteric_depth_cue_state);
  scm_c_define_gsubr("set-swap-difference-map-colours", 1, 0, 0, (swig_guile_proc) _wrap_set_swap_difference_map_colours);
  scm_c_define_gsubr("set-map-is-difference-map", 1, 0, 0, (swig_guile_proc) _wrap_set_map_is_difference_map);
  scm_c_define_gsubr("map-is-difference-map", 1, 0, 0, (swig_guile_proc) _wrap_map_is_difference_map);
  scm_c_define_gsubr("another-level", 0, 0, 0, (swig_guile_proc) _wrap_another_level);
  scm_c_define_gsubr("another-level-from-map-molecule-number", 1, 0, 0, (swig_guile_proc) _wrap_another_level_from_map_molecule_number);
  scm_c_define_gsubr("residue-density-fit-scale-factor", 0, 0, 0, (swig_guile_proc) _wrap_residue_density_fit_scale_factor);
  scm_c_define_gsubr("density-at-point", 4, 0, 0, (swig_guile_proc) _wrap_density_at_point);
  scm_c_define_gsubr("mtz-hklin-for-map", 1, 0, 0, (swig_guile_proc) _wrap_mtz_hklin_for_map);
  scm_c_define_gsubr("mtz-fp-for-map", 1, 0, 0, (swig_guile_proc) _wrap_mtz_fp_for_map);
  scm_c_define_gsubr("mtz-phi-for-map", 1, 0, 0, (swig_guile_proc) _wrap_mtz_phi_for_map);
  scm_c_define_gsubr("mtz-weight-for-map", 1, 0, 0, (swig_guile_proc) _wrap_mtz_weight_for_map);
  scm_c_define_gsubr("mtz-use-weight-for-map", 1, 0, 0, (swig_guile_proc) _wrap_mtz_use_weight_for_map);
  scm_c_define_gsubr("write-pdb-file", 2, 0, 0, (swig_guile_proc) _wrap_write_pdb_file);
  scm_c_define_gsubr("write-residue-range-to-pdb-file", 5, 0, 0, (swig_guile_proc) _wrap_write_residue_range_to_pdb_file);
  scm_c_define_gsubr("execute-refmac", 1, 0, 0, (swig_guile_proc) _wrap_execute_refmac);
  scm_c_define_gsubr("refmac-molecule-button-select", 2, 0, 0, (swig_guile_proc) _wrap_refmac_molecule_button_select);
  scm_c_define_gsubr("set-refmac-molecule", 1, 0, 0, (swig_guile_proc) _wrap_set_refmac_molecule);
  scm_c_define_gsubr("fill-option-menu-with-refmac-options", 1, 0, 0, (swig_guile_proc) _wrap_fill_option_menu_with_refmac_options);
  scm_c_define_gsubr("free-memory-run-refmac", 1, 0, 0, (swig_guile_proc) _wrap_free_memory_run_refmac);
  scm_c_define_gsubr("set-refmac-counter", 2, 0, 0, (swig_guile_proc) _wrap_set_refmac_counter);
  scm_c_define_gsubr("refmac-name", 1, 0, 0, (swig_guile_proc) _wrap_refmac_name);
  scm_c_define_gsubr("swap-map-colours", 2, 0, 0, (swig_guile_proc) _wrap_swap_map_colours);
  scm_c_define_gsubr("set-keep-map-colour-after-refmac", 1, 0, 0, (swig_guile_proc) _wrap_set_keep_map_colour_after_refmac);
  scm_c_define_gsubr("keep-map-colour-after-refmac-state", 0, 0, 0, (swig_guile_proc) _wrap_keep_map_colour_after_refmac_state);
  scm_c_define_gsubr("get-text-for-symmetry-size-widget", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_symmetry_size_widget);
  scm_c_define_gsubr("set-symmetry-size-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_symmetry_size_from_widget);
  scm_c_define_gsubr("set-symmetry-size", 1, 0, 0, (swig_guile_proc) _wrap_set_symmetry_size);
  scm_c_define_gsubr("get-symmetry-bonds-colour", 1, 0, 0, (swig_guile_proc) _wrap_get_symmetry_bonds_colour);
  scm_c_define_gsubr("get-show-symmetry", 0, 0, 0, (swig_guile_proc) _wrap_get_show_symmetry);
  scm_c_define_gsubr("set-show-symmetry-master", 1, 0, 0, (swig_guile_proc) _wrap_set_show_symmetry_master);
  scm_c_define_gsubr("set-show-symmetry-molecule", 2, 0, 0, (swig_guile_proc) _wrap_set_show_symmetry_molecule);
  scm_c_define_gsubr("symmetry-as-calphas", 2, 0, 0, (swig_guile_proc) _wrap_symmetry_as_calphas);
  scm_c_define_gsubr("get-symmetry-as-calphas-state", 1, 0, 0, (swig_guile_proc) _wrap_get_symmetry_as_calphas_state);
  scm_c_define_gsubr("set-symmetry-molecule-rotate-colour-map", 2, 0, 0, (swig_guile_proc) _wrap_set_symmetry_molecule_rotate_colour_map);
  scm_c_define_gsubr("symmetry-molecule-rotate-colour-map-state", 1, 0, 0, (swig_guile_proc) _wrap_symmetry_molecule_rotate_colour_map_state);
  scm_c_define_gsubr("set-symmetry-colour-by-symop", 2, 0, 0, (swig_guile_proc) _wrap_set_symmetry_colour_by_symop);
  scm_c_define_gsubr("set-symmetry-whole-chain", 2, 0, 0, (swig_guile_proc) _wrap_set_symmetry_whole_chain);
  scm_c_define_gsubr("set-symmetry-atom-labels-expanded", 1, 0, 0, (swig_guile_proc) _wrap_set_symmetry_atom_labels_expanded);
  scm_c_define_gsubr("wrapped-create-show-symmetry-window", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_show_symmetry_window);
  scm_c_define_gsubr("symmetry-colour-adjustment-changed", 2, 0, 0, (swig_guile_proc) _wrap_symmetry_colour_adjustment_changed);
  scm_c_define_gsubr("symmetry-molecule-controller-dialog", 0, 0, 0, (swig_guile_proc) _wrap_symmetry_molecule_controller_dialog);
  scm_c_define_gsubr("has-unit-cell-state", 1, 0, 0, (swig_guile_proc) _wrap_has_unit_cell_state);
  scm_c_define_gsubr("save-symmetry-coords", 9, 0, 0, (swig_guile_proc) _wrap_save_symmetry_coords);
  scm_c_define_gsubr("setup-save-symmetry-coords", 0, 0, 0, (swig_guile_proc) _wrap_setup_save_symmetry_coords);
  scm_c_define_gsubr("save-symmetry-coords-from-fileselection", 1, 0, 0, (swig_guile_proc) _wrap_save_symmetry_coords_from_fileselection);
  scm_c_define_gsubr("set-space-group", 2, 0, 0, (swig_guile_proc) _wrap_set_space_group);
  scm_c_define_gsubr("set-symmetry-shift-search-size", 1, 0, 0, (swig_guile_proc) _wrap_set_symmetry_shift_search_size);
  scm_c_define_gsubr("set-directory-for-fileselection", 1, 0, 0, (swig_guile_proc) _wrap_set_directory_for_fileselection);
  scm_c_define_gsubr("save-directory-from-fileselection", 1, 0, 0, (swig_guile_proc) _wrap_save_directory_from_fileselection);
  scm_c_define_gsubr("save-directory-for-saving-from-fileselection", 1, 0, 0, (swig_guile_proc) _wrap_save_directory_for_saving_from_fileselection);
  scm_c_define_gsubr("set-file-for-save-fileselection", 1, 0, 0, (swig_guile_proc) _wrap_set_file_for_save_fileselection);
  scm_c_define_gsubr("set-directory-for-filechooser", 1, 0, 0, (swig_guile_proc) _wrap_set_directory_for_filechooser);
  scm_c_define_gsubr("save-directory-from-filechooser", 1, 0, 0, (swig_guile_proc) _wrap_save_directory_from_filechooser);
  scm_c_define_gsubr("save-directory-for-saving-from-filechooser", 1, 0, 0, (swig_guile_proc) _wrap_save_directory_for_saving_from_filechooser);
  scm_c_define_gsubr("add-sort-button-fileselection", 1, 0, 0, (swig_guile_proc) _wrap_add_sort_button_fileselection);
  scm_c_define_gsubr("add-ccp4i-project-optionmenu", 2, 0, 0, (swig_guile_proc) _wrap_add_ccp4i_project_optionmenu);
  scm_c_define_gsubr("add-ccp4i-projects-to-optionmenu", 2, 0, 0, (swig_guile_proc) _wrap_add_ccp4i_projects_to_optionmenu);
  scm_c_define_gsubr("add-ccp4i-project-shortcut", 1, 0, 0, (swig_guile_proc) _wrap_add_ccp4i_project_shortcut);
  scm_c_define_gsubr("option-menu-refmac-ccp4i-project-signal-func", 2, 0, 0, (swig_guile_proc) _wrap_option_menu_refmac_ccp4i_project_signal_func);
  scm_c_define_gsubr("run-refmac-ccp4i-option-menu-signal-func", 2, 0, 0, (swig_guile_proc) _wrap_run_refmac_ccp4i_option_menu_signal_func);
  scm_c_define_gsubr("clear-refmac-ccp4i-project", 0, 0, 0, (swig_guile_proc) _wrap_clear_refmac_ccp4i_project);
  scm_c_define_gsubr("lookup-file-selection-widgets", 2, 0, 0, (swig_guile_proc) _wrap_lookup_file_selection_widgets);
  scm_c_define_gsubr("fileselection-sort-button-clicked", 2, 0, 0, (swig_guile_proc) _wrap_fileselection_sort_button_clicked);
  scm_c_define_gsubr("push-the-buttons-on-fileselection", 3, 0, 0, (swig_guile_proc) _wrap_push_the_buttons_on_fileselection);
  scm_c_define_gsubr("print-all-history-in-scheme", 0, 0, 0, (swig_guile_proc) _wrap_print_all_history_in_scheme);
  scm_c_define_gsubr("print-all-history-in-python", 0, 0, 0, (swig_guile_proc) _wrap_print_all_history_in_python);
  scm_c_define_gsubr("set-console-display-commands-state", 1, 0, 0, (swig_guile_proc) _wrap_set_console_display_commands_state);
  scm_c_define_gsubr("set-console-display-commands-hilights", 3, 0, 0, (swig_guile_proc) _wrap_set_console_display_commands_hilights);
  scm_c_define_gsubr("save-state", 0, 0, 0, (swig_guile_proc) _wrap_save_state);
  scm_c_define_gsubr("save-state-file", 1, 0, 0, (swig_guile_proc) _wrap_save_state_file);
  scm_c_define_gsubr("set-save-state-file-name", 1, 0, 0, (swig_guile_proc) _wrap_set_save_state_file_name);
  scm_c_define_gsubr("save-state-file-name-scm", 0, 0, 0, (swig_guile_proc) _wrap_save_state_file_name_scm);
  scm_c_define_gsubr("save-state-file-name-raw", 0, 0, 0, (swig_guile_proc) _wrap_save_state_file_name_raw);
  scm_c_define_gsubr("set-run-state-file-status", 1, 0, 0, (swig_guile_proc) _wrap_set_run_state_file_status);
  scm_c_define_gsubr("run-state-file", 0, 0, 0, (swig_guile_proc) _wrap_run_state_file);
  scm_c_define_gsubr("run-state-file-maybe", 0, 0, 0, (swig_guile_proc) _wrap_run_state_file_maybe);
  scm_c_define_gsubr("wrapped-create-run-state-file-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_run_state_file_dialog);
  scm_c_define_gsubr("VT-FLAT", 0, 0, 0, (swig_guile_proc) _wrap_VT_FLAT);
  scm_c_define_gsubr("VT-SPHERICAL", 0, 0, 0, (swig_guile_proc) _wrap_VT_SPHERICAL);
  scm_c_define_gsubr("vt-surface", 1, 0, 0, (swig_guile_proc) _wrap_vt_surface);
  scm_c_define_gsubr("vt-surface-status", 0, 0, 0, (swig_guile_proc) _wrap_vt_surface_status);
  scm_c_define_gsubr("do-clipping1-activate", 0, 0, 0, (swig_guile_proc) _wrap_do_clipping1_activate);
  scm_c_define_gsubr("clipping-adjustment-changed", 2, 0, 0, (swig_guile_proc) _wrap_clipping_adjustment_changed);
  scm_c_define_gsubr("set-clipping-back", 1, 0, 0, (swig_guile_proc) _wrap_set_clipping_back);
  scm_c_define_gsubr("set-clipping-front", 1, 0, 0, (swig_guile_proc) _wrap_set_clipping_front);
  scm_c_define_gsubr("get-show-unit-cell", 1, 0, 0, (swig_guile_proc) _wrap_get_show_unit_cell);
  scm_c_define_gsubr("set-show-unit-cells-all", 1, 0, 0, (swig_guile_proc) _wrap_set_show_unit_cells_all);
  scm_c_define_gsubr("set-show-unit-cell", 2, 0, 0, (swig_guile_proc) _wrap_set_show_unit_cell);
  scm_c_define_gsubr("set-unit-cell-colour", 3, 0, 0, (swig_guile_proc) _wrap_set_unit_cell_colour);
  scm_c_define_gsubr("set-symmetry-colour-merge", 2, 0, 0, (swig_guile_proc) _wrap_set_symmetry_colour_merge);
  scm_c_define_gsubr("set-colour-map-rotation-on-read-pdb", 1, 0, 0, (swig_guile_proc) _wrap_set_colour_map_rotation_on_read_pdb);
  scm_c_define_gsubr("set-colour-map-rotation-on-read-pdb-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_colour_map_rotation_on_read_pdb_flag);
  scm_c_define_gsubr("set-colour-map-rotation-on-read-pdb-c-only-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_colour_map_rotation_on_read_pdb_c_only_flag);
  scm_c_define_gsubr("set-colour-by-chain", 1, 0, 0, (swig_guile_proc) _wrap_set_colour_by_chain);
  scm_c_define_gsubr("set-colour-by-molecule", 1, 0, 0, (swig_guile_proc) _wrap_set_colour_by_molecule);
  scm_c_define_gsubr("set-colour-map-rotation-for-map", 1, 0, 0, (swig_guile_proc) _wrap_set_colour_map_rotation_for_map);
  scm_c_define_gsubr("wrapped-create-coords-colour-control-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_coords_colour_control_dialog);
  scm_c_define_gsubr("set-molecule-bonds-colour-map-rotation", 2, 0, 0, (swig_guile_proc) _wrap_set_molecule_bonds_colour_map_rotation);
  scm_c_define_gsubr("get-molecule-bonds-colour-map-rotation", 1, 0, 0, (swig_guile_proc) _wrap_get_molecule_bonds_colour_map_rotation);
  scm_c_define_gsubr("get-limit-aniso", 0, 0, 0, (swig_guile_proc) _wrap_get_limit_aniso);
  scm_c_define_gsubr("get-show-limit-aniso", 0, 0, 0, (swig_guile_proc) _wrap_get_show_limit_aniso);
  scm_c_define_gsubr("get-show-aniso", 0, 0, 0, (swig_guile_proc) _wrap_get_show_aniso);
  scm_c_define_gsubr("set-limit-aniso", 1, 0, 0, (swig_guile_proc) _wrap_set_limit_aniso);
  scm_c_define_gsubr("set-aniso-limit-size-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_aniso_limit_size_from_widget);
  scm_c_define_gsubr("set-show-aniso", 1, 0, 0, (swig_guile_proc) _wrap_set_show_aniso);
  scm_c_define_gsubr("get-text-for-aniso-limit-radius-entry", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_aniso_limit_radius_entry);
  scm_c_define_gsubr("set-aniso-probability", 1, 0, 0, (swig_guile_proc) _wrap_set_aniso_probability);
  scm_c_define_gsubr("get-aniso-probability", 0, 0, 0, (swig_guile_proc) _wrap_get_aniso_probability);
  scm_c_define_gsubr("set-graphics-window-size", 2, 0, 0, (swig_guile_proc) _wrap_set_graphics_window_size);
  scm_c_define_gsubr("set-graphics-window-position", 2, 0, 0, (swig_guile_proc) _wrap_set_graphics_window_position);
  scm_c_define_gsubr("store-graphics-window-position", 2, 0, 0, (swig_guile_proc) _wrap_store_graphics_window_position);
  scm_c_define_gsubr("store-window-position", 2, 0, 0, (swig_guile_proc) _wrap_store_window_position);
  scm_c_define_gsubr("store-window-size", 2, 0, 0, (swig_guile_proc) _wrap_store_window_size);
  scm_c_define_gsubr("graphics-draw", 0, 0, 0, (swig_guile_proc) _wrap_graphics_draw);
  scm_c_define_gsubr("hardware-stereo-mode", 0, 0, 0, (swig_guile_proc) _wrap_hardware_stereo_mode);
  scm_c_define_gsubr("stereo-mode-state", 0, 0, 0, (swig_guile_proc) _wrap_stereo_mode_state);
  scm_c_define_gsubr("mono-mode", 0, 0, 0, (swig_guile_proc) _wrap_mono_mode);
  scm_c_define_gsubr("side-by-side-stereo-mode", 1, 0, 0, (swig_guile_proc) _wrap_side_by_side_stereo_mode);
  scm_c_define_gsubr("set-hardware-stereo-angle-factor", 1, 0, 0, (swig_guile_proc) _wrap_set_hardware_stereo_angle_factor);
  scm_c_define_gsubr("hardware-stereo-angle-factor-state", 0, 0, 0, (swig_guile_proc) _wrap_hardware_stereo_angle_factor_state);
  scm_c_define_gsubr("set-model-fit-refine-dialog-position", 2, 0, 0, (swig_guile_proc) _wrap_set_model_fit_refine_dialog_position);
  scm_c_define_gsubr("set-display-control-dialog-position", 2, 0, 0, (swig_guile_proc) _wrap_set_display_control_dialog_position);
  scm_c_define_gsubr("set-go-to-atom-window-position", 2, 0, 0, (swig_guile_proc) _wrap_set_go_to_atom_window_position);
  scm_c_define_gsubr("set-delete-dialog-position", 2, 0, 0, (swig_guile_proc) _wrap_set_delete_dialog_position);
  scm_c_define_gsubr("set-rotate-translate-dialog-position", 2, 0, 0, (swig_guile_proc) _wrap_set_rotate_translate_dialog_position);
  scm_c_define_gsubr("set-accept-reject-dialog-position", 2, 0, 0, (swig_guile_proc) _wrap_set_accept_reject_dialog_position);
  scm_c_define_gsubr("set-ramachandran-plot-dialog-position", 2, 0, 0, (swig_guile_proc) _wrap_set_ramachandran_plot_dialog_position);
  scm_c_define_gsubr("set-smooth-scroll-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_smooth_scroll_flag);
  scm_c_define_gsubr("get-smooth-scroll", 0, 0, 0, (swig_guile_proc) _wrap_get_smooth_scroll);
  scm_c_define_gsubr("set-smooth-scroll-steps-str", 1, 0, 0, (swig_guile_proc) _wrap_set_smooth_scroll_steps_str);
  scm_c_define_gsubr("set-smooth-scroll-steps", 1, 0, 0, (swig_guile_proc) _wrap_set_smooth_scroll_steps);
  scm_c_define_gsubr("get-text-for-smooth-scroll-steps", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_smooth_scroll_steps);
  scm_c_define_gsubr("set-smooth-scroll-limit-str", 1, 0, 0, (swig_guile_proc) _wrap_set_smooth_scroll_limit_str);
  scm_c_define_gsubr("set-smooth-scroll-limit", 1, 0, 0, (swig_guile_proc) _wrap_set_smooth_scroll_limit);
  scm_c_define_gsubr("get-text-for-smooth-scroll-limit", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_smooth_scroll_limit);
  scm_c_define_gsubr("set-font-size", 1, 0, 0, (swig_guile_proc) _wrap_set_font_size);
  scm_c_define_gsubr("get-font-size", 0, 0, 0, (swig_guile_proc) _wrap_get_font_size);
  scm_c_define_gsubr("set-font-colour", 3, 0, 0, (swig_guile_proc) _wrap_set_font_colour);
  scm_c_define_gsubr("set-rotation-centre-size-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_rotation_centre_size_from_widget);
  scm_c_define_gsubr("set-rotation-centre-size", 1, 0, 0, (swig_guile_proc) _wrap_set_rotation_centre_size);
  scm_c_define_gsubr("get-text-for-rotation-centre-cube-size", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_rotation_centre_cube_size);
  scm_c_define_gsubr("recentre-on-read-pdb", 0, 0, 0, (swig_guile_proc) _wrap_recentre_on_read_pdb);
  scm_c_define_gsubr("set-recentre-on-read-pdb", 1, 0, 0, (swig_guile_proc) _wrap_set_recentre_on_read_pdb);
  scm_c_define_gsubr("set-rotation-centre", 3, 0, 0, (swig_guile_proc) _wrap_set_rotation_centre);
  scm_c_define_gsubr("set-rotation-centre-internal", 3, 0, 0, (swig_guile_proc) _wrap_set_rotation_centre_internal);
  scm_c_define_gsubr("rotation-centre-position", 1, 0, 0, (swig_guile_proc) _wrap_rotation_centre_position);
  scm_c_define_gsubr("set-draw-axes", 1, 0, 0, (swig_guile_proc) _wrap_set_draw_axes);
  scm_c_define_gsubr("atom-index", 4, 0, 0, (swig_guile_proc) _wrap_atom_index);
  scm_c_define_gsubr("atom-index-first-atom-in-residue", 4, 0, 0, (swig_guile_proc) _wrap_atom_index_first_atom_in_residue);
  scm_c_define_gsubr("median-temperature-factor", 1, 0, 0, (swig_guile_proc) _wrap_median_temperature_factor);
  scm_c_define_gsubr("average-temperature-factor", 1, 0, 0, (swig_guile_proc) _wrap_average_temperature_factor);
  scm_c_define_gsubr("clear-pending-picks", 0, 0, 0, (swig_guile_proc) _wrap_clear_pending_picks);
  scm_c_define_gsubr("centre-of-mass-string", 1, 0, 0, (swig_guile_proc) _wrap_centre_of_mass_string);
  scm_c_define_gsubr("set-default-temperature-factor-for-new-atoms", 1, 0, 0, (swig_guile_proc) _wrap_set_default_temperature_factor_for_new_atoms);
  scm_c_define_gsubr("default-new-atoms-b-factor", 0, 0, 0, (swig_guile_proc) _wrap_default_new_atoms_b_factor);
  scm_c_define_gsubr("set-atom-attribute", 8, 0, 0, (swig_guile_proc) _wrap_set_atom_attribute);
  scm_c_define_gsubr("set-atom-string-attribute", 8, 0, 0, (swig_guile_proc) _wrap_set_atom_string_attribute);
  scm_c_define_gsubr("set-atom-attributes", 1, 0, 0, (swig_guile_proc) _wrap_set_atom_attributes);
  scm_c_define_gsubr("skel-greer-on", 0, 0, 0, (swig_guile_proc) _wrap_skel_greer_on);
  scm_c_define_gsubr("skel-greer-off", 0, 0, 0, (swig_guile_proc) _wrap_skel_greer_off);
  scm_c_define_gsubr("skel-foadi-on", 0, 0, 0, (swig_guile_proc) _wrap_skel_foadi_on);
  scm_c_define_gsubr("skel-foadi-off", 0, 0, 0, (swig_guile_proc) _wrap_skel_foadi_off);
  scm_c_define_gsubr("skeletonize-map-by-optionmenu", 1, 0, 0, (swig_guile_proc) _wrap_skeletonize_map_by_optionmenu);
  scm_c_define_gsubr("skeletonize-map-single-map-maybe", 2, 0, 0, (swig_guile_proc) _wrap_skeletonize_map_single_map_maybe);
  scm_c_define_gsubr("skeletonize-map", 2, 0, 0, (swig_guile_proc) _wrap_skeletonize_map);
  scm_c_define_gsubr("unskeletonize-map", 1, 0, 0, (swig_guile_proc) _wrap_unskeletonize_map);
  scm_c_define_gsubr("fill-option-menu-with-skeleton-options", 1, 0, 0, (swig_guile_proc) _wrap_fill_option_menu_with_skeleton_options);
  scm_c_define_gsubr("set-initial-map-for-skeletonize", 0, 0, 0, (swig_guile_proc) _wrap_set_initial_map_for_skeletonize);
  scm_c_define_gsubr("set-max-skeleton-search-depth", 1, 0, 0, (swig_guile_proc) _wrap_set_max_skeleton_search_depth);
  scm_c_define_gsubr("set-on-off-skeleton-radio-buttons", 1, 0, 0, (swig_guile_proc) _wrap_set_on_off_skeleton_radio_buttons);
  scm_c_define_gsubr("set-on-off-single-map-skeleton-radio-buttons", 2, 0, 0, (swig_guile_proc) _wrap_set_on_off_single_map_skeleton_radio_buttons);
  scm_c_define_gsubr("get-text-for-skeletonization-level-entry", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_skeletonization_level_entry);
  scm_c_define_gsubr("set-skeletonization-level-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_skeletonization_level_from_widget);
  scm_c_define_gsubr("get-text-for-skeleton-box-size-entry", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_skeleton_box_size_entry);
  scm_c_define_gsubr("set-skeleton-box-size-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_skeleton_box_size_from_widget);
  scm_c_define_gsubr("set-skeleton-box-size", 1, 0, 0, (swig_guile_proc) _wrap_set_skeleton_box_size);
  scm_c_define_gsubr("handle-skeleton-colour-change", 2, 0, 0, (swig_guile_proc) _wrap_handle_skeleton_colour_change);
  scm_c_define_gsubr("set-skeleton-colour", 4, 0, 0, (swig_guile_proc) _wrap_set_skeleton_colour);
  scm_c_define_gsubr("get-skeleton-colour", 0, 0, 0, (swig_guile_proc) _wrap_get_skeleton_colour);
  scm_c_define_gsubr("handle-read-ccp4-map", 2, 0, 0, (swig_guile_proc) _wrap_handle_read_ccp4_map);
  scm_c_define_gsubr("save-coordinates-using-widget", 1, 0, 0, (swig_guile_proc) _wrap_save_coordinates_using_widget);
  scm_c_define_gsubr("save-coordinates", 2, 0, 0, (swig_guile_proc) _wrap_save_coordinates);
  scm_c_define_gsubr("set-save-coordinates-in-original-directory", 1, 0, 0, (swig_guile_proc) _wrap_set_save_coordinates_in_original_directory);
  scm_c_define_gsubr("save-molecule-coords-button-select", 2, 0, 0, (swig_guile_proc) _wrap_save_molecule_coords_button_select);
  scm_c_define_gsubr("save-molecule-number-from-option-menu", 0, 0, 0, (swig_guile_proc) _wrap_save_molecule_number_from_option_menu);
  scm_c_define_gsubr("set-save-molecule-number", 1, 0, 0, (swig_guile_proc) _wrap_set_save_molecule_number);
  scm_c_define_gsubr("read-phs-and-coords-and-make-map", 1, 0, 0, (swig_guile_proc) _wrap_read_phs_and_coords_and_make_map);
  scm_c_define_gsubr("read-phs-and-make-map-using-cell-symm-from-previous-mol", 1, 0, 0, (swig_guile_proc) _wrap_read_phs_and_make_map_using_cell_symm_from_previous_mol);
  scm_c_define_gsubr("read-phs-and-make-map-using-cell-symm-from-mol", 2, 0, 0, (swig_guile_proc) _wrap_read_phs_and_make_map_using_cell_symm_from_mol);
  scm_c_define_gsubr("read-phs-and-make-map-using-cell-symm-from-mol-using-implicit-phs-filename", 1, 0, 0, (swig_guile_proc) _wrap_read_phs_and_make_map_using_cell_symm_from_mol_using_implicit_phs_filename);
  scm_c_define_gsubr("read-phs-and-make-map-using-cell-symm", 8, 0, 0, (swig_guile_proc) _wrap_read_phs_and_make_map_using_cell_symm);
  scm_c_define_gsubr("read-phs-and-make-map-with-reso-limits", 4, 0, 0, (swig_guile_proc) _wrap_read_phs_and_make_map_with_reso_limits);
  scm_c_define_gsubr("graphics-store-phs-filename", 1, 0, 0, (swig_guile_proc) _wrap_graphics_store_phs_filename);
  scm_c_define_gsubr("graphics-get-phs-filename", 0, 0, 0, (swig_guile_proc) _wrap_graphics_get_phs_filename);
  scm_c_define_gsubr("possible-cell-symm-for-phs-file", 0, 0, 0, (swig_guile_proc) _wrap_possible_cell_symm_for_phs_file);
  scm_c_define_gsubr("get-text-for-phs-cell-chooser", 2, 0, 0, (swig_guile_proc) _wrap_get_text_for_phs_cell_chooser);
  scm_c_define_gsubr("undo-last-move", 0, 0, 0, (swig_guile_proc) _wrap_undo_last_move);
  scm_c_define_gsubr("translate-molecule-by", 4, 0, 0, (swig_guile_proc) _wrap_translate_molecule_by);
  scm_c_define_gsubr("transform-molecule-by", 0, 0, 1, (swig_guile_proc) _wrap_transform_molecule_by_rest);
  scm_c_define_gsubr("wrapped-create-goto-atom-window", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_goto_atom_window);
  scm_c_define_gsubr("post-go-to-atom-window", 0, 0, 0, (swig_guile_proc) _wrap_post_go_to_atom_window);
  scm_c_define_gsubr("fill-go-to-atom-window", 1, 0, 0, (swig_guile_proc) _wrap_fill_go_to_atom_window);
  scm_c_define_gsubr("get-text-for-go-to-atom-chain-entry", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_go_to_atom_chain_entry);
  scm_c_define_gsubr("get-text-for-go-to-atom-residue-entry", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_go_to_atom_residue_entry);
  scm_c_define_gsubr("get-text-for-go-to-atom-atom-name-entry", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_go_to_atom_atom_name_entry);
  scm_c_define_gsubr("go-to-atom-molecule-number", 0, 0, 0, (swig_guile_proc) _wrap_go_to_atom_molecule_number);
  scm_c_define_gsubr("go-to-atom-chain-id", 0, 0, 0, (swig_guile_proc) _wrap_go_to_atom_chain_id);
  scm_c_define_gsubr("go-to-atom-atom-name", 0, 0, 0, (swig_guile_proc) _wrap_go_to_atom_atom_name);
  scm_c_define_gsubr("go-to-atom-residue-number", 0, 0, 0, (swig_guile_proc) _wrap_go_to_atom_residue_number);
  scm_c_define_gsubr("go-to-atom-ins-code", 0, 0, 0, (swig_guile_proc) _wrap_go_to_atom_ins_code);
  scm_c_define_gsubr("go-to-atom-alt-conf", 0, 0, 0, (swig_guile_proc) _wrap_go_to_atom_alt_conf);
  scm_c_define_gsubr("set-go-to-atom-chain-residue-atom-name", 3, 0, 0, (swig_guile_proc) _wrap_set_go_to_atom_chain_residue_atom_name);
  scm_c_define_gsubr("set-go-to-atom-chain-residue-atom-name-no-redraw", 3, 0, 0, (swig_guile_proc) _wrap_set_go_to_atom_chain_residue_atom_name_no_redraw);
  scm_c_define_gsubr("set-go-to-atom-chain-residue-atom-name-strings", 3, 0, 0, (swig_guile_proc) _wrap_set_go_to_atom_chain_residue_atom_name_strings);
  scm_c_define_gsubr("goto-prev-atom-maybe", 4, 0, 0, (swig_guile_proc) _wrap_goto_prev_atom_maybe);
  scm_c_define_gsubr("goto-near-atom-maybe", 5, 0, 0, (swig_guile_proc) _wrap_goto_near_atom_maybe);
  scm_c_define_gsubr("goto-next-atom-maybe-new", 1, 0, 0, (swig_guile_proc) _wrap_goto_next_atom_maybe_new);
  scm_c_define_gsubr("goto-previous-atom-maybe-new", 1, 0, 0, (swig_guile_proc) _wrap_goto_previous_atom_maybe_new);
  scm_c_define_gsubr("update-go-to-atom-from-current-position", 0, 0, 0, (swig_guile_proc) _wrap_update_go_to_atom_from_current_position);
  scm_c_define_gsubr("apply-go-to-atom-values", 1, 0, 0, (swig_guile_proc) _wrap_apply_go_to_atom_values);
  scm_c_define_gsubr("atom-spec-to-atom-index", 4, 0, 0, (swig_guile_proc) _wrap_atom_spec_to_atom_index);
  scm_c_define_gsubr("full-atom-spec-to-atom-index", 6, 0, 0, (swig_guile_proc) _wrap_full_atom_spec_to_atom_index);
  scm_c_define_gsubr("update-go-to-atom-window-on-changed-mol", 1, 0, 0, (swig_guile_proc) _wrap_update_go_to_atom_window_on_changed_mol);
  scm_c_define_gsubr("update-go-to-atom-window-on-new-mol", 0, 0, 0, (swig_guile_proc) _wrap_update_go_to_atom_window_on_new_mol);
  scm_c_define_gsubr("update-go-to-atom-window-on-other-molecule-chosen", 1, 0, 0, (swig_guile_proc) _wrap_update_go_to_atom_window_on_other_molecule_chosen);
  scm_c_define_gsubr("set-go-to-atom-molecule", 1, 0, 0, (swig_guile_proc) _wrap_set_go_to_atom_molecule);
  scm_c_define_gsubr("go-to-atom-molecule-optionmenu-active-molecule", 1, 0, 0, (swig_guile_proc) _wrap_go_to_atom_molecule_optionmenu_active_molecule);
  scm_c_define_gsubr("save-go-to-atom-widget", 1, 0, 0, (swig_guile_proc) _wrap_save_go_to_atom_widget);
  scm_c_define_gsubr("unset-go-to-atom-widget", 0, 0, 0, (swig_guile_proc) _wrap_unset_go_to_atom_widget);
  scm_c_define_gsubr("clear-atom-list", 1, 0, 0, (swig_guile_proc) _wrap_clear_atom_list);
  scm_c_define_gsubr("apply-go-to-atom-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_apply_go_to_atom_from_widget);
  scm_c_define_gsubr("on-go-to-atom-residue-list-select-child", 3, 0, 0, (swig_guile_proc) _wrap_on_go_to_atom_residue_list_select_child);
  scm_c_define_gsubr("autobuild-ca-off", 0, 0, 0, (swig_guile_proc) _wrap_autobuild_ca_off);
  scm_c_define_gsubr("test-fragment", 0, 0, 0, (swig_guile_proc) _wrap_test_fragment);
  scm_c_define_gsubr("do-skeleton-prune", 0, 0, 0, (swig_guile_proc) _wrap_do_skeleton_prune);
  scm_c_define_gsubr("test-function", 2, 0, 0, (swig_guile_proc) _wrap_test_function);
  scm_c_define_gsubr("save-display-control-widget-in-graphics", 1, 0, 0, (swig_guile_proc) _wrap_save_display_control_widget_in_graphics);
  scm_c_define_gsubr("wrapped-create-display-control-window", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_display_control_window);
  scm_c_define_gsubr("post-display-control-window", 0, 0, 0, (swig_guile_proc) _wrap_post_display_control_window);
  scm_c_define_gsubr("add-map-display-control-widgets", 0, 0, 0, (swig_guile_proc) _wrap_add_map_display_control_widgets);
  scm_c_define_gsubr("add-mol-display-control-widgets", 0, 0, 0, (swig_guile_proc) _wrap_add_mol_display_control_widgets);
  scm_c_define_gsubr("add-map-and-mol-display-control-widgets", 0, 0, 0, (swig_guile_proc) _wrap_add_map_and_mol_display_control_widgets);
  scm_c_define_gsubr("reset-graphics-display-control-window", 0, 0, 0, (swig_guile_proc) _wrap_reset_graphics_display_control_window);
  scm_c_define_gsubr("close-graphics-display-control-window", 0, 0, 0, (swig_guile_proc) _wrap_close_graphics_display_control_window);
  scm_c_define_gsubr("set-map-displayed", 2, 0, 0, (swig_guile_proc) _wrap_set_map_displayed);
  scm_c_define_gsubr("set-mol-displayed", 2, 0, 0, (swig_guile_proc) _wrap_set_mol_displayed);
  scm_c_define_gsubr("set-mol-active", 2, 0, 0, (swig_guile_proc) _wrap_set_mol_active);
  scm_c_define_gsubr("mol-is-displayed", 1, 0, 0, (swig_guile_proc) _wrap_mol_is_displayed);
  scm_c_define_gsubr("mol-is-active", 1, 0, 0, (swig_guile_proc) _wrap_mol_is_active);
  scm_c_define_gsubr("map-is-displayed", 1, 0, 0, (swig_guile_proc) _wrap_map_is_displayed);
  scm_c_define_gsubr("set-all-maps-displayed", 1, 0, 0, (swig_guile_proc) _wrap_set_all_maps_displayed);
  scm_c_define_gsubr("set-all-models-displayed-and-active", 1, 0, 0, (swig_guile_proc) _wrap_set_all_models_displayed_and_active);
  scm_c_define_gsubr("show-spacegroup", 1, 0, 0, (swig_guile_proc) _wrap_show_spacegroup);
  scm_c_define_gsubr("wrapped-create-merge-molecules-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_merge_molecules_dialog);
  scm_c_define_gsubr("do-merge-molecules-gui", 0, 0, 0, (swig_guile_proc) _wrap_do_merge_molecules_gui);
  scm_c_define_gsubr("do-merge-molecules", 1, 0, 0, (swig_guile_proc) _wrap_do_merge_molecules);
  scm_c_define_gsubr("fill-vbox-with-coordinates-options", 2, 0, 0, (swig_guile_proc) _wrap_fill_vbox_with_coordinates_options);
  scm_c_define_gsubr("merge-molecules-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_merge_molecules_menu_item_activate);
  scm_c_define_gsubr("on-merge-molecules-check-button-toggled", 2, 0, 0, (swig_guile_proc) _wrap_on_merge_molecules_check_button_toggled);
  scm_c_define_gsubr("merge-molecules", 2, 0, 0, (swig_guile_proc) _wrap_merge_molecules);
  scm_c_define_gsubr("wrapped-create-mutate-sequence-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_mutate_sequence_dialog);
  scm_c_define_gsubr("do-mutate-sequence", 1, 0, 0, (swig_guile_proc) _wrap_do_mutate_sequence);
  scm_c_define_gsubr("mutate-sequence-molecule-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_mutate_sequence_molecule_menu_item_activate);
  scm_c_define_gsubr("mutate-sequence-chain-option-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_mutate_sequence_chain_option_menu_item_activate);
  scm_c_define_gsubr("wrapped-fit-loop-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_fit_loop_dialog);
  scm_c_define_gsubr("fit-loop-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_fit_loop_from_widget);
  scm_c_define_gsubr("wrapped-create-align-and-mutate-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_align_and_mutate_dialog);
  scm_c_define_gsubr("do-align-mutate-sequence", 1, 0, 0, (swig_guile_proc) _wrap_do_align_mutate_sequence);
  scm_c_define_gsubr("align-and-mutate-molecule-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_align_and_mutate_molecule_menu_item_activate);
  scm_c_define_gsubr("align-and-mutate-chain-option-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_align_and_mutate_chain_option_menu_item_activate);
  scm_c_define_gsubr("align-and-mutate", 3, 0, 0, (swig_guile_proc) _wrap_align_and_mutate);
  scm_c_define_gsubr("renumber-residue-range", 5, 0, 0, (swig_guile_proc) _wrap_renumber_residue_range);
  scm_c_define_gsubr("wrapped-create-renumber-residue-range-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_renumber_residue_range_dialog);
  scm_c_define_gsubr("renumber-residues-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_renumber_residues_from_widget);
  scm_c_define_gsubr("change-residue-number", 6, 0, 0, (swig_guile_proc) _wrap_change_residue_number);
  scm_c_define_gsubr("wrapped-create-change-chain-id-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_change_chain_id_dialog);
  scm_c_define_gsubr("change-chain-id-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_change_chain_id_by_widget);
  scm_c_define_gsubr("change-chain-ids-mol-option-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_change_chain_ids_mol_option_menu_item_activate);
  scm_c_define_gsubr("change-chain-ids-chain-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_change_chain_ids_chain_menu_item_activate);
  scm_c_define_gsubr("change-chain-id", 6, 0, 0, (swig_guile_proc) _wrap_change_chain_id);
  scm_c_define_gsubr("change-chain-id-with-result-scm", 6, 0, 0, (swig_guile_proc) _wrap_change_chain_id_with_result_scm);
  scm_c_define_gsubr("post-scripting-window", 0, 0, 0, (swig_guile_proc) _wrap_post_scripting_window);
  scm_c_define_gsubr("post-scheme-scripting-window", 0, 0, 0, (swig_guile_proc) _wrap_post_scheme_scripting_window);
  scm_c_define_gsubr("post-python-scripting-window", 0, 0, 0, (swig_guile_proc) _wrap_post_python_scripting_window);
  scm_c_define_gsubr("run-command-line-scripts", 0, 0, 0, (swig_guile_proc) _wrap_run_command_line_scripts);
  scm_c_define_gsubr("setup-guile-window-entry", 1, 0, 0, (swig_guile_proc) _wrap_setup_guile_window_entry);
  scm_c_define_gsubr("setup-python-window-entry", 1, 0, 0, (swig_guile_proc) _wrap_setup_python_window_entry);
  scm_c_define_gsubr("guile-window-enter-callback", 2, 0, 0, (swig_guile_proc) _wrap_guile_window_enter_callback);
  scm_c_define_gsubr("set-guile-gui-loaded-flag", 0, 0, 0, (swig_guile_proc) _wrap_set_guile_gui_loaded_flag);
  scm_c_define_gsubr("set-python-gui-loaded-flag", 0, 0, 0, (swig_guile_proc) _wrap_set_python_gui_loaded_flag);
  scm_c_define_gsubr("set-found-coot-gui", 0, 0, 0, (swig_guile_proc) _wrap_set_found_coot_gui);
  scm_c_define_gsubr("handle-get-accession-code", 1, 0, 0, (swig_guile_proc) _wrap_handle_get_accession_code);
  scm_c_define_gsubr("handle-get-libcheck-monomer-code", 1, 0, 0, (swig_guile_proc) _wrap_handle_get_libcheck_monomer_code);
  scm_c_define_gsubr("get-monomer", 1, 0, 0, (swig_guile_proc) _wrap_get_monomer);
  scm_c_define_gsubr("handle-make-monomer-search", 2, 0, 0, (swig_guile_proc) _wrap_handle_make_monomer_search);
  scm_c_define_gsubr("run-script", 1, 0, 0, (swig_guile_proc) _wrap_run_script);
  scm_c_define_gsubr("run-guile-script", 1, 0, 0, (swig_guile_proc) _wrap_run_guile_script);
  scm_c_define_gsubr("run-python-script", 1, 0, 0, (swig_guile_proc) _wrap_run_python_script);
  scm_c_define_gsubr("do-regularize", 1, 0, 0, (swig_guile_proc) _wrap_do_regularize);
  scm_c_define_gsubr("do-refine", 1, 0, 0, (swig_guile_proc) _wrap_do_refine);
  scm_c_define_gsubr("add-planar-peptide-restraints", 0, 0, 0, (swig_guile_proc) _wrap_add_planar_peptide_restraints);
  scm_c_define_gsubr("remove-planar-peptide-restraints", 0, 0, 0, (swig_guile_proc) _wrap_remove_planar_peptide_restraints);
  scm_c_define_gsubr("add-omega-torsion-restriants", 0, 0, 0, (swig_guile_proc) _wrap_add_omega_torsion_restriants);
  scm_c_define_gsubr("remove-omega-torsion-restriants", 0, 0, 0, (swig_guile_proc) _wrap_remove_omega_torsion_restriants);
  scm_c_define_gsubr("set-refinement-immediate-replacement", 1, 0, 0, (swig_guile_proc) _wrap_set_refinement_immediate_replacement);
  scm_c_define_gsubr("refinement-immediate-replacement-state", 0, 0, 0, (swig_guile_proc) _wrap_refinement_immediate_replacement_state);
  scm_c_define_gsubr("set-residue-selection-flash-frames-number", 1, 0, 0, (swig_guile_proc) _wrap_set_residue_selection_flash_frames_number);
  scm_c_define_gsubr("accept-regularizement", 0, 0, 0, (swig_guile_proc) _wrap_accept_regularizement);
  scm_c_define_gsubr("clear-up-moving-atoms", 0, 0, 0, (swig_guile_proc) _wrap_clear_up_moving_atoms);
  scm_c_define_gsubr("clear-moving-atoms-object", 0, 0, 0, (swig_guile_proc) _wrap_clear_moving_atoms_object);
  scm_c_define_gsubr("fill-option-menu-with-refine-options", 1, 0, 0, (swig_guile_proc) _wrap_fill_option_menu_with_refine_options);
  scm_c_define_gsubr("wrapped-create-refine-params-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_refine_params_dialog);
  scm_c_define_gsubr("do-torsions-toggle", 1, 0, 0, (swig_guile_proc) _wrap_do_torsions_toggle);
  scm_c_define_gsubr("do-peptide-torsions-toggle", 0, 0, 0, (swig_guile_proc) _wrap_do_peptide_torsions_toggle);
  scm_c_define_gsubr("set-refine-with-torsion-restraints", 1, 0, 0, (swig_guile_proc) _wrap_set_refine_with_torsion_restraints);
  scm_c_define_gsubr("set-refine-params-toggle-buttons", 1, 0, 0, (swig_guile_proc) _wrap_set_refine_params_toggle_buttons);
  scm_c_define_gsubr("set-refine-params-phi-psi-restraints-type", 1, 0, 0, (swig_guile_proc) _wrap_set_refine_params_phi_psi_restraints_type);
  scm_c_define_gsubr("set-matrix", 1, 0, 0, (swig_guile_proc) _wrap_set_matrix);
  scm_c_define_gsubr("matrix-state", 0, 0, 0, (swig_guile_proc) _wrap_matrix_state);
  scm_c_define_gsubr("set-refine-auto-range-step", 1, 0, 0, (swig_guile_proc) _wrap_set_refine_auto_range_step);
  scm_c_define_gsubr("set-refine-max-residues", 1, 0, 0, (swig_guile_proc) _wrap_set_refine_max_residues);
  scm_c_define_gsubr("refine-zone-atom-index-define", 3, 0, 0, (swig_guile_proc) _wrap_refine_zone_atom_index_define);
  scm_c_define_gsubr("refine-zone", 5, 0, 0, (swig_guile_proc) _wrap_refine_zone);
  scm_c_define_gsubr("refine-zone-with-full-residue-spec", 7, 0, 0, (swig_guile_proc) _wrap_refine_zone_with_full_residue_spec);
  scm_c_define_gsubr("refine-auto-range", 4, 0, 0, (swig_guile_proc) _wrap_refine_auto_range);
  scm_c_define_gsubr("regularize-zone", 5, 0, 0, (swig_guile_proc) _wrap_regularize_zone);
  scm_c_define_gsubr("set-dragged-refinement-steps-per-frame", 1, 0, 0, (swig_guile_proc) _wrap_set_dragged_refinement_steps_per_frame);
  scm_c_define_gsubr("dragged-refinement-steps-per-frame", 0, 0, 0, (swig_guile_proc) _wrap_dragged_refinement_steps_per_frame);
  scm_c_define_gsubr("set-refinement-refine-per-frame", 1, 0, 0, (swig_guile_proc) _wrap_set_refinement_refine_per_frame);
  scm_c_define_gsubr("refinement-refine-per-frame-state", 0, 0, 0, (swig_guile_proc) _wrap_refinement_refine_per_frame_state);
  scm_c_define_gsubr("set-fix-chiral-volumes-before-refinement", 1, 0, 0, (swig_guile_proc) _wrap_set_fix_chiral_volumes_before_refinement);
  scm_c_define_gsubr("check-chiral-volumes", 1, 0, 0, (swig_guile_proc) _wrap_check_chiral_volumes);
  scm_c_define_gsubr("check-chiral-volumes-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_check_chiral_volumes_from_widget);
  scm_c_define_gsubr("fill-chiral-volume-molecule-option-menu", 1, 0, 0, (swig_guile_proc) _wrap_fill_chiral_volume_molecule_option_menu);
  scm_c_define_gsubr("chiral-volume-molecule-option-menu-item-select", 2, 0, 0, (swig_guile_proc) _wrap_chiral_volume_molecule_option_menu_item_select);
  scm_c_define_gsubr("set-show-chiral-volume-errors-dialog", 1, 0, 0, (swig_guile_proc) _wrap_set_show_chiral_volume_errors_dialog);
  scm_c_define_gsubr("set-secondary-structure-restraints-type", 1, 0, 0, (swig_guile_proc) _wrap_set_secondary_structure_restraints_type);
  scm_c_define_gsubr("secondary-structure-restraints-type", 0, 0, 0, (swig_guile_proc) _wrap_secondary_structure_restraints_type);
  scm_c_define_gsubr("imol-refinement-map", 0, 0, 0, (swig_guile_proc) _wrap_imol_refinement_map);
  scm_c_define_gsubr("set-imol-refinement-map", 1, 0, 0, (swig_guile_proc) _wrap_set_imol_refinement_map);
  scm_c_define_gsubr("does-residue-exist-p", 4, 0, 0, (swig_guile_proc) _wrap_does_residue_exist_p);
  scm_c_define_gsubr("fit-residue-range-to-map-by-simplex", 6, 0, 0, (swig_guile_proc) _wrap_fit_residue_range_to_map_by_simplex);
  scm_c_define_gsubr("score-residue-range-fit-to-map", 6, 0, 0, (swig_guile_proc) _wrap_score_residue_range_fit_to_map);
  scm_c_define_gsubr("fix-nomenclature-errors", 1, 0, 0, (swig_guile_proc) _wrap_fix_nomenclature_errors);
  scm_c_define_gsubr("wrapped-create-move-molecule-here-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_move_molecule_here_dialog);
  scm_c_define_gsubr("move-molecule-here-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_move_molecule_here_by_widget);
  scm_c_define_gsubr("output-atom-info-as-text", 6, 0, 0, (swig_guile_proc) _wrap_output_atom_info_as_text);
  scm_c_define_gsubr("do-residue-info-dialog", 0, 0, 0, (swig_guile_proc) _wrap_do_residue_info_dialog);
  scm_c_define_gsubr("output-residue-info-dialog", 2, 0, 0, (swig_guile_proc) _wrap_output_residue_info_dialog);
  scm_c_define_gsubr("residue-info-dialog", 4, 0, 0, (swig_guile_proc) _wrap_residue_info_dialog);
  scm_c_define_gsubr("residue-info-dialog-is-displayed", 0, 0, 0, (swig_guile_proc) _wrap_residue_info_dialog_is_displayed);
  scm_c_define_gsubr("output-residue-info-as-text", 2, 0, 0, (swig_guile_proc) _wrap_output_residue_info_as_text);
  scm_c_define_gsubr("apply-residue-info-changes", 1, 0, 0, (swig_guile_proc) _wrap_apply_residue_info_changes);
  scm_c_define_gsubr("do-distance-define", 0, 0, 0, (swig_guile_proc) _wrap_do_distance_define);
  scm_c_define_gsubr("do-angle-define", 0, 0, 0, (swig_guile_proc) _wrap_do_angle_define);
  scm_c_define_gsubr("do-torsion-define", 0, 0, 0, (swig_guile_proc) _wrap_do_torsion_define);
  scm_c_define_gsubr("residue-info-apply-all-checkbutton-toggled", 0, 0, 0, (swig_guile_proc) _wrap_residue_info_apply_all_checkbutton_toggled);
  scm_c_define_gsubr("wrapped-create-residue-info-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_residue_info_dialog);
  scm_c_define_gsubr("clear-residue-info-edit-list", 0, 0, 0, (swig_guile_proc) _wrap_clear_residue_info_edit_list);
  scm_c_define_gsubr("residue-info-release-memory", 1, 0, 0, (swig_guile_proc) _wrap_residue_info_release_memory);
  scm_c_define_gsubr("unset-residue-info-widget", 0, 0, 0, (swig_guile_proc) _wrap_unset_residue_info_widget);
  scm_c_define_gsubr("clear-simple-distances", 0, 0, 0, (swig_guile_proc) _wrap_clear_simple_distances);
  scm_c_define_gsubr("clear-last-simple-distance", 0, 0, 0, (swig_guile_proc) _wrap_clear_last_simple_distance);
  scm_c_define_gsubr("store-geometry-dialog", 1, 0, 0, (swig_guile_proc) _wrap_store_geometry_dialog);
  scm_c_define_gsubr("fill-environment-widget", 1, 0, 0, (swig_guile_proc) _wrap_fill_environment_widget);
  scm_c_define_gsubr("execute-environment-settings", 1, 0, 0, (swig_guile_proc) _wrap_execute_environment_settings);
  scm_c_define_gsubr("toggle-environment-show-distances", 1, 0, 0, (swig_guile_proc) _wrap_toggle_environment_show_distances);
  scm_c_define_gsubr("set-show-environment-distances", 1, 0, 0, (swig_guile_proc) _wrap_set_show_environment_distances);
  scm_c_define_gsubr("show-environment-distances-state", 0, 0, 0, (swig_guile_proc) _wrap_show_environment_distances_state);
  scm_c_define_gsubr("set-environment-distances-distance-limits", 2, 0, 0, (swig_guile_proc) _wrap_set_environment_distances_distance_limits);
  scm_c_define_gsubr("fill-pointer-distances-widget", 1, 0, 0, (swig_guile_proc) _wrap_fill_pointer_distances_widget);
  scm_c_define_gsubr("execute-pointer-distances-settings", 1, 0, 0, (swig_guile_proc) _wrap_execute_pointer_distances_settings);
  scm_c_define_gsubr("toggle-pointer-distances-show-distances", 1, 0, 0, (swig_guile_proc) _wrap_toggle_pointer_distances_show_distances);
  scm_c_define_gsubr("set-show-pointer-distances", 1, 0, 0, (swig_guile_proc) _wrap_set_show_pointer_distances);
  scm_c_define_gsubr("scale-zoom", 1, 0, 0, (swig_guile_proc) _wrap_scale_zoom);
  scm_c_define_gsubr("scale-zoom-internal", 1, 0, 0, (swig_guile_proc) _wrap_scale_zoom_internal);
  scm_c_define_gsubr("zoom-factor", 0, 0, 0, (swig_guile_proc) _wrap_zoom_factor);
  scm_c_define_gsubr("set-smooth-scroll-do-zoom", 1, 0, 0, (swig_guile_proc) _wrap_set_smooth_scroll_do_zoom);
  scm_c_define_gsubr("smooth-scroll-do-zoom", 0, 0, 0, (swig_guile_proc) _wrap_smooth_scroll_do_zoom);
  scm_c_define_gsubr("smooth-scroll-zoom-limit", 0, 0, 0, (swig_guile_proc) _wrap_smooth_scroll_zoom_limit);
  scm_c_define_gsubr("set-smooth-scroll-zoom-limit", 1, 0, 0, (swig_guile_proc) _wrap_set_smooth_scroll_zoom_limit);
  scm_c_define_gsubr("set-zoom-adjustment", 1, 0, 0, (swig_guile_proc) _wrap_set_zoom_adjustment);
  scm_c_define_gsubr("set-zoom", 1, 0, 0, (swig_guile_proc) _wrap_set_zoom);
  scm_c_define_gsubr("handle-cns-data-file", 2, 0, 0, (swig_guile_proc) _wrap_handle_cns_data_file);
  scm_c_define_gsubr("handle-cns-data-file-with-cell", 9, 0, 0, (swig_guile_proc) _wrap_handle_cns_data_file_with_cell);
  scm_c_define_gsubr("auto-read-cif-data-with-phases", 1, 0, 0, (swig_guile_proc) _wrap_auto_read_cif_data_with_phases);
  scm_c_define_gsubr("read-cif-data-with-phases-sigmaa", 1, 0, 0, (swig_guile_proc) _wrap_read_cif_data_with_phases_sigmaa);
  scm_c_define_gsubr("read-cif-data-with-phases-diff-sigmaa", 1, 0, 0, (swig_guile_proc) _wrap_read_cif_data_with_phases_diff_sigmaa);
  scm_c_define_gsubr("read-cif-data", 2, 0, 0, (swig_guile_proc) _wrap_read_cif_data);
  scm_c_define_gsubr("read-cif-data-2fofc-map", 2, 0, 0, (swig_guile_proc) _wrap_read_cif_data_2fofc_map);
  scm_c_define_gsubr("read-cif-data-fofc-map", 2, 0, 0, (swig_guile_proc) _wrap_read_cif_data_fofc_map);
  scm_c_define_gsubr("read-cif-data-with-phases-fo-fc", 1, 0, 0, (swig_guile_proc) _wrap_read_cif_data_with_phases_fo_fc);
  scm_c_define_gsubr("read-cif-data-with-phases-2fo-fc", 1, 0, 0, (swig_guile_proc) _wrap_read_cif_data_with_phases_2fo_fc);
  scm_c_define_gsubr("read-cif-data-with-phases-nfo-fc", 2, 0, 0, (swig_guile_proc) _wrap_read_cif_data_with_phases_nfo_fc);
  scm_c_define_gsubr("read-cif-data-with-phases-fo-alpha-calc", 1, 0, 0, (swig_guile_proc) _wrap_read_cif_data_with_phases_fo_alpha_calc);
  scm_c_define_gsubr("handle-cif-dictionary", 1, 0, 0, (swig_guile_proc) _wrap_handle_cif_dictionary);
  scm_c_define_gsubr("read-cif-dictionary", 1, 0, 0, (swig_guile_proc) _wrap_read_cif_dictionary);
  scm_c_define_gsubr("write-connectivity", 2, 0, 0, (swig_guile_proc) _wrap_write_connectivity);
  scm_c_define_gsubr("import-all-refmac-cifs", 0, 0, 0, (swig_guile_proc) _wrap_import_all_refmac_cifs);
  scm_c_define_gsubr("read-shelx-ins-file", 1, 0, 0, (swig_guile_proc) _wrap_read_shelx_ins_file);
  scm_c_define_gsubr("write-shelx-ins-file", 2, 0, 0, (swig_guile_proc) _wrap_write_shelx_ins_file);
  scm_c_define_gsubr("handle-shelx-fcf-file-internal", 1, 0, 0, (swig_guile_proc) _wrap_handle_shelx_fcf_file_internal);
  scm_c_define_gsubr("chain-id-for-shelxl-residue-number", 2, 0, 0, (swig_guile_proc) _wrap_chain_id_for_shelxl_residue_number);
  scm_c_define_gsubr("is-shelx-molecule", 1, 0, 0, (swig_guile_proc) _wrap_is_shelx_molecule);
  scm_c_define_gsubr("add-shelx-string-to-molecule", 2, 0, 0, (swig_guile_proc) _wrap_add_shelx_string_to_molecule);
  scm_c_define_gsubr("deviant-geometry", 1, 0, 0, (swig_guile_proc) _wrap_deviant_geometry);
  scm_c_define_gsubr("is-valid-model-molecule", 1, 0, 0, (swig_guile_proc) _wrap_is_valid_model_molecule);
  scm_c_define_gsubr("is-valid-map-molecule", 1, 0, 0, (swig_guile_proc) _wrap_is_valid_map_molecule);
  scm_c_define_gsubr("free-geometry-graph", 1, 0, 0, (swig_guile_proc) _wrap_free_geometry_graph);
  scm_c_define_gsubr("unset-geometry-graph", 1, 0, 0, (swig_guile_proc) _wrap_unset_geometry_graph);
  scm_c_define_gsubr("add-on-validation-graph-mol-options", 2, 0, 0, (swig_guile_proc) _wrap_add_on_validation_graph_mol_options);
  scm_c_define_gsubr("my-delete-validaton-graph-mol-option", 2, 0, 0, (swig_guile_proc) _wrap_my_delete_validaton_graph_mol_option);
  scm_c_define_gsubr("validation-graph-b-factor-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_validation_graph_b_factor_mol_selector_activate);
  scm_c_define_gsubr("validation-graph-geometry-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_validation_graph_geometry_mol_selector_activate);
  scm_c_define_gsubr("validation-graph-omega-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_validation_graph_omega_mol_selector_activate);
  scm_c_define_gsubr("validation-graph-rotamer-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_validation_graph_rotamer_mol_selector_activate);
  scm_c_define_gsubr("validation-graph-density-fit-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_validation_graph_density_fit_mol_selector_activate);
  scm_c_define_gsubr("gln-and-asn-b-factor-outlier-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_gln_and_asn_b_factor_outlier_mol_selector_activate);
  scm_c_define_gsubr("validation-graph-ncs-diffs-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_validation_graph_ncs_diffs_mol_selector_activate);
  scm_c_define_gsubr("probe-mol-selector-activate", 2, 0, 0, (swig_guile_proc) _wrap_probe_mol_selector_activate);
  scm_c_define_gsubr("difference-map-peaks", 5, 0, 0, (swig_guile_proc) _wrap_difference_map_peaks);
  scm_c_define_gsubr("difference-map-peaks-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_difference_map_peaks_by_widget);
  scm_c_define_gsubr("set-difference-map-peaks-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_difference_map_peaks_widget);
  scm_c_define_gsubr("clear-diff-map-peaks", 0, 0, 0, (swig_guile_proc) _wrap_clear_diff_map_peaks);
  scm_c_define_gsubr("wrapped-create-generate-diff-map-peaks-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_generate_diff_map_peaks_dialog);
  scm_c_define_gsubr("gln-asn-b-factor-outliers", 1, 0, 0, (swig_guile_proc) _wrap_gln_asn_b_factor_outliers);
  scm_c_define_gsubr("do-ramachandran-plot", 1, 0, 0, (swig_guile_proc) _wrap_do_ramachandran_plot);
  scm_c_define_gsubr("add-on-rama-choices", 0, 0, 0, (swig_guile_proc) _wrap_add_on_rama_choices);
  scm_c_define_gsubr("set-ramachandran-plot-contour-levels", 2, 0, 0, (swig_guile_proc) _wrap_set_ramachandran_plot_contour_levels);
  scm_c_define_gsubr("set-ramachandran-plot-background-block-size", 1, 0, 0, (swig_guile_proc) _wrap_set_ramachandran_plot_background_block_size);
  scm_c_define_gsubr("my-delete-ramachandran-mol-option", 2, 0, 0, (swig_guile_proc) _wrap_my_delete_ramachandran_mol_option);
  scm_c_define_gsubr("set-dynarama-is-displayed", 2, 0, 0, (swig_guile_proc) _wrap_set_dynarama_is_displayed);
  scm_c_define_gsubr("dynarama-is-displayed-state", 1, 0, 0, (swig_guile_proc) _wrap_dynarama_is_displayed_state);
  scm_c_define_gsubr("get-mol-from-dynarama", 1, 0, 0, (swig_guile_proc) _wrap_get_mol_from_dynarama);
  scm_c_define_gsubr("set-moving-atoms", 2, 0, 0, (swig_guile_proc) _wrap_set_moving_atoms);
  scm_c_define_gsubr("accept-phi-psi-moving-atoms", 0, 0, 0, (swig_guile_proc) _wrap_accept_phi_psi_moving_atoms);
  scm_c_define_gsubr("setup-edit-phi-psi", 1, 0, 0, (swig_guile_proc) _wrap_setup_edit_phi_psi);
  scm_c_define_gsubr("setup-dynamic-distances", 1, 0, 0, (swig_guile_proc) _wrap_setup_dynamic_distances);
  scm_c_define_gsubr("destroy-edit-backbone-rama-plot", 0, 0, 0, (swig_guile_proc) _wrap_destroy_edit_backbone_rama_plot);
  scm_c_define_gsubr("ramachandran-plot-differences", 2, 0, 0, (swig_guile_proc) _wrap_ramachandran_plot_differences);
  scm_c_define_gsubr("ramachandran-plot-differences-by-chain", 4, 0, 0, (swig_guile_proc) _wrap_ramachandran_plot_differences_by_chain);
  scm_c_define_gsubr("wrapped-ramachandran-plot-differences-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_ramachandran_plot_differences_dialog);
  scm_c_define_gsubr("do-ramachandran-plot-differences-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_do_ramachandran_plot_differences_by_widget);
  scm_c_define_gsubr("fill-ramachandran-plot-differences-option-menu-with-chain-options", 2, 0, 0, (swig_guile_proc) _wrap_fill_ramachandran_plot_differences_option_menu_with_chain_options);
  scm_c_define_gsubr("ramachandran-plot-differences-mol-option-menu-activate-first", 2, 0, 0, (swig_guile_proc) _wrap_ramachandran_plot_differences_mol_option_menu_activate_first);
  scm_c_define_gsubr("ramachandran-plot-differences-mol-option-menu-activate-second", 2, 0, 0, (swig_guile_proc) _wrap_ramachandran_plot_differences_mol_option_menu_activate_second);
  scm_c_define_gsubr("ramachandran-plot-differences-chain-option-menu-activate-first", 2, 0, 0, (swig_guile_proc) _wrap_ramachandran_plot_differences_chain_option_menu_activate_first);
  scm_c_define_gsubr("ramachandran-plot-differences-chain-option-menu-activate-second", 2, 0, 0, (swig_guile_proc) _wrap_ramachandran_plot_differences_chain_option_menu_activate_second);
  scm_c_define_gsubr("do-sequence-view", 1, 0, 0, (swig_guile_proc) _wrap_do_sequence_view);
  scm_c_define_gsubr("add-on-sequence-view-choices", 0, 0, 0, (swig_guile_proc) _wrap_add_on_sequence_view_choices);
  scm_c_define_gsubr("set-sequence-view-is-displayed", 2, 0, 0, (swig_guile_proc) _wrap_set_sequence_view_is_displayed);
  scm_c_define_gsubr("change-peptide-carbonyl-by", 1, 0, 0, (swig_guile_proc) _wrap_change_peptide_carbonyl_by);
  scm_c_define_gsubr("change-peptide-peptide-by", 1, 0, 0, (swig_guile_proc) _wrap_change_peptide_peptide_by);
  scm_c_define_gsubr("execute-setup-backbone-torsion-edit", 2, 0, 0, (swig_guile_proc) _wrap_execute_setup_backbone_torsion_edit);
  scm_c_define_gsubr("setup-backbone-torsion-edit", 1, 0, 0, (swig_guile_proc) _wrap_setup_backbone_torsion_edit);
  scm_c_define_gsubr("set-backbone-torsion-peptide-button-start-pos", 2, 0, 0, (swig_guile_proc) _wrap_set_backbone_torsion_peptide_button_start_pos);
  scm_c_define_gsubr("change-peptide-peptide-by-current-button-pos", 2, 0, 0, (swig_guile_proc) _wrap_change_peptide_peptide_by_current_button_pos);
  scm_c_define_gsubr("set-backbone-torsion-carbonyl-button-start-pos", 2, 0, 0, (swig_guile_proc) _wrap_set_backbone_torsion_carbonyl_button_start_pos);
  scm_c_define_gsubr("change-peptide-carbonyl-by-current-button-pos", 2, 0, 0, (swig_guile_proc) _wrap_change_peptide_carbonyl_by_current_button_pos);
  scm_c_define_gsubr("add-atom-label", 4, 0, 0, (swig_guile_proc) _wrap_add_atom_label);
  scm_c_define_gsubr("remove-atom-label", 4, 0, 0, (swig_guile_proc) _wrap_remove_atom_label);
  scm_c_define_gsubr("remove-all-atom-labels", 0, 0, 0, (swig_guile_proc) _wrap_remove_all_atom_labels);
  scm_c_define_gsubr("set-label-on-recentre-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_label_on_recentre_flag);
  scm_c_define_gsubr("centre-atom-label-status", 0, 0, 0, (swig_guile_proc) _wrap_centre_atom_label_status);
  scm_c_define_gsubr("set-brief-atom-labels", 1, 0, 0, (swig_guile_proc) _wrap_set_brief_atom_labels);
  scm_c_define_gsubr("brief-atom-labels-state", 0, 0, 0, (swig_guile_proc) _wrap_brief_atom_labels_state);
  scm_c_define_gsubr("rotate-y-scene", 2, 0, 0, (swig_guile_proc) _wrap_rotate_y_scene);
  scm_c_define_gsubr("rotate-x-scene", 2, 0, 0, (swig_guile_proc) _wrap_rotate_x_scene);
  scm_c_define_gsubr("rotate-z-scene", 2, 0, 0, (swig_guile_proc) _wrap_rotate_z_scene);
  scm_c_define_gsubr("spin-zoom-trans", 7, 0, 0, (swig_guile_proc) _wrap_spin_zoom_trans);
  scm_c_define_gsubr("add-view-here", 1, 0, 0, (swig_guile_proc) _wrap_add_view_here);
  scm_c_define_gsubr("add-view-raw", 9, 0, 0, (swig_guile_proc) _wrap_add_view_raw);
  scm_c_define_gsubr("play-views", 0, 0, 0, (swig_guile_proc) _wrap_play_views);
  scm_c_define_gsubr("remove-this-view", 0, 0, 0, (swig_guile_proc) _wrap_remove_this_view);
  scm_c_define_gsubr("remove-named-view", 1, 0, 0, (swig_guile_proc) _wrap_remove_named_view);
  scm_c_define_gsubr("remove-view", 1, 0, 0, (swig_guile_proc) _wrap_remove_view);
  scm_c_define_gsubr("go-to-first-view", 1, 0, 0, (swig_guile_proc) _wrap_go_to_first_view);
  scm_c_define_gsubr("go-to-view-number", 2, 0, 0, (swig_guile_proc) _wrap_go_to_view_number);
  scm_c_define_gsubr("add-spin-view", 3, 0, 0, (swig_guile_proc) _wrap_add_spin_view);
  scm_c_define_gsubr("add-view-description", 2, 0, 0, (swig_guile_proc) _wrap_add_view_description);
  scm_c_define_gsubr("add-action-view", 2, 0, 0, (swig_guile_proc) _wrap_add_action_view);
  scm_c_define_gsubr("insert-action-view-after-view", 3, 0, 0, (swig_guile_proc) _wrap_insert_action_view_after_view);
  scm_c_define_gsubr("n-views", 0, 0, 0, (swig_guile_proc) _wrap_n_views);
  scm_c_define_gsubr("save-views", 1, 0, 0, (swig_guile_proc) _wrap_save_views);
  scm_c_define_gsubr("views-play-speed", 0, 0, 0, (swig_guile_proc) _wrap_views_play_speed);
  scm_c_define_gsubr("set-views-play-speed", 1, 0, 0, (swig_guile_proc) _wrap_set_views_play_speed);
  scm_c_define_gsubr("view-name", 1, 0, 0, (swig_guile_proc) _wrap_view_name);
  scm_c_define_gsubr("view-description", 1, 0, 0, (swig_guile_proc) _wrap_view_description);
  scm_c_define_gsubr("go-to-view", 1, 0, 0, (swig_guile_proc) _wrap_go_to_view);
  scm_c_define_gsubr("clear-all-views", 0, 0, 0, (swig_guile_proc) _wrap_clear_all_views);
  scm_c_define_gsubr("set-movie-file-name-prefix", 1, 0, 0, (swig_guile_proc) _wrap_set_movie_file_name_prefix);
  scm_c_define_gsubr("set-movie-frame-number", 1, 0, 0, (swig_guile_proc) _wrap_set_movie_frame_number);
  scm_c_define_gsubr("movie-file-name-prefix", 0, 0, 0, (swig_guile_proc) _wrap_movie_file_name_prefix);
  scm_c_define_gsubr("movie-frame-number", 0, 0, 0, (swig_guile_proc) _wrap_movie_frame_number);
  scm_c_define_gsubr("set-make-movie-mode", 1, 0, 0, (swig_guile_proc) _wrap_set_make_movie_mode);
  scm_c_define_gsubr("set-background-colour", 3, 0, 0, (swig_guile_proc) _wrap_set_background_colour);
  scm_c_define_gsubr("background-is-black-p", 0, 0, 0, (swig_guile_proc) _wrap_background_is_black_p);
  scm_c_define_gsubr("set-ligand-acceptable-fit-fraction", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_acceptable_fit_fraction);
  scm_c_define_gsubr("set-ligand-cluster-sigma-level", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_cluster_sigma_level);
  scm_c_define_gsubr("set-ligand-flexible-ligand-n-samples", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_flexible_ligand_n_samples);
  scm_c_define_gsubr("set-ligand-verbose-reporting", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_verbose_reporting);
  scm_c_define_gsubr("set-find-ligand-n-top-ligands", 1, 0, 0, (swig_guile_proc) _wrap_set_find_ligand_n_top_ligands);
  scm_c_define_gsubr("set-find-ligand-mask-waters", 1, 0, 0, (swig_guile_proc) _wrap_set_find_ligand_mask_waters);
  scm_c_define_gsubr("set-ligand-cluster-sigma-level-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_cluster_sigma_level_from_widget);
  scm_c_define_gsubr("set-ligand-search-protein-molecule", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_search_protein_molecule);
  scm_c_define_gsubr("set-ligand-search-map-molecule", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_search_map_molecule);
  scm_c_define_gsubr("add-ligand-search-ligand-molecule", 1, 0, 0, (swig_guile_proc) _wrap_add_ligand_search_ligand_molecule);
  scm_c_define_gsubr("add-ligand-search-wiggly-ligand-molecule", 1, 0, 0, (swig_guile_proc) _wrap_add_ligand_search_wiggly_ligand_molecule);
  scm_c_define_gsubr("execute-ligand-search", 0, 0, 0, (swig_guile_proc) _wrap_execute_ligand_search);
  scm_c_define_gsubr("free-ligand-search-user-data", 1, 0, 0, (swig_guile_proc) _wrap_free_ligand_search_user_data);
  scm_c_define_gsubr("add-ligand-clear-ligands", 0, 0, 0, (swig_guile_proc) _wrap_add_ligand_clear_ligands);
  scm_c_define_gsubr("ligand-expert", 0, 0, 0, (swig_guile_proc) _wrap_ligand_expert);
  scm_c_define_gsubr("do-find-ligands-dialog", 0, 0, 0, (swig_guile_proc) _wrap_do_find_ligands_dialog);
  scm_c_define_gsubr("fill-ligands-dialog", 1, 0, 0, (swig_guile_proc) _wrap_fill_ligands_dialog);
  scm_c_define_gsubr("fill-ligands-dialog-map-bits", 2, 0, 0, (swig_guile_proc) _wrap_fill_ligands_dialog_map_bits);
  scm_c_define_gsubr("fill-ligands-dialog-protein-bits", 1, 0, 0, (swig_guile_proc) _wrap_fill_ligands_dialog_protein_bits);
  scm_c_define_gsubr("fill-ligands-dialog-ligands-bits", 1, 0, 0, (swig_guile_proc) _wrap_fill_ligands_dialog_ligands_bits);
  scm_c_define_gsubr("do-find-ligand-many-atoms-in-ligands", 1, 0, 0, (swig_guile_proc) _wrap_do_find_ligand_many_atoms_in_ligands);
  scm_c_define_gsubr("fill-ligands-dialog-map-bits-by-dialog-name", 3, 0, 0, (swig_guile_proc) _wrap_fill_ligands_dialog_map_bits_by_dialog_name);
  scm_c_define_gsubr("fill-ligands-dialog-protein-bits-by-dialog-name", 2, 0, 0, (swig_guile_proc) _wrap_fill_ligands_dialog_protein_bits_by_dialog_name);
  scm_c_define_gsubr("fill-vbox-with-coords-options-by-dialog-name", 3, 0, 0, (swig_guile_proc) _wrap_fill_vbox_with_coords_options_by_dialog_name);
  scm_c_define_gsubr("fill-ligands-sigma-level-entry", 1, 0, 0, (swig_guile_proc) _wrap_fill_ligands_sigma_level_entry);
  scm_c_define_gsubr("fill-ligands-expert-options", 1, 0, 0, (swig_guile_proc) _wrap_fill_ligands_expert_options);
  scm_c_define_gsubr("set-ligand-expert-options-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_expert_options_from_widget);
  scm_c_define_gsubr("overlap-ligands", 4, 0, 0, (swig_guile_proc) _wrap_overlap_ligands);
  scm_c_define_gsubr("analyse-ligand-differences", 4, 0, 0, (swig_guile_proc) _wrap_analyse_ligand_differences);
  scm_c_define_gsubr("execute-get-mols-ligand-search", 1, 0, 0, (swig_guile_proc) _wrap_execute_get_mols_ligand_search);
  scm_c_define_gsubr("free-blob-dialog-memory", 1, 0, 0, (swig_guile_proc) _wrap_free_blob_dialog_memory);
  scm_c_define_gsubr("renumber-waters", 1, 0, 0, (swig_guile_proc) _wrap_renumber_waters);
  scm_c_define_gsubr("fill-find-waters-dialog", 1, 0, 0, (swig_guile_proc) _wrap_fill_find_waters_dialog);
  scm_c_define_gsubr("execute-find-waters", 1, 0, 0, (swig_guile_proc) _wrap_execute_find_waters);
  scm_c_define_gsubr("execute-find-waters-real", 4, 0, 0, (swig_guile_proc) _wrap_execute_find_waters_real);
  scm_c_define_gsubr("find-waters", 5, 0, 0, (swig_guile_proc) _wrap_find_waters);
  scm_c_define_gsubr("get-text-for-find-waters-sigma-cut-off", 0, 0, 0, (swig_guile_proc) _wrap_get_text_for_find_waters_sigma_cut_off);
  scm_c_define_gsubr("set-value-for-find-waters-sigma-cut-off", 1, 0, 0, (swig_guile_proc) _wrap_set_value_for_find_waters_sigma_cut_off);
  scm_c_define_gsubr("on-big-blob-button-clicked", 2, 0, 0, (swig_guile_proc) _wrap_on_big_blob_button_clicked);
  scm_c_define_gsubr("set-ligand-water-spherical-variance-limit", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_water_spherical_variance_limit);
  scm_c_define_gsubr("set-ligand-water-to-protein-distance-limits", 2, 0, 0, (swig_guile_proc) _wrap_set_ligand_water_to_protein_distance_limits);
  scm_c_define_gsubr("set-ligand-water-n-cycles", 1, 0, 0, (swig_guile_proc) _wrap_set_ligand_water_n_cycles);
  scm_c_define_gsubr("set-write-peaksearched-waters", 0, 0, 0, (swig_guile_proc) _wrap_set_write_peaksearched_waters);
  scm_c_define_gsubr("execute-find-blobs", 4, 0, 0, (swig_guile_proc) _wrap_execute_find_blobs);
  scm_c_define_gsubr("execute-find-blobs-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_execute_find_blobs_from_widget);
  scm_c_define_gsubr("wrapped-create-unmodelled-blobs-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_unmodelled_blobs_dialog);
  scm_c_define_gsubr("set-default-bond-thickness", 1, 0, 0, (swig_guile_proc) _wrap_set_default_bond_thickness);
  scm_c_define_gsubr("set-bond-thickness", 2, 0, 0, (swig_guile_proc) _wrap_set_bond_thickness);
  scm_c_define_gsubr("set-bond-thickness-intermediate-atoms", 1, 0, 0, (swig_guile_proc) _wrap_set_bond_thickness_intermediate_atoms);
  scm_c_define_gsubr("set-unbonded-atom-star-size", 1, 0, 0, (swig_guile_proc) _wrap_set_unbonded_atom_star_size);
  scm_c_define_gsubr("set-draw-zero-occ-markers", 1, 0, 0, (swig_guile_proc) _wrap_set_draw_zero_occ_markers);
  scm_c_define_gsubr("set-draw-hydrogens", 2, 0, 0, (swig_guile_proc) _wrap_set_draw_hydrogens);
  scm_c_define_gsubr("graphics-to-ca-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_ca_representation);
  scm_c_define_gsubr("graphics-to-ca-plus-ligands-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_ca_plus_ligands_representation);
  scm_c_define_gsubr("graphics-to-bonds-no-waters-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_bonds_no_waters_representation);
  scm_c_define_gsubr("graphics-to-bonds-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_bonds_representation);
  scm_c_define_gsubr("graphics-to-ca-plus-ligands-sec-struct-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_ca_plus_ligands_sec_struct_representation);
  scm_c_define_gsubr("graphics-to-sec-struct-bonds-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_sec_struct_bonds_representation);
  scm_c_define_gsubr("graphics-to-rainbow-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_rainbow_representation);
  scm_c_define_gsubr("graphics-to-b-factor-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_b_factor_representation);
  scm_c_define_gsubr("graphics-to-occupancy-representation", 1, 0, 0, (swig_guile_proc) _wrap_graphics_to_occupancy_representation);
  scm_c_define_gsubr("graphics-molecule-bond-type", 1, 0, 0, (swig_guile_proc) _wrap_graphics_molecule_bond_type);
  scm_c_define_gsubr("set-b-factor-bonds-scale-factor", 2, 0, 0, (swig_guile_proc) _wrap_set_b_factor_bonds_scale_factor);
  scm_c_define_gsubr("wrapped-create-bond-parameters-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_bond_parameters_dialog);
  scm_c_define_gsubr("apply-bond-parameters", 1, 0, 0, (swig_guile_proc) _wrap_apply_bond_parameters);
  scm_c_define_gsubr("make-ball-and-stick", 5, 0, 0, (swig_guile_proc) _wrap_make_ball_and_stick);
  scm_c_define_gsubr("clear-ball-and-stick", 1, 0, 0, (swig_guile_proc) _wrap_clear_ball_and_stick);
  scm_c_define_gsubr("dots", 4, 0, 0, (swig_guile_proc) _wrap_dots);
  scm_c_define_gsubr("clear-dots", 2, 0, 0, (swig_guile_proc) _wrap_clear_dots);
  scm_c_define_gsubr("n-dots-sets", 1, 0, 0, (swig_guile_proc) _wrap_n_dots_sets);
  scm_c_define_gsubr("do-pepflip", 1, 0, 0, (swig_guile_proc) _wrap_do_pepflip);
  scm_c_define_gsubr("pepflip", 4, 0, 0, (swig_guile_proc) _wrap_pepflip);
  scm_c_define_gsubr("do-rigid-body-refine", 1, 0, 0, (swig_guile_proc) _wrap_do_rigid_body_refine);
  scm_c_define_gsubr("rigid-body-refine-zone", 4, 0, 0, (swig_guile_proc) _wrap_rigid_body_refine_zone);
  scm_c_define_gsubr("execute-rigid-body-refine", 1, 0, 0, (swig_guile_proc) _wrap_execute_rigid_body_refine);
  scm_c_define_gsubr("set-rigid-body-fit-acceptable-fit-fraction", 1, 0, 0, (swig_guile_proc) _wrap_set_rigid_body_fit_acceptable_fit_fraction);
  scm_c_define_gsubr("toggle-dynamic-map-display-size", 0, 0, 0, (swig_guile_proc) _wrap_toggle_dynamic_map_display_size);
  scm_c_define_gsubr("toggle-dynamic-map-sampling", 0, 0, 0, (swig_guile_proc) _wrap_toggle_dynamic_map_sampling);
  scm_c_define_gsubr("set-map-dynamic-map-sampling-checkbutton", 1, 0, 0, (swig_guile_proc) _wrap_set_map_dynamic_map_sampling_checkbutton);
  scm_c_define_gsubr("set-map-dynamic-map-display-size-checkbutton", 1, 0, 0, (swig_guile_proc) _wrap_set_map_dynamic_map_display_size_checkbutton);
  scm_c_define_gsubr("set-dynamic-map-size-display-on", 0, 0, 0, (swig_guile_proc) _wrap_set_dynamic_map_size_display_on);
  scm_c_define_gsubr("set-dynamic-map-size-display-off", 0, 0, 0, (swig_guile_proc) _wrap_set_dynamic_map_size_display_off);
  scm_c_define_gsubr("set-dynamic-map-sampling-on", 0, 0, 0, (swig_guile_proc) _wrap_set_dynamic_map_sampling_on);
  scm_c_define_gsubr("set-dynamic-map-sampling-off", 0, 0, 0, (swig_guile_proc) _wrap_set_dynamic_map_sampling_off);
  scm_c_define_gsubr("set-dynamic-map-zoom-offset", 1, 0, 0, (swig_guile_proc) _wrap_set_dynamic_map_zoom_offset);
  scm_c_define_gsubr("do-add-terminal-residue", 1, 0, 0, (swig_guile_proc) _wrap_do_add_terminal_residue);
  scm_c_define_gsubr("set-add-terminal-residue-n-phi-psi-trials", 1, 0, 0, (swig_guile_proc) _wrap_set_add_terminal_residue_n_phi_psi_trials);
  scm_c_define_gsubr("set-add-terminal-residue-add-other-residue-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_add_terminal_residue_add_other_residue_flag);
  scm_c_define_gsubr("set-terminal-residue-do-rigid-body-refine", 1, 0, 0, (swig_guile_proc) _wrap_set_terminal_residue_do_rigid_body_refine);
  scm_c_define_gsubr("add-terminal-residue-immediate-addition-state", 0, 0, 0, (swig_guile_proc) _wrap_add_terminal_residue_immediate_addition_state);
  scm_c_define_gsubr("set-add-terminal-residue-immediate-addition", 1, 0, 0, (swig_guile_proc) _wrap_set_add_terminal_residue_immediate_addition);
  scm_c_define_gsubr("add-terminal-residue", 5, 0, 0, (swig_guile_proc) _wrap_add_terminal_residue);
  scm_c_define_gsubr("set-add-terminal-residue-default-residue-type", 1, 0, 0, (swig_guile_proc) _wrap_set_add_terminal_residue_default_residue_type);
  scm_c_define_gsubr("set-add-terminal-residue-do-post-refine", 1, 0, 0, (swig_guile_proc) _wrap_set_add_terminal_residue_do_post_refine);
  scm_c_define_gsubr("delete-atom-by-atom-index", 3, 0, 0, (swig_guile_proc) _wrap_delete_atom_by_atom_index);
  scm_c_define_gsubr("delete-residue-by-atom-index", 3, 0, 0, (swig_guile_proc) _wrap_delete_residue_by_atom_index);
  scm_c_define_gsubr("delete-residue-hydrogens-by-atom-index", 3, 0, 0, (swig_guile_proc) _wrap_delete_residue_hydrogens_by_atom_index);
  scm_c_define_gsubr("delete-residue-range", 4, 0, 0, (swig_guile_proc) _wrap_delete_residue_range);
  scm_c_define_gsubr("delete-residue", 4, 0, 0, (swig_guile_proc) _wrap_delete_residue);
  scm_c_define_gsubr("delete-residue-with-altconf", 5, 0, 0, (swig_guile_proc) _wrap_delete_residue_with_altconf);
  scm_c_define_gsubr("delete-residue-hydrogens", 5, 0, 0, (swig_guile_proc) _wrap_delete_residue_hydrogens);
  scm_c_define_gsubr("delete-atom", 6, 0, 0, (swig_guile_proc) _wrap_delete_atom);
  scm_c_define_gsubr("delete-residue-sidechain", 5, 0, 0, (swig_guile_proc) _wrap_delete_residue_sidechain);
  scm_c_define_gsubr("set-delete-atom-mode", 0, 0, 0, (swig_guile_proc) _wrap_set_delete_atom_mode);
  scm_c_define_gsubr("set-delete-residue-mode", 0, 0, 0, (swig_guile_proc) _wrap_set_delete_residue_mode);
  scm_c_define_gsubr("set-delete-residue-zone-mode", 0, 0, 0, (swig_guile_proc) _wrap_set_delete_residue_zone_mode);
  scm_c_define_gsubr("set-delete-residue-hydrogens-mode", 0, 0, 0, (swig_guile_proc) _wrap_set_delete_residue_hydrogens_mode);
  scm_c_define_gsubr("set-delete-water-mode", 0, 0, 0, (swig_guile_proc) _wrap_set_delete_water_mode);
  scm_c_define_gsubr("set-delete-sidechain-mode", 0, 0, 0, (swig_guile_proc) _wrap_set_delete_sidechain_mode);
  scm_c_define_gsubr("delete-item-mode-is-atom-p", 0, 0, 0, (swig_guile_proc) _wrap_delete_item_mode_is_atom_p);
  scm_c_define_gsubr("delete-item-mode-is-residue-p", 0, 0, 0, (swig_guile_proc) _wrap_delete_item_mode_is_residue_p);
  scm_c_define_gsubr("delete-item-mode-is-water-p", 0, 0, 0, (swig_guile_proc) _wrap_delete_item_mode_is_water_p);
  scm_c_define_gsubr("delete-item-mode-is-sidechain-p", 0, 0, 0, (swig_guile_proc) _wrap_delete_item_mode_is_sidechain_p);
  scm_c_define_gsubr("store-delete-item-widget", 1, 0, 0, (swig_guile_proc) _wrap_store_delete_item_widget);
  scm_c_define_gsubr("clear-pending-delete-item", 0, 0, 0, (swig_guile_proc) _wrap_clear_pending_delete_item);
  scm_c_define_gsubr("clear-delete-item-widget", 0, 0, 0, (swig_guile_proc) _wrap_clear_delete_item_widget);
  scm_c_define_gsubr("store-delete-item-widget-position", 0, 0, 0, (swig_guile_proc) _wrap_store_delete_item_widget_position);
  scm_c_define_gsubr("delete-item-widget-is-being-shown", 0, 0, 0, (swig_guile_proc) _wrap_delete_item_widget_is_being_shown);
  scm_c_define_gsubr("delete-item-widget-keep-active-on", 0, 0, 0, (swig_guile_proc) _wrap_delete_item_widget_keep_active_on);
  scm_c_define_gsubr("wrapped-create-delete-item-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_delete_item_dialog);
  scm_c_define_gsubr("do-rot-trans-setup", 1, 0, 0, (swig_guile_proc) _wrap_do_rot_trans_setup);
  scm_c_define_gsubr("do-rot-trans-adjustments", 1, 0, 0, (swig_guile_proc) _wrap_do_rot_trans_adjustments);
  scm_c_define_gsubr("rot-trans-reset-previous", 0, 0, 0, (swig_guile_proc) _wrap_rot_trans_reset_previous);
  scm_c_define_gsubr("set-rotate-translate-zone-rotates-about-zone-centre", 1, 0, 0, (swig_guile_proc) _wrap_set_rotate_translate_zone_rotates_about_zone_centre);
  scm_c_define_gsubr("do-cis-trans-conversion-setup", 1, 0, 0, (swig_guile_proc) _wrap_do_cis_trans_conversion_setup);
  scm_c_define_gsubr("cis-trans-convert", 4, 0, 0, (swig_guile_proc) _wrap_cis_trans_convert);
  scm_c_define_gsubr("cis-peptides", 1, 0, 0, (swig_guile_proc) _wrap_cis_peptides);
  scm_c_define_gsubr("do-db-main", 1, 0, 0, (swig_guile_proc) _wrap_do_db_main);
  scm_c_define_gsubr("db-mainchain", 5, 0, 0, (swig_guile_proc) _wrap_db_mainchain);
  scm_c_define_gsubr("close-molecule", 1, 0, 0, (swig_guile_proc) _wrap_close_molecule);
  scm_c_define_gsubr("close-molecule-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_close_molecule_by_widget);
  scm_c_define_gsubr("fill-close-option-menu-with-all-molecule-options", 1, 0, 0, (swig_guile_proc) _wrap_fill_close_option_menu_with_all_molecule_options);
  scm_c_define_gsubr("close-molecule-item-select", 2, 0, 0, (swig_guile_proc) _wrap_close_molecule_item_select);
  scm_c_define_gsubr("new-close-molecules", 1, 0, 0, (swig_guile_proc) _wrap_new_close_molecules);
  scm_c_define_gsubr("wrapped-create-new-close-molecules-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_new_close_molecules_dialog);
  scm_c_define_gsubr("setup-rotamers", 1, 0, 0, (swig_guile_proc) _wrap_setup_rotamers);
  scm_c_define_gsubr("do-rotamers", 2, 0, 0, (swig_guile_proc) _wrap_do_rotamers);
  scm_c_define_gsubr("set-rotamer-lowest-probability", 1, 0, 0, (swig_guile_proc) _wrap_set_rotamer_lowest_probability);
  scm_c_define_gsubr("set-rotamer-check-clashes", 1, 0, 0, (swig_guile_proc) _wrap_set_rotamer_check_clashes);
  scm_c_define_gsubr("auto-fit-best-rotamer", 8, 0, 0, (swig_guile_proc) _wrap_auto_fit_best_rotamer);
  scm_c_define_gsubr("set-auto-fit-best-rotamer-clash-flag", 1, 0, 0, (swig_guile_proc) _wrap_set_auto_fit_best_rotamer_clash_flag);
  scm_c_define_gsubr("rotamer-score", 6, 0, 0, (swig_guile_proc) _wrap_rotamer_score);
  scm_c_define_gsubr("setup-auto-fit-rotamer", 1, 0, 0, (swig_guile_proc) _wrap_setup_auto_fit_rotamer);
  scm_c_define_gsubr("fill-partial-residues", 1, 0, 0, (swig_guile_proc) _wrap_fill_partial_residues);
  scm_c_define_gsubr("fill-partial-residue", 4, 0, 0, (swig_guile_proc) _wrap_fill_partial_residue);
  scm_c_define_gsubr("set-graphics-rotamer-dialog", 1, 0, 0, (swig_guile_proc) _wrap_set_graphics_rotamer_dialog);
  scm_c_define_gsubr("rotamer-graphs", 1, 0, 0, (swig_guile_proc) _wrap_rotamer_graphs);
  scm_c_define_gsubr("do-180-degree-side-chain-flip", 5, 0, 0, (swig_guile_proc) _wrap_do_180_degree_side_chain_flip);
  scm_c_define_gsubr("setup-180-degree-flip", 1, 0, 0, (swig_guile_proc) _wrap_setup_180_degree_flip);
  scm_c_define_gsubr("setup-mutate", 1, 0, 0, (swig_guile_proc) _wrap_setup_mutate);
  scm_c_define_gsubr("setup-mutate-auto-fit", 1, 0, 0, (swig_guile_proc) _wrap_setup_mutate_auto_fit);
  scm_c_define_gsubr("do-mutation", 2, 0, 0, (swig_guile_proc) _wrap_do_mutation);
  scm_c_define_gsubr("progressive-residues-in-chain-check", 2, 0, 0, (swig_guile_proc) _wrap_progressive_residues_in_chain_check);
  scm_c_define_gsubr("mutate", 5, 0, 0, (swig_guile_proc) _wrap_mutate);
  scm_c_define_gsubr("set-mutate-auto-fit-do-post-refine", 1, 0, 0, (swig_guile_proc) _wrap_set_mutate_auto_fit_do_post_refine);
  scm_c_define_gsubr("mutate-auto-fit-do-post-refine-state", 0, 0, 0, (swig_guile_proc) _wrap_mutate_auto_fit_do_post_refine_state);
  scm_c_define_gsubr("mutate-single-residue-by-serial-number", 4, 0, 0, (swig_guile_proc) _wrap_mutate_single_residue_by_serial_number);
  scm_c_define_gsubr("mutate-single-residue-by-seqno", 5, 0, 0, (swig_guile_proc) _wrap_mutate_single_residue_by_seqno);
  scm_c_define_gsubr("do-base-mutation", 1, 0, 0, (swig_guile_proc) _wrap_do_base_mutation);
  scm_c_define_gsubr("set-residue-type-chooser-stub-state", 1, 0, 0, (swig_guile_proc) _wrap_set_residue_type_chooser_stub_state);
  scm_c_define_gsubr("alt-conf-split-type-number", 0, 0, 0, (swig_guile_proc) _wrap_alt_conf_split_type_number);
  scm_c_define_gsubr("set-add-alt-conf-split-type-number", 1, 0, 0, (swig_guile_proc) _wrap_set_add_alt_conf_split_type_number);
  scm_c_define_gsubr("setup-alt-conf-with-dialog", 1, 0, 0, (swig_guile_proc) _wrap_setup_alt_conf_with_dialog);
  scm_c_define_gsubr("unset-add-alt-conf-dialog", 0, 0, 0, (swig_guile_proc) _wrap_unset_add_alt_conf_dialog);
  scm_c_define_gsubr("unset-add-alt-conf-define", 0, 0, 0, (swig_guile_proc) _wrap_unset_add_alt_conf_define);
  scm_c_define_gsubr("altconf", 0, 0, 0, (swig_guile_proc) _wrap_altconf);
  scm_c_define_gsubr("set-add-alt-conf-new-atoms-occupancy", 1, 0, 0, (swig_guile_proc) _wrap_set_add_alt_conf_new_atoms_occupancy);
  scm_c_define_gsubr("set-show-alt-conf-intermediate-atoms", 1, 0, 0, (swig_guile_proc) _wrap_set_show_alt_conf_intermediate_atoms);
  scm_c_define_gsubr("show-alt-conf-intermediate-atoms-state", 0, 0, 0, (swig_guile_proc) _wrap_show_alt_conf_intermediate_atoms_state);
  scm_c_define_gsubr("zero-occupancy-residue-range", 4, 0, 0, (swig_guile_proc) _wrap_zero_occupancy_residue_range);
  scm_c_define_gsubr("fill-occupancy-residue-range", 4, 0, 0, (swig_guile_proc) _wrap_fill_occupancy_residue_range);
  scm_c_define_gsubr("place-atom-at-pointer", 0, 0, 0, (swig_guile_proc) _wrap_place_atom_at_pointer);
  scm_c_define_gsubr("place-typed-atom-at-pointer", 1, 0, 0, (swig_guile_proc) _wrap_place_typed_atom_at_pointer);
  scm_c_define_gsubr("set-pointer-atom-is-dummy", 1, 0, 0, (swig_guile_proc) _wrap_set_pointer_atom_is_dummy);
  scm_c_define_gsubr("fill-place-atom-molecule-option-menu", 1, 0, 0, (swig_guile_proc) _wrap_fill_place_atom_molecule_option_menu);
  scm_c_define_gsubr("display-where-is-pointer", 0, 0, 0, (swig_guile_proc) _wrap_display_where_is_pointer);
  scm_c_define_gsubr("set-baton-mode", 1, 0, 0, (swig_guile_proc) _wrap_set_baton_mode);
  scm_c_define_gsubr("set-draw-baton", 1, 0, 0, (swig_guile_proc) _wrap_set_draw_baton);
  scm_c_define_gsubr("accept-baton-position", 0, 0, 0, (swig_guile_proc) _wrap_accept_baton_position);
  scm_c_define_gsubr("baton-try-another", 0, 0, 0, (swig_guile_proc) _wrap_baton_try_another);
  scm_c_define_gsubr("shorten-baton", 0, 0, 0, (swig_guile_proc) _wrap_shorten_baton);
  scm_c_define_gsubr("lengthen-baton", 0, 0, 0, (swig_guile_proc) _wrap_lengthen_baton);
  scm_c_define_gsubr("baton-build-delete-last-residue", 0, 0, 0, (swig_guile_proc) _wrap_baton_build_delete_last_residue);
  scm_c_define_gsubr("set-baton-build-params", 3, 0, 0, (swig_guile_proc) _wrap_set_baton_build_params);
  scm_c_define_gsubr("baton-mode-calculate-skeleton", 1, 0, 0, (swig_guile_proc) _wrap_baton_mode_calculate_skeleton);
  scm_c_define_gsubr("reverse-direction-of-fragment", 3, 0, 0, (swig_guile_proc) _wrap_reverse_direction_of_fragment);
  scm_c_define_gsubr("setup-reverse-direction", 1, 0, 0, (swig_guile_proc) _wrap_setup_reverse_direction);
  scm_c_define_gsubr("add-OXT-to-residue", 4, 0, 0, (swig_guile_proc) _wrap_add_OXT_to_residue);
  scm_c_define_gsubr("wrapped-create-add-OXT-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_add_OXT_dialog);
  scm_c_define_gsubr("apply-add-OXT-from-widget", 1, 0, 0, (swig_guile_proc) _wrap_apply_add_OXT_from_widget);
  scm_c_define_gsubr("set-draw-crosshairs", 1, 0, 0, (swig_guile_proc) _wrap_set_draw_crosshairs);
  scm_c_define_gsubr("draw-crosshairs-state", 0, 0, 0, (swig_guile_proc) _wrap_draw_crosshairs_state);
  scm_c_define_gsubr("setup-edit-chi-angles", 1, 0, 0, (swig_guile_proc) _wrap_setup_edit_chi_angles);
  scm_c_define_gsubr("set-find-hydrogen-torsion", 1, 0, 0, (swig_guile_proc) _wrap_set_find_hydrogen_torsion);
  scm_c_define_gsubr("set-graphics-edit-current-chi", 1, 0, 0, (swig_guile_proc) _wrap_set_graphics_edit_current_chi);
  scm_c_define_gsubr("unset-moving-atom-move-chis", 0, 0, 0, (swig_guile_proc) _wrap_unset_moving_atom_move_chis);
  scm_c_define_gsubr("edit-chi-angles", 5, 0, 0, (swig_guile_proc) _wrap_edit_chi_angles);
  scm_c_define_gsubr("set-show-chi-angle-bond", 1, 0, 0, (swig_guile_proc) _wrap_set_show_chi_angle_bond);
  scm_c_define_gsubr("setup-torsion-general", 1, 0, 0, (swig_guile_proc) _wrap_setup_torsion_general);
  scm_c_define_gsubr("toggle-torsion-general-reverse", 0, 0, 0, (swig_guile_proc) _wrap_toggle_torsion_general_reverse);
  scm_c_define_gsubr("mask-map-by-molecule", 3, 0, 0, (swig_guile_proc) _wrap_mask_map_by_molecule);
  scm_c_define_gsubr("mask-map-by-atom-selection", 4, 0, 0, (swig_guile_proc) _wrap_mask_map_by_atom_selection);
  scm_c_define_gsubr("set-map-mask-atom-radius", 1, 0, 0, (swig_guile_proc) _wrap_set_map_mask_atom_radius);
  scm_c_define_gsubr("map-mask-atom-radius", 0, 0, 0, (swig_guile_proc) _wrap_map_mask_atom_radius);
  scm_c_define_gsubr("wrapped-create-check-waters-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_check_waters_dialog);
  scm_c_define_gsubr("set-check-waters-b-factor-limit", 1, 0, 0, (swig_guile_proc) _wrap_set_check_waters_b_factor_limit);
  scm_c_define_gsubr("set-check-waters-map-sigma-limit", 1, 0, 0, (swig_guile_proc) _wrap_set_check_waters_map_sigma_limit);
  scm_c_define_gsubr("set-check-waters-min-dist-limit", 1, 0, 0, (swig_guile_proc) _wrap_set_check_waters_min_dist_limit);
  scm_c_define_gsubr("set-check-waters-max-dist-limit", 1, 0, 0, (swig_guile_proc) _wrap_set_check_waters_max_dist_limit);
  scm_c_define_gsubr("check-waters-molecule-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_check_waters_molecule_menu_item_activate);
  scm_c_define_gsubr("do-check-waters-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_do_check_waters_by_widget);
  scm_c_define_gsubr("store-checked-waters-baddies-dialog", 1, 0, 0, (swig_guile_proc) _wrap_store_checked_waters_baddies_dialog);
  scm_c_define_gsubr("wrapped-checked-waters-baddies-dialog", 8, 0, 0, (swig_guile_proc) _wrap_wrapped_checked_waters_baddies_dialog);
  scm_c_define_gsubr("delete-checked-waters-baddies", 8, 0, 0, (swig_guile_proc) _wrap_delete_checked_waters_baddies);
  scm_c_define_gsubr("check-waters-by-difference-map", 3, 0, 0, (swig_guile_proc) _wrap_check_waters_by_difference_map);
  scm_c_define_gsubr("check-waters-by-difference-map-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_check_waters_by_difference_map_by_widget);
  scm_c_define_gsubr("wrapped-create-check-waters-diff-map-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_check_waters_diff_map_dialog);
  scm_c_define_gsubr("check-waters-by-difference-map-sigma-level-state", 0, 0, 0, (swig_guile_proc) _wrap_check_waters_by_difference_map_sigma_level_state);
  scm_c_define_gsubr("set-check-waters-by-difference-map-sigma-level", 1, 0, 0, (swig_guile_proc) _wrap_set_check_waters_by_difference_map_sigma_level);
  scm_c_define_gsubr("clear-lsq-matches", 0, 0, 0, (swig_guile_proc) _wrap_clear_lsq_matches);
  scm_c_define_gsubr("add-lsq-match", 7, 0, 0, (swig_guile_proc) _wrap_add_lsq_match);
  scm_c_define_gsubr("apply-lsq-matches", 2, 0, 0, (swig_guile_proc) _wrap_apply_lsq_matches);
  scm_c_define_gsubr("apply-lsq-matches-simple", 2, 0, 0, (swig_guile_proc) _wrap_apply_lsq_matches_simple);
  scm_c_define_gsubr("setup-lsq-deviation", 1, 0, 0, (swig_guile_proc) _wrap_setup_lsq_deviation);
  scm_c_define_gsubr("setup-lsq-plane-define", 1, 0, 0, (swig_guile_proc) _wrap_setup_lsq_plane_define);
  scm_c_define_gsubr("wrapped-create-lsq-plane-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_lsq_plane_dialog);
  scm_c_define_gsubr("unset-lsq-plane-dialog", 0, 0, 0, (swig_guile_proc) _wrap_unset_lsq_plane_dialog);
  scm_c_define_gsubr("remove-last-lsq-plane-atom", 0, 0, 0, (swig_guile_proc) _wrap_remove_last_lsq_plane_atom);
  scm_c_define_gsubr("wrapped-create-least-squares-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_least_squares_dialog);
  scm_c_define_gsubr("apply-lsq-matches-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_apply_lsq_matches_by_widget);
  scm_c_define_gsubr("lsq-ref-mol-option-menu-changed", 2, 0, 0, (swig_guile_proc) _wrap_lsq_ref_mol_option_menu_changed);
  scm_c_define_gsubr("lsq-mov-mol-option-menu-changed", 2, 0, 0, (swig_guile_proc) _wrap_lsq_mov_mol_option_menu_changed);
  scm_c_define_gsubr("lsq-reference-chain-option-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_lsq_reference_chain_option_menu_item_activate);
  scm_c_define_gsubr("lsq-moving-chain-option-menu-item-activate", 2, 0, 0, (swig_guile_proc) _wrap_lsq_moving_chain_option_menu_item_activate);
  scm_c_define_gsubr("fill-lsq-option-menu-with-chain-options", 2, 0, 0, (swig_guile_proc) _wrap_fill_lsq_option_menu_with_chain_options);
  scm_c_define_gsubr("trim-molecule-by-map", 4, 0, 0, (swig_guile_proc) _wrap_trim_molecule_by_map);
  scm_c_define_gsubr("raster3d", 1, 0, 0, (swig_guile_proc) _wrap_raster3d);
  scm_c_define_gsubr("povray", 1, 0, 0, (swig_guile_proc) _wrap_povray);
  scm_c_define_gsubr("make-image-raster3d", 1, 0, 0, (swig_guile_proc) _wrap_make_image_raster3d);
  scm_c_define_gsubr("make-image-povray", 1, 0, 0, (swig_guile_proc) _wrap_make_image_povray);
  scm_c_define_gsubr("set-raster3d-bond-thickness", 1, 0, 0, (swig_guile_proc) _wrap_set_raster3d_bond_thickness);
  scm_c_define_gsubr("set-raster3d-atom-radius", 1, 0, 0, (swig_guile_proc) _wrap_set_raster3d_atom_radius);
  scm_c_define_gsubr("set-raster3d-density-thickness", 1, 0, 0, (swig_guile_proc) _wrap_set_raster3d_density_thickness);
  scm_c_define_gsubr("set-renderer-show-atoms", 1, 0, 0, (swig_guile_proc) _wrap_set_renderer_show_atoms);
  scm_c_define_gsubr("set-raster3d-bone-thickness", 1, 0, 0, (swig_guile_proc) _wrap_set_raster3d_bone_thickness);
  scm_c_define_gsubr("raster-screen-shot", 0, 0, 0, (swig_guile_proc) _wrap_raster_screen_shot);
  scm_c_define_gsubr("citation-notice-off", 0, 0, 0, (swig_guile_proc) _wrap_citation_notice_off);
  scm_c_define_gsubr("superpose", 3, 0, 0, (swig_guile_proc) _wrap_superpose);
  scm_c_define_gsubr("superpose-with-chain-selection", 7, 0, 0, (swig_guile_proc) _wrap_superpose_with_chain_selection);
  scm_c_define_gsubr("superpose-with-atom-selection", 5, 0, 0, (swig_guile_proc) _wrap_superpose_with_atom_selection);
  scm_c_define_gsubr("execute-superpose", 1, 0, 0, (swig_guile_proc) _wrap_execute_superpose);
  scm_c_define_gsubr("wrapped-create-superpose-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_superpose_dialog);
  scm_c_define_gsubr("fill-superpose-option-menu-with-chain-options", 2, 0, 0, (swig_guile_proc) _wrap_fill_superpose_option_menu_with_chain_options);
  scm_c_define_gsubr("set-draw-ncs-ghosts", 2, 0, 0, (swig_guile_proc) _wrap_set_draw_ncs_ghosts);
  scm_c_define_gsubr("set-ncs-ghost-bond-thickness", 2, 0, 0, (swig_guile_proc) _wrap_set_ncs_ghost_bond_thickness);
  scm_c_define_gsubr("ncs-update-ghosts", 1, 0, 0, (swig_guile_proc) _wrap_ncs_update_ghosts);
  scm_c_define_gsubr("make-dynamically-transformed-ncs-maps", 2, 0, 0, (swig_guile_proc) _wrap_make_dynamically_transformed_ncs_maps);
  scm_c_define_gsubr("make-dynamically-transformed-ncs-maps-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_make_dynamically_transformed_ncs_maps_by_widget);
  scm_c_define_gsubr("wrapped-create-ncs-maps-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_ncs_maps_dialog);
  scm_c_define_gsubr("make-ncs-ghosts-maybe", 1, 0, 0, (swig_guile_proc) _wrap_make_ncs_ghosts_maybe);
  scm_c_define_gsubr("add-ncs-matrix", 0, 0, 1, (swig_guile_proc) _wrap_add_ncs_matrix_rest);
  scm_c_define_gsubr("clear-ncs-ghost-matrices", 1, 0, 0, (swig_guile_proc) _wrap_clear_ncs_ghost_matrices);
  scm_c_define_gsubr("add-strict-ncs-matrix", 0, 0, 1, (swig_guile_proc) _wrap_add_strict_ncs_matrix_rest);
  scm_c_define_gsubr("show-strict-ncs-state", 1, 0, 0, (swig_guile_proc) _wrap_show_strict_ncs_state);
  scm_c_define_gsubr("set-show-strict-ncs", 2, 0, 0, (swig_guile_proc) _wrap_set_show_strict_ncs);
  scm_c_define_gsubr("set-ncs-homology-level", 1, 0, 0, (swig_guile_proc) _wrap_set_ncs_homology_level);
  scm_c_define_gsubr("copy-chain", 3, 0, 0, (swig_guile_proc) _wrap_copy_chain);
  scm_c_define_gsubr("copy-from-ncs-master-to-others", 2, 0, 0, (swig_guile_proc) _wrap_copy_from_ncs_master_to_others);
  scm_c_define_gsubr("copy-residue-range-from-ncs-master-to-others", 4, 0, 0, (swig_guile_proc) _wrap_copy_residue_range_from_ncs_master_to_others);
  scm_c_define_gsubr("wrapped-create-ncs-control-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_create_ncs_control_dialog);
  scm_c_define_gsubr("ncs-control-change-ncs-master-to-chain", 2, 0, 0, (swig_guile_proc) _wrap_ncs_control_change_ncs_master_to_chain);
  scm_c_define_gsubr("ncs-control-change-ncs-master-to-chain-update-widget", 3, 0, 0, (swig_guile_proc) _wrap_ncs_control_change_ncs_master_to_chain_update_widget);
  scm_c_define_gsubr("ncs-control-display-chain", 3, 0, 0, (swig_guile_proc) _wrap_ncs_control_display_chain);
  scm_c_define_gsubr("ncs-chain-differences-scm", 2, 0, 0, (swig_guile_proc) _wrap_ncs_chain_differences_scm);
  scm_c_define_gsubr("ncs-chain-ids-scm", 1, 0, 0, (swig_guile_proc) _wrap_ncs_chain_ids_scm);
  scm_c_define_gsubr("place-helix-here", 0, 0, 0, (swig_guile_proc) _wrap_place_helix_here);
  scm_c_define_gsubr("place-strand-here", 2, 0, 0, (swig_guile_proc) _wrap_place_strand_here);
  scm_c_define_gsubr("new-molecule-by-residue-type-selection", 2, 0, 0, (swig_guile_proc) _wrap_new_molecule_by_residue_type_selection);
  scm_c_define_gsubr("new-molecule-by-atom-selection", 2, 0, 0, (swig_guile_proc) _wrap_new_molecule_by_atom_selection);
  scm_c_define_gsubr("new-molecule-by-sphere-selection", 5, 0, 0, (swig_guile_proc) _wrap_new_molecule_by_sphere_selection);
  scm_c_define_gsubr("set-axis-orientation-matrix", 9, 0, 0, (swig_guile_proc) _wrap_set_axis_orientation_matrix);
  scm_c_define_gsubr("set-axis-orientation-matrix-usage", 1, 0, 0, (swig_guile_proc) _wrap_set_axis_orientation_matrix_usage);
  scm_c_define_gsubr("ideal-nucleic-acid", 4, 0, 0, (swig_guile_proc) _wrap_ideal_nucleic_acid);
  scm_c_define_gsubr("wrapped-nucleotide-builder-dialog", 0, 0, 0, (swig_guile_proc) _wrap_wrapped_nucleotide_builder_dialog);
  scm_c_define_gsubr("ideal-nucleic-acid-by-widget", 1, 0, 0, (swig_guile_proc) _wrap_ideal_nucleic_acid_by_widget);
  scm_c_define_gsubr("print-sequence-chain", 2, 0, 0, (swig_guile_proc) _wrap_print_sequence_chain);
  scm_c_define_gsubr("assign-fasta-sequence", 3, 0, 0, (swig_guile_proc) _wrap_assign_fasta_sequence);
  scm_c_define_gsubr("assign-pir-sequence", 3, 0, 0, (swig_guile_proc) _wrap_assign_pir_sequence);
  scm_c_define_gsubr("assign-sequence", 3, 0, 0, (swig_guile_proc) _wrap_assign_sequence);
  scm_c_define_gsubr("assign-sequence-from-file", 2, 0, 0, (swig_guile_proc) _wrap_assign_sequence_from_file);
  scm_c_define_gsubr("assign-sequence-from-string", 3, 0, 0, (swig_guile_proc) _wrap_assign_sequence_from_string);
  scm_c_define_gsubr("delete-all-sequences-from-molecule", 1, 0, 0, (swig_guile_proc) _wrap_delete_all_sequences_from_molecule);
  scm_c_define_gsubr("delete-sequence-by-chain-id", 2, 0, 0, (swig_guile_proc) _wrap_delete_sequence_by_chain_id);
  scm_c_define_gsubr("sequence-info", 1, 0, 0, (swig_guile_proc) _wrap_sequence_info);
  scm_c_define_gsubr("do-surface", 2, 0, 0, (swig_guile_proc) _wrap_do_surface);
  scm_c_define_gsubr("fffear-search", 2, 0, 0, (swig_guile_proc) _wrap_fffear_search);
  scm_c_define_gsubr("set-fffear-angular-resolution", 1, 0, 0, (swig_guile_proc) _wrap_set_fffear_angular_resolution);
  scm_c_define_gsubr("fffear-angular-resolution", 0, 0, 0, (swig_guile_proc) _wrap_fffear_angular_resolution);
  scm_c_define_gsubr("make-socket-listener-maybe", 0, 0, 0, (swig_guile_proc) _wrap_make_socket_listener_maybe);
  scm_c_define_gsubr("coot-socket-listener-idle-func", 1, 0, 0, (swig_guile_proc) _wrap_coot_socket_listener_idle_func);
  scm_c_define_gsubr("set-coot-listener-socket-state-internal", 1, 0, 0, (swig_guile_proc) _wrap_set_coot_listener_socket_state_internal);
  scm_c_define_gsubr("set-socket-string-waiting", 1, 0, 0, (swig_guile_proc) _wrap_set_socket_string_waiting);
  scm_c_define_gsubr("set-display-lists-for-maps", 1, 0, 0, (swig_guile_proc) _wrap_set_display_lists_for_maps);
  scm_c_define_gsubr("preferences", 0, 0, 0, (swig_guile_proc) _wrap_preferences);
  scm_c_define_gsubr("clear-preferences", 0, 0, 0, (swig_guile_proc) _wrap_clear_preferences);
  scm_c_define_gsubr("set-mark-cis-peptides-as-bad", 1, 0, 0, (swig_guile_proc) _wrap_set_mark_cis_peptides_as_bad);
  scm_c_define_gsubr("show-mark-cis-peptides-as-bad-state", 0, 0, 0, (swig_guile_proc) _wrap_show_mark_cis_peptides_as_bad_state);
  scm_c_define_gsubr("browser-url", 1, 0, 0, (swig_guile_proc) _wrap_browser_url);
  scm_c_define_gsubr("set-browser-interface", 1, 0, 0, (swig_guile_proc) _wrap_set_browser_interface);
  scm_c_define_gsubr("handle-online-coot-search-request", 1, 0, 0, (swig_guile_proc) _wrap_handle_online_coot_search_request);
  scm_c_define_gsubr("new-generic-object-number", 1, 0, 0, (swig_guile_proc) _wrap_new_generic_object_number);
  scm_c_define_gsubr("to-generic-object-add-line", 9, 0, 0, (swig_guile_proc) _wrap_to_generic_object_add_line);
  scm_c_define_gsubr("to-generic-object-add-point", 6, 0, 0, (swig_guile_proc) _wrap_to_generic_object_add_point);
  scm_c_define_gsubr("to-generic-object-add-display-list-handle", 2, 0, 0, (swig_guile_proc) _wrap_to_generic_object_add_display_list_handle);
  scm_c_define_gsubr("set-display-generic-object", 2, 0, 0, (swig_guile_proc) _wrap_set_display_generic_object);
  scm_c_define_gsubr("generic-object-is-displayed-p", 1, 0, 0, (swig_guile_proc) _wrap_generic_object_is_displayed_p);
  scm_c_define_gsubr("generic-object-index", 1, 0, 0, (swig_guile_proc) _wrap_generic_object_index);
  scm_c_define_gsubr("generic-object-name", 1, 0, 0, (swig_guile_proc) _wrap_generic_object_name);
  scm_c_define_gsubr("number-of-generic-objects", 0, 0, 0, (swig_guile_proc) _wrap_number_of_generic_objects);
  scm_c_define_gsubr("generic-object-info", 0, 0, 0, (swig_guile_proc) _wrap_generic_object_info);
  scm_c_define_gsubr("generic-object-has-objects-p", 1, 0, 0, (swig_guile_proc) _wrap_generic_object_has_objects_p);
  scm_c_define_gsubr("close-generic-object", 1, 0, 0, (swig_guile_proc) _wrap_close_generic_object);
  scm_c_define_gsubr("is-closed-generic-object-p", 1, 0, 0, (swig_guile_proc) _wrap_is_closed_generic_object_p);
  scm_c_define_gsubr("generic-objects-gui-wrapper", 0, 0, 0, (swig_guile_proc) _wrap_generic_objects_gui_wrapper);
  scm_c_define_gsubr("handle-read-draw-probe-dots", 1, 0, 0, (swig_guile_proc) _wrap_handle_read_draw_probe_dots);
  scm_c_define_gsubr("handle-read-draw-probe-dots-unformatted", 3, 0, 0, (swig_guile_proc) _wrap_handle_read_draw_probe_dots_unformatted);
  scm_c_define_gsubr("set-do-probe-dots-on-rotamers-and-chis", 1, 0, 0, (swig_guile_proc) _wrap_set_do_probe_dots_on_rotamers_and_chis);
  scm_c_define_gsubr("do-probe-dots-on-rotamers-and-chis-state", 0, 0, 0, (swig_guile_proc) _wrap_do_probe_dots_on_rotamers_and_chis_state);
  scm_c_define_gsubr("set-do-probe-dots-post-refine", 1, 0, 0, (swig_guile_proc) _wrap_set_do_probe_dots_post_refine);
  scm_c_define_gsubr("do-probe-dots-post-refine-state", 0, 0, 0, (swig_guile_proc) _wrap_do_probe_dots_post_refine_state);
  scm_c_define_gsubr("unmangle-hydrogen-name", 1, 0, 0, (swig_guile_proc) _wrap_unmangle_hydrogen_name);
  scm_c_define_gsubr("set-interactive-probe-dots-molprobity-radius", 1, 0, 0, (swig_guile_proc) _wrap_set_interactive_probe_dots_molprobity_radius);
  scm_c_define_gsubr("interactive-probe-dots-molprobity-radius", 0, 0, 0, (swig_guile_proc) _wrap_interactive_probe_dots_molprobity_radius);
  scm_c_define_gsubr("probe-available-p", 0, 0, 0, (swig_guile_proc) _wrap_probe_available_p);
  scm_c_define_gsubr("set-dti-stereo-mode", 1, 0, 0, (swig_guile_proc) _wrap_set_dti_stereo_mode);
  scm_c_define_gsubr("sharpen", 2, 0, 0, (swig_guile_proc) _wrap_sharpen);
  scm_c_define_gsubr("drag-intermediate-atom-scm", 2, 0, 0, (swig_guile_proc) _wrap_drag_intermediate_atom_scm);
  scm_c_define_gsubr("mark-atom-as-fixed-scm", 3, 0, 0, (swig_guile_proc) _wrap_mark_atom_as_fixed_scm);
  scm_c_define_gsubr("clear-all-fixed-atoms", 1, 0, 0, (swig_guile_proc) _wrap_clear_all_fixed_atoms);
  scm_c_define_gsubr("scale-cell", 4, 0, 0, (swig_guile_proc) _wrap_scale_cell);
  scm_c_define_gsubr("write-ccp4mg-picture-description", 1, 0, 0, (swig_guile_proc) _wrap_write_ccp4mg_picture_description);
  scm_c_define_gsubr("laplacian", 1, 0, 0, (swig_guile_proc) _wrap_laplacian);
  scm_c_define_gsubr("do-smiles-gui", 0, 0, 0, (swig_guile_proc) _wrap_do_smiles_gui);
  scm_c_define_gsubr("do-tw", 0, 0, 0, (swig_guile_proc) _wrap_do_tw);
  scm_c_define_gsubr("set-button-label-for-external-refinement", 1, 0, 0, (swig_guile_proc) _wrap_set_button_label_for_external_refinement);
  scm_c_define_gsubr("place-text", 5, 0, 0, (swig_guile_proc) _wrap_place_text);
  scm_c_define_gsubr("remove-text", 1, 0, 0, (swig_guile_proc) _wrap_remove_text);
  SWIG_TypeClientData(SWIGTYPE_p_coot__alias_path_t, (void *) &_swig_guile_clientdataalias_path_t);
  scm_c_define_gsubr("alias-path-t-index-set", 2, 0, 0, (swig_guile_proc) _wrap_alias_path_t_index_set);
  scm_c_define_gsubr("alias-path-t-index-get", 1, 0, 0, (swig_guile_proc) _wrap_alias_path_t_index_get);
  scm_c_define_gsubr("alias-path-t-s-set", 2, 0, 0, (swig_guile_proc) _wrap_alias_path_t_s_set);
  scm_c_define_gsubr("alias-path-t-s-get", 1, 0, 0, (swig_guile_proc) _wrap_alias_path_t_s_get);
  scm_c_define_gsubr("alias-path-t-flag-set", 2, 0, 0, (swig_guile_proc) _wrap_alias_path_t_flag_set);
  scm_c_define_gsubr("alias-path-t-flag-get", 1, 0, 0, (swig_guile_proc) _wrap_alias_path_t_flag_get);
  scm_c_define_gsubr("new-alias-path-t", 3, 0, 0, (swig_guile_proc) _wrap_new_alias_path_t);
  ((swig_guile_clientdata *)(SWIGTYPE_p_coot__alias_path_t->clientdata))->destroy = (guile_destructor) _wrap_delete_alias_path_t;
  scm_c_define_gsubr("delete-alias-path-t", 1, 0, 0, (swig_guile_proc) _wrap_delete_alias_path_t);
  scm_c_define_gsubr("filtered-by-glob", 2, 0, 0, (swig_guile_proc) _wrap_filtered_by_glob);
  scm_c_define_gsubr("string-member", 2, 0, 0, (swig_guile_proc) _wrap_string_member);
  scm_c_define_gsubr("compare-strings", 2, 0, 0, (swig_guile_proc) _wrap_compare_strings);
  scm_c_define_gsubr("pre-directory-file-selection", 1, 0, 0, (swig_guile_proc) _wrap_pre_directory_file_selection);
  scm_c_define_gsubr("filelist-into-fileselection-clist", 2, 0, 0, (swig_guile_proc) _wrap_filelist_into_fileselection_clist);
  scm_c_define_gsubr("wrapped-nothing-bad-dialog", 1, 0, 0, (swig_guile_proc) _wrap_wrapped_nothing_bad_dialog);
  scm_c_define_gsubr("float-from-entry", 1, 0, 0, (swig_guile_proc) _wrap_float_from_entry);
  scm_c_define_gsubr("int-from-entry", 1, 0, 0, (swig_guile_proc) _wrap_int_from_entry);
  scm_c_define_gsubr("add-validation-mol-menu-item", 4, 0, 0, (swig_guile_proc) _wrap_add_validation_mol_menu_item);
  scm_c_define_gsubr("create-initial-validation-graph-submenu-generic", 3, 0, 0, (swig_guile_proc) _wrap_create_initial_validation_graph_submenu_generic);
  scm_c_define_gsubr("probe-dots-short-contact-name-to-expanded-name", 1, 0, 0, (swig_guile_proc) _wrap_probe_dots_short_contact_name_to_expanded_name);
  scm_c_define_gsubr("set-go-to-atom-from-spec", 1, 0, 0, (swig_guile_proc) _wrap_set_go_to_atom_from_spec);
  scm_c_define_gsubr("active-atom-spec", 0, 0, 0, (swig_guile_proc) _wrap_active_atom_spec);
  scm_c_define_gsubr("get-symmetry", 1, 0, 0, (swig_guile_proc) _wrap_get_symmetry);
  scm_c_define_gsubr("add-map-colour-mol-menu-item", 4, 0, 0, (swig_guile_proc) _wrap_add_map_colour_mol_menu_item);
  scm_c_define_gsubr("add-map-scroll-wheel-mol-menu-item", 4, 0, 0, (swig_guile_proc) _wrap_add_map_scroll_wheel_mol_menu_item);
  scm_c_define_gsubr("map-colour-components", 1, 0, 0, (swig_guile_proc) _wrap_map_colour_components);
  scm_c_define_gsubr("execute-refmac-real", 0, 0, 1, (swig_guile_proc) _wrap_execute_refmac_real_rest);
  SWIG_TypeClientData(SWIGTYPE_p_coot__str_mtime, (void *) &_swig_guile_clientdatastr_mtime);
  scm_c_define_gsubr("new-str-mtime", 0, 0, 1, (swig_guile_proc) _wrap_new_str_mtime);
  scm_c_define_gsubr("str-mtime-mtime-set", 2, 0, 0, (swig_guile_proc) _wrap_str_mtime_mtime_set);
  scm_c_define_gsubr("str-mtime-mtime-get", 1, 0, 0, (swig_guile_proc) _wrap_str_mtime_mtime_get);
  scm_c_define_gsubr("str-mtime-file-set", 2, 0, 0, (swig_guile_proc) _wrap_str_mtime_file_set);
  scm_c_define_gsubr("str-mtime-file-get", 1, 0, 0, (swig_guile_proc) _wrap_str_mtime_file_get);
  ((swig_guile_clientdata *)(SWIGTYPE_p_coot__str_mtime->clientdata))->destroy = (guile_destructor) _wrap_delete_str_mtime;
  scm_c_define_gsubr("delete-str-mtime", 1, 0, 0, (swig_guile_proc) _wrap_delete_str_mtime);
  SWIG_TypeClientData(SWIGTYPE_p_coot__file_attribs_info_t, (void *) &_swig_guile_clientdatafile_attribs_info_t);
  scm_c_define_gsubr("file-attribs-info-t-directory-prefix-set", 2, 0, 0, (swig_guile_proc) _wrap_file_attribs_info_t_directory_prefix_set);
  scm_c_define_gsubr("file-attribs-info-t-directory-prefix-get", 1, 0, 0, (swig_guile_proc) _wrap_file_attribs_info_t_directory_prefix_get);
  scm_c_define_gsubr("file-attribs-info-t-file-mtimes-set", 2, 0, 0, (swig_guile_proc) _wrap_file_attribs_info_t_file_mtimes_set);
  scm_c_define_gsubr("file-attribs-info-t-file-mtimes-get", 1, 0, 0, (swig_guile_proc) _wrap_file_attribs_info_t_file_mtimes_get);
  scm_c_define_gsubr("new-file-attribs-info-t", 0, 0, 0, (swig_guile_proc) _wrap_new_file_attribs_info_t);
  ((swig_guile_clientdata *)(SWIGTYPE_p_coot__file_attribs_info_t->clientdata))->destroy = (guile_destructor) _wrap_delete_file_attribs_info_t;
  scm_c_define_gsubr("delete-file-attribs-info-t", 1, 0, 0, (swig_guile_proc) _wrap_delete_file_attribs_info_t);
  scm_c_define_gsubr("compare-mtimes", 2, 0, 0, (swig_guile_proc) _wrap_compare_mtimes);
  scm_c_define_gsubr("parse-ccp4i-defs", 1, 0, 0, (swig_guile_proc) _wrap_parse_ccp4i_defs);
  scm_c_define_gsubr("ccp4-project-directory", 1, 0, 0, (swig_guile_proc) _wrap_ccp4_project_directory);
  SWIG_TypeClientData(SWIGTYPE_p_coot__command_arg_t, (void *) &_swig_guile_clientdatacommand_arg_t);
  scm_c_define_gsubr("command-arg-t-INT", 0, 0, 0, (swig_guile_proc) _wrap_command_arg_t_INT);
  scm_c_define_gsubr("command-arg-t-FLOAT", 0, 0, 0, (swig_guile_proc) _wrap_command_arg_t_FLOAT);
  scm_c_define_gsubr("command-arg-t-STRING", 0, 0, 0, (swig_guile_proc) _wrap_command_arg_t_STRING);
  scm_c_define_gsubr("new-command-arg-t", 0, 0, 1, (swig_guile_proc) _wrap_new_command_arg_t);
  scm_c_define_gsubr("command-arg-t-type-set", 2, 0, 0, (swig_guile_proc) _wrap_command_arg_t_type_set);
  scm_c_define_gsubr("command-arg-t-type-get", 1, 0, 0, (swig_guile_proc) _wrap_command_arg_t_type_get);
  scm_c_define_gsubr("command-arg-t-f-set", 2, 0, 0, (swig_guile_proc) _wrap_command_arg_t_f_set);
  scm_c_define_gsubr("command-arg-t-f-get", 1, 0, 0, (swig_guile_proc) _wrap_command_arg_t_f_get);
  scm_c_define_gsubr("command-arg-t-i-set", 2, 0, 0, (swig_guile_proc) _wrap_command_arg_t_i_set);
  scm_c_define_gsubr("command-arg-t-i-get", 1, 0, 0, (swig_guile_proc) _wrap_command_arg_t_i_get);
  scm_c_define_gsubr("command-arg-t-s-set", 2, 0, 0, (swig_guile_proc) _wrap_command_arg_t_s_set);
  scm_c_define_gsubr("command-arg-t-s-get", 1, 0, 0, (swig_guile_proc) _wrap_command_arg_t_s_get);
  scm_c_define_gsubr("command-arg-t-as-string", 1, 0, 0, (swig_guile_proc) _wrap_command_arg_t_as_string);
  ((swig_guile_clientdata *)(SWIGTYPE_p_coot__command_arg_t->clientdata))->destroy = (guile_destructor) _wrap_delete_command_arg_t;
  scm_c_define_gsubr("delete-command-arg-t", 1, 0, 0, (swig_guile_proc) _wrap_delete_command_arg_t);
  scm_c_define_gsubr("add-to-history", 1, 0, 0, (swig_guile_proc) _wrap_add_to_history);
  scm_c_define_gsubr("add-to-history-simple", 1, 0, 0, (swig_guile_proc) _wrap_add_to_history_simple);
  scm_c_define_gsubr("add-to-history-typed", 2, 0, 0, (swig_guile_proc) _wrap_add_to_history_typed);
  scm_c_define_gsubr("single-quote", 1, 0, 0, (swig_guile_proc) _wrap_single_quote);
  scm_c_define_gsubr("pythonize-command-name", 1, 0, 0, (swig_guile_proc) _wrap_pythonize_command_name);
  scm_c_define_gsubr("schemize-command-name", 1, 0, 0, (swig_guile_proc) _wrap_schemize_command_name);
  scm_c_define_gsubr("languagize-command", 1, 0, 0, (swig_guile_proc) _wrap_languagize_command);
  scm_c_define_gsubr("add-to-database", 1, 0, 0, (swig_guile_proc) _wrap_add_to_database);
  scm_c_define_gsubr("merge-molecules-by-vector", 2, 0, 0, (swig_guile_proc) _wrap_merge_molecules_by_vector);
  scm_c_define_gsubr("dictionaries-read", 0, 0, 0, (swig_guile_proc) _wrap_dictionaries_read);
  scm_c_define_gsubr("monomer-restraints", 1, 0, 0, (swig_guile_proc) _wrap_monomer_restraints);
  scm_c_define_gsubr("set-monomer-restraints", 2, 0, 0, (swig_guile_proc) _wrap_set_monomer_restraints);
  scm_c_define_gsubr("safe-scheme-command-test", 1, 0, 0, (swig_guile_proc) _wrap_safe_scheme_command_test);
  scm_c_define_gsubr("safe-scheme-command", 1, 0, 0, (swig_guile_proc) _wrap_safe_scheme_command);
  scm_c_define_gsubr("run-generic-script", 1, 0, 0, (swig_guile_proc) _wrap_run_generic_script);
  scm_c_define_gsubr("scm-residue", 1, 0, 0, (swig_guile_proc) _wrap_scm_residue);
  scm_c_define_gsubr("atom-info-string", 6, 0, 0, (swig_guile_proc) _wrap_atom_info_string);
  scm_c_define_gsubr("residue-info", 4, 0, 0, (swig_guile_proc) _wrap_residue_info);
  scm_c_define_gsubr("residue-name", 4, 0, 0, (swig_guile_proc) _wrap_residue_name);
  scm_c_define_gsubr("clear-and-update-molecule", 2, 0, 0, (swig_guile_proc) _wrap_clear_and_update_molecule);
  scm_c_define_gsubr("add-molecule", 2, 0, 0, (swig_guile_proc) _wrap_add_molecule);
  scm_c_define_gsubr("active-residue", 0, 0, 0, (swig_guile_proc) _wrap_active_residue);
  scm_c_define_gsubr("closest-atom", 1, 0, 0, (swig_guile_proc) _wrap_closest_atom);
  scm_c_define_gsubr("spin-search-by-atom-vectors", 7, 0, 0, (swig_guile_proc) _wrap_spin_search_by_atom_vectors);
  scm_c_define_gsubr("spin-search", 7, 0, 0, (swig_guile_proc) _wrap_spin_search);
  scm_c_define_gsubr("monomer-lib-3-letter-codes-matching", 2, 0, 0, (swig_guile_proc) _wrap_monomer_lib_3_letter_codes_matching);
  scm_c_define_gsubr("on-monomer-lib-search-results-button-press", 2, 0, 0, (swig_guile_proc) _wrap_on_monomer_lib_search_results_button_press);
  scm_c_define_gsubr("mutate-internal", 4, 0, 0, (swig_guile_proc) _wrap_mutate_internal);
  scm_c_define_gsubr("execute-ligand-search-internal", 0, 0, 0, (swig_guile_proc) _wrap_execute_ligand_search_internal);
  scm_c_define_gsubr("overlap-ligands-internal", 5, 0, 0, (swig_guile_proc) _wrap_overlap_ligands_internal);
  scm_c_define_gsubr("cootaneer-internal", 3, 0, 0, (swig_guile_proc) _wrap_cootaneer_internal);
  scm_c_define_gsubr("cootaneer", 3, 0, 0, (swig_guile_proc) _wrap_cootaneer);
  scm_c_define_gsubr("is-interesting-dots-object-next-p", 1, 0, 0, (swig_guile_proc) _wrap_is_interesting_dots_object_next_p);
  scm_c_define_gsubr("generic-string-vector-to-list-internal", 1, 0, 0, (swig_guile_proc) _wrap_generic_string_vector_to_list_internal);
  scm_c_define_gsubr("generic-int-vector-to-list-internal", 1, 0, 0, (swig_guile_proc) _wrap_generic_int_vector_to_list_internal);
  scm_c_define_gsubr("generic-list-to-string-vector-internal", 1, 0, 0, (swig_guile_proc) _wrap_generic_list_to_string_vector_internal);
  scm_c_define_gsubr("rtop-to-scm", 1, 0, 0, (swig_guile_proc) _wrap_rtop_to_scm);
  scm_c_define_gsubr("atom-spec-from-scm-expression", 1, 0, 0, (swig_guile_proc) _wrap_atom_spec_from_scm_expression);
  scm_c_define_gsubr("set-display-control-button-state", 3, 0, 0, (swig_guile_proc) _wrap_set_display_control_button_state);
}

#ifdef __cplusplus
}
#endif
extern "C" {
/* Linkage: simple */

}

